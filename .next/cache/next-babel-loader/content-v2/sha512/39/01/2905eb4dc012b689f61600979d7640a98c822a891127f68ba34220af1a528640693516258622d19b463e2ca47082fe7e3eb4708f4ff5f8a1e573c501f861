{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/shumiya/Desktop/dev/react/shumipro_front/src/pages/Task.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport Link from 'next/link';\nimport Layout from '../components/Layout';\nimport TaskBoard from '../components/TaskBoard';\nimport TaskEditModal from '../components/TaskEditModal';\nimport { authentication } from '../components/Authentication';\nimport dynamic from \"next/dynamic\";\nimport { Button } from 'react-bootstrap';\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\n\nconst Task = () => {\n  // タスク作成モーダル表示フラグ\n  const {\n    0: taskCreateModalDispFlg,\n    1: setTaskCreateModalDispFlg\n  } = useState(false); // タスク更新モーダル表示フラグ\n\n  const {\n    0: taskUpdateModalDispFlg,\n    1: setTaskUpdateModalDispFlg\n  } = useState(false); // 初期表示フラグ\n\n  const {\n    0: initDispFlg,\n    1: setInitDispFlg\n  } = useState(true); // 編集対象タスク\n\n  const {\n    0: targetTask,\n    1: setTargetTaskk\n  } = useState(null);\n  authentication();\n\n  const showTaskCreateModal = task => {\n    setTargetTaskk(task);\n    setTaskCreateModalDispFlg(true);\n  };\n\n  const closeTaskCreateModal = () => {\n    setTaskCreateModalDispFlg(false);\n  };\n\n  const showTaskUpdateModal = task => {\n    setTargetTaskk(task);\n    setTaskUpdateModalDispFlg(true);\n  };\n\n  const closeTaskUpdateModal = () => {\n    setTaskUpdateModalDispFlg(false);\n  };\n\n  const onDragEnd = result => {\n    if (!result.destination) {\n      return;\n    }\n\n    if (result.destination.index === result.source.index) {\n      return;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    title: \"Task.\",\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      variant: \"primary\",\n      className: \"button_md\",\n      onClick: () => showTaskCreateModal(null),\n      children: \"create task\"\n    }, \"create\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: onDragEnd,\n      children: /*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: \"list\",\n        children: provided => /*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread({\n          ref: provided.innerRef\n        }, provided.droppableProps), {}, {\n          children: /*#__PURE__*/_jsxDEV(TaskBoard, {\n            initDispFlg: initDispFlg,\n            setInitDispFlg: setInitDispFlg,\n            show: showTaskUpdateModal\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 17\n          }, this)\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      href: \"/\",\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        children: \"\\uFF1C\\uFF1C Back to login page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }, this), taskCreateModalDispFlg && /*#__PURE__*/_jsxDEV(TaskEditModal, {\n      close: closeTaskCreateModal,\n      execSbt: \"1\",\n      setInitDispFlg: setInitDispFlg,\n      task: targetTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 21\n    }, this), taskUpdateModalDispFlg && /*#__PURE__*/_jsxDEV(TaskEditModal, {\n      close: closeTaskUpdateModal,\n      execSbt: \"2\",\n      setInitDispFlg: setInitDispFlg,\n      task: targetTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n\nconst DynamicTask = dynamic({\n  loader: async () => Task\n}, {\n  ssr: false\n});\nexport default DynamicTask;","map":{"version":3,"sources":["/Users/shumiya/Desktop/dev/react/shumipro_front/src/pages/Task.tsx"],"names":["React","useState","Link","Layout","TaskBoard","TaskEditModal","authentication","dynamic","Button","DragDropContext","Droppable","Task","taskCreateModalDispFlg","setTaskCreateModalDispFlg","taskUpdateModalDispFlg","setTaskUpdateModalDispFlg","initDispFlg","setInitDispFlg","targetTask","setTargetTaskk","showTaskCreateModal","task","closeTaskCreateModal","showTaskUpdateModal","closeTaskUpdateModal","onDragEnd","result","destination","index","source","provided","innerRef","droppableProps","DynamicTask","loader","ssr"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Link from 'next/link';\nimport Layout from '../components/Layout';\nimport TaskBoard from '../components/TaskBoard';\nimport TaskEditModal from '../components/TaskEditModal';\nimport {authentication} from '../components/Authentication';\nimport dynamic from \"next/dynamic\";\nimport {Button} from 'react-bootstrap';\nimport { Task as TaskClass } from '../components/interface';\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\n\n\nconst Task: React.FC = () => {\n    // タスク作成モーダル表示フラグ\n    const [taskCreateModalDispFlg, setTaskCreateModalDispFlg] = useState<Boolean>(false);\n    // タスク更新モーダル表示フラグ\n    const [taskUpdateModalDispFlg, setTaskUpdateModalDispFlg] = useState<Boolean>(false);\n    // 初期表示フラグ\n    const [initDispFlg, setInitDispFlg] = useState<Boolean>(true);\n    // 編集対象タスク\n    const [targetTask, setTargetTaskk] = useState<TaskClass>(null);\n\n    authentication();\n\n    const showTaskCreateModal = (task: TaskClass) => {\n        setTargetTaskk(task);\n        setTaskCreateModalDispFlg(true);\n    }\n\n    const closeTaskCreateModal = () => {\n        setTaskCreateModalDispFlg(false);\n    }\n\n    const showTaskUpdateModal = (task: TaskClass) => {\n        setTargetTaskk(task);\n        setTaskUpdateModalDispFlg(true);\n    }\n\n    const closeTaskUpdateModal = () => {\n        setTaskUpdateModalDispFlg(false);\n    }\n\n    const onDragEnd = result => {\n        if (!result.destination) {\n          return;\n        }\n    \n        if (result.destination.index === result.source.index) {\n          return;\n        }\n    };\n\n\n    return (\n        <Layout title=\"Task.\">\n                <Button key=\"create\" variant=\"primary\" className=\"button_md\" onClick={ () => showTaskCreateModal(null)}>create task</Button>\n\n                <DragDropContext onDragEnd={onDragEnd}>\n                <Droppable droppableId=\"list\">\n                {provided => (\n              <div ref={provided.innerRef} {...provided.droppableProps}>\n                <TaskBoard\n                    initDispFlg = {initDispFlg}\n                    setInitDispFlg = {setInitDispFlg}\n                    show = {showTaskUpdateModal} />\n              </div>\n            )}\n          </Droppable>\n\n                </DragDropContext>\n\n\n                <br />\n                <Link href=\"/\">\n                    <a>＜＜ Back to login page</a>\n                </Link>\n                {taskCreateModalDispFlg && \n                    <TaskEditModal \n                        close = {closeTaskCreateModal}\n                        execSbt = \"1\"\n                        setInitDispFlg = {setInitDispFlg}\n                        task = {targetTask}\n                    />\n                }\n                {taskUpdateModalDispFlg && \n                    <TaskEditModal \n                        close = {closeTaskUpdateModal}\n                        execSbt = \"2\"\n                        setInitDispFlg = {setInitDispFlg}\n                        task = {targetTask}\n                    />\n                }\n        </Layout>\n    )\n}\n\nconst DynamicTask = dynamic(\n    {\n      loader: async () => Task,\n    },\n    { ssr: false }\n  );\n  \n  export default DynamicTask;"]},"metadata":{},"sourceType":"module"}