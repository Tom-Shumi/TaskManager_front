{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/TaskBoard.tsx\";\nimport React from 'react';\nimport TaskList from '../components/TaskList';\nimport { Task } from './interface';\nimport Router from 'next/router';\nimport Axios from \"axios\";\nimport { useState } from \"react\";\nimport styles from '../styles/TaskBoard.module.css';\n\nconst TaskBoard = props => {\n  // 未対応のタスク\n  const {\n    0: taskListNotStarted,\n    1: setTaskListNotStarted\n  } = useState([]); // 対応中のタスク\n\n  const {\n    0: taskListInProgress,\n    1: setTaskListInProgress\n  } = useState([]); // 対応済みのタスク\n\n  const {\n    0: taskListDone,\n    1: setTaskListDone\n  } = useState([]); // 初期表示フラグ\n\n  const {\n    0: initFlg,\n    1: setInitFlg\n  } = useState(true);\n\n  const callGetTaskList = () => {\n    var res = getTaskList();\n    res.then(ret => setTaskListNotStarted(ret[0]));\n    res.then(ret => setTaskListInProgress(ret[1]));\n    res.then(ret => setTaskListDone(ret[2]));\n  };\n\n  if (initFlg) {\n    setInitFlg(false);\n    callGetTaskList();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.task_board,\n    children: [/*#__PURE__*/_jsxDEV(TaskList, {\n      taskList: taskListNotStarted,\n      status: \"1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n      taskList: taskListInProgress,\n      status: \"2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n      taskList: taskListDone,\n      status: \"3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n}; // 各apiを呼び出しタスクリストを取得する\n\n\nasync function getTaskList() {\n  let client = Axios.create({\n    withCredentials: true\n  });\n  var listNotStarted = [];\n  var lisInProgress = [];\n  var listDone = [];\n\n  try {\n    const resNotStarted = await client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK + \"/1\");\n    const resInProgress = await client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK + \"/2\");\n    const resDone = await client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK + \"/3\");\n    listNotStarted = createTaskList(resNotStarted.data);\n    lisInProgress = createTaskList(resInProgress.data);\n    listDone = createTaskList(resDone.data);\n  } catch (error) {\n    Router.push('/Error?400');\n  }\n\n  return [listNotStarted, lisInProgress, listDone];\n} // apiレスポンスからタスクリストを生成する\n\n\nfunction createTaskList(responseData) {\n  let length = responseData.length;\n  var taskList = [];\n\n  for (var i = 0; i < length; i++) {\n    let task = new Task(responseData[i][\"task\"], responseData[i][\"description\"], responseData[i][\"priority\"]);\n    taskList.push(task);\n  }\n\n  return taskList;\n}\n\nexport default TaskBoard;","map":{"version":3,"sources":["/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/TaskBoard.tsx"],"names":["React","TaskList","Task","Router","Axios","useState","styles","TaskBoard","props","taskListNotStarted","setTaskListNotStarted","taskListInProgress","setTaskListInProgress","taskListDone","setTaskListDone","initFlg","setInitFlg","callGetTaskList","res","getTaskList","then","ret","task_board","client","create","withCredentials","listNotStarted","lisInProgress","listDone","resNotStarted","get","process","env","NEXT_PUBLIC_API_SERVER","NEXT_PUBLIC_API_TASK","resInProgress","resDone","createTaskList","data","error","push","responseData","length","taskList","i","task"],"mappings":"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","sourcesContent":["import React from 'react';\nimport TaskList from '../components/TaskList'\nimport { Task } from './interface';\nimport Router from 'next/router';\nimport Axios from \"axios\";\nimport { useState } from \"react\";\nimport styles from '../styles/TaskBoard.module.css';\n\ninterface TaskBoardProps {\n\n}\n\nconst TaskBoard: React.FC<TaskBoardProps> = (props) => {\n    // 未対応のタスク\n    const [taskListNotStarted, setTaskListNotStarted] = useState<Task[]>([]);\n    // 対応中のタスク\n    const [taskListInProgress, setTaskListInProgress] = useState<Task[]>([]);\n    // 対応済みのタスク\n    const [taskListDone, setTaskListDone] = useState<Task[]>([]);\n    // 初期表示フラグ\n    const [initFlg, setInitFlg] = useState<Boolean>(true);\n\n    const callGetTaskList = () => {\n        var res: Promise<Task[][]> = getTaskList();\n        res.then(ret => setTaskListNotStarted(ret[0]));\n        res.then(ret => setTaskListInProgress(ret[1]));\n        res.then(ret => setTaskListDone(ret[2]));\n    }\n\n    if (initFlg) {\n        setInitFlg(false);\n        callGetTaskList();\n    }\n\n    return (\n        <div className={styles.task_board}>\n            <TaskList taskList={taskListNotStarted} status=\"1\" />\n            <TaskList taskList={taskListInProgress} status=\"2\" />\n            <TaskList taskList={taskListDone} status=\"3\" />\n        </div>\n    )\n}\n\n// 各apiを呼び出しタスクリストを取得する\nasync function getTaskList(){\n    let client = Axios.create({ withCredentials: true });\n    var listNotStarted :Task[] = [];\n    var lisInProgress :Task[] = [];\n    var listDone :Task[] = [];\n    try {\n        const resNotStarted = await client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK + \"/1\");\n        const resInProgress = await client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK + \"/2\");\n        const resDone = await client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK + \"/3\");\n\n        listNotStarted = createTaskList(resNotStarted.data);\n        lisInProgress = createTaskList(resInProgress.data);\n        listDone = createTaskList(resDone.data);\n    } catch(error){\n        Router.push('/Error?400');\n    }\n    return [listNotStarted, lisInProgress, listDone];\n}\n\n// apiレスポンスからタスクリストを生成する\nfunction createTaskList(responseData: any[]): Task[]{\n    let length: number = responseData.length;\n    var taskList :Task[] = [];\n    for (var i = 0 ; i < length ; i++) {\n        let task = new Task(responseData[i][\"task\"], responseData[i][\"description\"], responseData[i][\"priority\"]);\n        taskList.push(task);\n    }\n    return taskList;\n}\n\nexport default TaskBoard;"]},"metadata":{},"sourceType":"module"}