{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/TaskCommentModal.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { Modal, Button, Form, Row, Col } from 'react-bootstrap';\nimport { getApiClient } from '../components/Authentication';\nimport Router from 'next/router';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport TaskComment from '../components/TaskComment';\nimport styles from '../styles/TaskComment.module.css';\nimport { TaskComment as TaskCommentClass } from './interface';\n\nconst TaskCommentModal = props => {\n  const {\n    0: inputComment,\n    1: setInputComment\n  } = useState(\"\");\n  const {\n    0: comments,\n    1: setComments\n  } = useState([]);\n  const {\n    0: initDispFlg,\n    1: setInitDispFlg\n  } = useState(true);\n  useEffect(() => {\n    setInitDispFlg(false);\n    clearInputComment();\n    callGetTaskCommentList();\n  }, [initDispFlg]); // cookieを使用するaxios生成\n\n  let client = getApiClient();\n\n  const callGetTaskCommentList = () => {\n    var res = getTaskCommentList(props.task.id);\n    res.then(ret => setComments(ret));\n  };\n\n  const handleChangeInputComment = () => {\n    return e => setInputComment(e.target.value);\n  };\n\n  const saveComment = () => {\n    var params = {\n      comment: inputComment\n    };\n    var jsonParams = JSON.stringify(params);\n    client.post(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK_COMMENT + '/' + props.task.id, jsonParams, {\n      headers: {\n        'content-type': 'application/json'\n      }\n    }).then(response => {\n      setInitDispFlg(true);\n    }).catch(() => {\n      Router.push('/Error?400');\n    });\n  };\n\n  const clearInputComment = () => {\n    return setInputComment(\"\");\n  };\n\n  const loadNextComment = () => {\n    let maxCommentId = comments[comments.length - 1].id;\n\n    try {\n      client.get(`${process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK_COMMENT}/${props.task.id}?nextKey=${maxCommentId}`).then(res => {\n        let taskCommentList = createTaskCommentList(res.data);\n        setComments([...comments, ...taskCommentList]);\n      });\n    } catch (error) {\n      Router.push('/Error?400');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    show: true,\n    onHide: props.close,\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      closeButton: true,\n      children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n        children: \"Comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      children: [/*#__PURE__*/_jsxDEV(Form, {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            xs: 12,\n            className: \"modal_input\",\n            children: /*#__PURE__*/_jsxDEV(Form.Control, {\n              as: \"textarea\",\n              rows: 2,\n              value: inputComment,\n              onChange: handleChangeInputComment()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.task_comment_button_frame,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.task_comment_button,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"primary\",\n                className: \"button_sm\",\n                onClick: saveComment,\n                children: \"save\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 69\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.task_comment_button,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outline-dark\",\n                className: \"button_sm\",\n                onClick: clearInputComment,\n                children: \"clear\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 69\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this), comments.map(taskComment => /*#__PURE__*/_jsxDEV(TaskComment, {\n        taskComment: taskComment,\n        setInitDispFlg: setInitDispFlg\n      }, \"taskComment\" + taskComment.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.task_comment_load,\n        onClick: loadNextComment,\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fa fa-arrow-circle-down faa-wrench animated-hover\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 81\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"dark\",\n        onClick: props.close,\n        className: \"button_sm\",\n        children: \"close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this)]\n  }, 'taskCommentModal', true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}; // 各apiを呼び出しタスクコメントリストを取得する\n\n\nasync function getTaskCommentList(taskId) {\n  let client = getApiClient();\n  var taskCommentList = [];\n\n  try {\n    const res = await client.get(`${process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK_COMMENT}/${taskId}`);\n    taskCommentList = createTaskCommentList(res.data);\n  } catch (error) {\n    Router.push('/Error?400');\n  }\n\n  return taskCommentList;\n}\n\nfunction createTaskCommentList(commentList) {\n  var taskCommentList = [];\n\n  if (commentList == null) {\n    return taskCommentList;\n  }\n\n  for (var i = 0; i < commentList.length; i++) {\n    taskCommentList.push(new TaskCommentClass(commentList[i][\"id\"], commentList[i][\"taskId\"], commentList[i][\"username\"], commentList[i][\"comment\"], commentList[i][\"createDate\"]));\n  }\n\n  return taskCommentList;\n}\n\nexport default TaskCommentModal;","map":{"version":3,"sources":["/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/TaskCommentModal.tsx"],"names":["React","useState","useEffect","Modal","Button","Form","Row","Col","getApiClient","Router","TaskComment","styles","TaskCommentClass","TaskCommentModal","props","inputComment","setInputComment","comments","setComments","initDispFlg","setInitDispFlg","clearInputComment","callGetTaskCommentList","client","res","getTaskCommentList","task","id","then","ret","handleChangeInputComment","e","target","value","saveComment","params","comment","jsonParams","JSON","stringify","post","process","env","NEXT_PUBLIC_API_SERVER","NEXT_PUBLIC_API_TASK_COMMENT","headers","response","catch","push","loadNextComment","maxCommentId","length","get","taskCommentList","createTaskCommentList","data","error","close","task_comment_button_frame","task_comment_button","map","taskComment","task_comment_load","taskId","commentList","i"],"mappings":"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","sourcesContent":["import React, { Dispatch, SetStateAction, useState, useEffect } from 'react';\nimport {Modal, Button, Form, Row, Col} from 'react-bootstrap';\nimport {getApiClient} from '../components/Authentication';\nimport Router from 'next/router';\nimport { Task } from '../components/interface';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport TaskComment from '../components/TaskComment';\nimport styles from '../styles/TaskComment.module.css';\nimport { TaskComment as TaskCommentClass } from './interface';\n\ninterface TaskCommentModalProps {\n    close: () => void;\n    task: Task;\n}\n\n\nconst TaskCommentModal: React.FC<TaskCommentModalProps> = (props) => {\n    const [inputComment, setInputComment] = useState<string>(\"\");\n    const [comments, setComments] = useState<TaskCommentClass[]>([]);\n    const [initDispFlg, setInitDispFlg] = useState<boolean>(true);\n　　\n    useEffect(() => {\n        setInitDispFlg(false);\n        clearInputComment();\n        callGetTaskCommentList();\n    }, [initDispFlg]);\n\n    // cookieを使用するaxios生成\n    let client = getApiClient();\n  \n    const callGetTaskCommentList = () => {\n        var res: Promise<TaskCommentClass[]> = getTaskCommentList(props.task.id);\n        res.then(ret => setComments(ret));\n    }\n\n    const handleChangeInputComment = () => {\n        return e => setInputComment(e.target.value);\n    }\n\n    const saveComment = () => {\n        var params = {\n            comment: inputComment\n        }\n        var jsonParams = JSON.stringify(params);\n        client.post(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK_COMMENT + '/' + props.task.id\n            , jsonParams\n            , {headers: {'content-type': 'application/json'}})\n        .then( response => {\n            setInitDispFlg(true);\n        }).catch(() => {\n            Router.push('/Error?400');\n        })\n    }\n\n    const clearInputComment = () => {\n        return setInputComment(\"\");\n    }\n\n    const loadNextComment = () => {\n        let maxCommentId = comments[comments.length - 1].id\n        try {\n            client.get(`${process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK_COMMENT}/${props.task.id}?nextKey=${maxCommentId}`)\n                .then(res => {\n                    let taskCommentList = createTaskCommentList(res.data);\n                    setComments([...comments, ...taskCommentList])\n                })\n        } catch(error){\n            Router.push('/Error?400');\n        }\n    }\n\n    return (\n        <Modal show={true} onHide={props.close} key='taskCommentModal'>\n            <Modal.Header closeButton>\n                <Modal.Title>Comment</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n            <Form>\n                <Row>\n                    <Col xs={12} className=\"modal_input\">\n                        <Form.Control as=\"textarea\" rows={2} value={inputComment} onChange={handleChangeInputComment()}/>\n                    </Col>\n                    <div className={styles.task_comment_button_frame}>\n                        <div className={styles.task_comment_button}><Button variant=\"primary\" className=\"button_sm\" onClick={saveComment} >save</Button></div>\n                        <div className={styles.task_comment_button}><Button variant=\"outline-dark\" className=\"button_sm\" onClick={clearInputComment} >clear</Button></div>\n                    </div>\n                    <hr />\n                </Row>\n            </Form>\n            {\n                comments.map((taskComment) => (\n                    <TaskComment\n                        taskComment={taskComment}\n                        setInitDispFlg={setInitDispFlg}\n                        key={\"taskComment\" + taskComment.id}\n                    />\n                ))\n            }\n            <div className={styles.task_comment_load} onClick={loadNextComment}><i className=\"fa fa-arrow-circle-down faa-wrench animated-hover\" /></div>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"dark\" onClick={props.close} className=\"button_sm\" >close</Button>\n            </Modal.Footer>\n        </Modal>\n    )\n}\n\n// 各apiを呼び出しタスクコメントリストを取得する\nasync function getTaskCommentList(taskId){\n    let client = getApiClient();\n    var taskCommentList :TaskCommentClass[] = [];\n    try {\n        const res = await client.get(`${process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK_COMMENT}/${taskId}`);\n\n        taskCommentList = createTaskCommentList(res.data);\n    } catch(error){\n        Router.push('/Error?400');\n    }\n    return taskCommentList;\n}\n\nfunction createTaskCommentList(commentList: any[]): TaskCommentClass[] {\n    var taskCommentList :TaskCommentClass[] = [];\n    if (commentList == null) {\n        return taskCommentList;\n    }\n    for (var i = 0 ; i < commentList.length ; i++) {\n        taskCommentList.push(new TaskCommentClass(commentList[i][\"id\"], commentList[i][\"taskId\"], commentList[i][\"username\"], commentList[i][\"comment\"], commentList[i][\"createDate\"]))\n    }\n    return taskCommentList;\n}\n\nexport default TaskCommentModal;"]},"metadata":{},"sourceType":"module"}