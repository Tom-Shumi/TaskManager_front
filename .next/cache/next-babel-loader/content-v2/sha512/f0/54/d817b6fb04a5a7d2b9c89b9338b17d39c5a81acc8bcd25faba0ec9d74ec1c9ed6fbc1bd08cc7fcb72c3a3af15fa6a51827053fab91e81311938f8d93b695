{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shumiya/Desktop/dev/react/shumipro_front/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/shumiya/Desktop/dev/react/shumipro_front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/TaskGraph.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { TaskGraph as TaskGraphClass } from './interface';\nimport Router from 'next/router';\nimport Axios from \"axios\";\n\nvar TaskGraph = function TaskGraph(props) {\n  _s();\n\n  // 未対応のタスク\n  var _useState = useState([]),\n      planTaskGraphList = _useState[0],\n      setPlanTaskGraphList = _useState[1]; // 対応中のタスク\n\n\n  var _useState2 = useState([]),\n      doneTaskGraphList = _useState2[0],\n      setDoneTaskGraphList = _useState2[1]; // 対応済みのタスク\n\n\n  var _useState3 = useState([]),\n      commentGraphList = _useState3[0],\n      setCommentGraphList = _useState3[1];\n\n  useEffect(function () {\n    callGetTaskGraphInfo();\n  }, []);\n\n  var callGetTaskGraphInfo = function callGetTaskGraphInfo() {\n    var res = getTaskGraphInfo();\n    res.then(function (ret) {\n      return setPlanTaskGraphList(ret[0]);\n    });\n    res.then(function (ret) {\n      return setDoneTaskGraphList(ret[1]);\n    });\n    res.then(function (ret) {\n      return setCommentGraphList(ret[2]);\n    });\n  };\n\n  var planTaskGraphLabel = [];\n  planTaskGraphList.map(function (taskGraph) {\n    return planTaskGraphLabel.push(taskGraph.date);\n  });\n  var planTaskGraphDataSet = [];\n  planTaskGraphList.map(function (taskGraph) {\n    return planTaskGraphDataSet.push(taskGraph.count);\n  });\n  var planTaskGraphData = {\n    labels: planTaskGraphLabel,\n    datasets: [{\n      data: planTaskGraphDataSet,\n      backgroundColor: 'rgba(30, 144, 255, 1)',\n      label: '完了予定のタスク(件数)'\n    }]\n  };\n  var planTaskGraphOption = {\n    scales: {\n      xAxes: [{\n        scaleLabel: {\n          display: true\n        }\n      }],\n      yAxes: [{\n        scaleLabel: {\n          display: true,\n          labelString: 'タスク(件数)'\n        },\n        ticks: {\n          beginAtZero: true,\n          callback: function callback(value) {\n            if (value % 1 === 0) {\n              return value;\n            }\n          }\n        }\n      }]\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Bar, {\n      type: \"\",\n      data: planTaskGraphData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(TaskGraph, \"XCjWqn/Qo4ep0aeT3bTHa3NDgrI=\");\n\n_c = TaskGraph;\n\nfunction getTaskGraphInfo() {\n  return _getTaskGraphInfo.apply(this, arguments);\n} // apiレスポンスからタスクリストを生成する\n\n\nfunction _getTaskGraphInfo() {\n  _getTaskGraphInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var client, planTaskGraphList, doneTaskGraphList, commentGraphList, taskGraphInfo;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            client = Axios.create({\n              withCredentials: true\n            });\n            planTaskGraphList = [];\n            doneTaskGraphList = [];\n            commentGraphList = [];\n            _context.prev = 4;\n            _context.next = 7;\n            return client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK_GRAPH);\n\n          case 7:\n            taskGraphInfo = _context.sent;\n            planTaskGraphList = createTaskGraphList(taskGraphInfo.data[\"planTask\"]);\n            doneTaskGraphList = createTaskGraphList(taskGraphInfo.data[\"doneTask\"]);\n            commentGraphList = createTaskGraphList(taskGraphInfo.data[\"comment\"]);\n            _context.next = 16;\n            break;\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](4);\n            Router.push('/Error?400');\n\n          case 16:\n            return _context.abrupt(\"return\", [planTaskGraphList, doneTaskGraphList, commentGraphList]);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[4, 13]]);\n  }));\n  return _getTaskGraphInfo.apply(this, arguments);\n}\n\nfunction createTaskGraphList(responseData) {\n  var length = responseData.length;\n  var taskGraphList = [];\n\n  for (var i = 0; i < length; i++) {\n    var taskGraph = new TaskGraphClass(responseData[i][\"date\"], responseData[i][\"count\"]);\n    taskGraphList.push(taskGraph);\n  }\n\n  return taskGraphList;\n}\n\nexport default TaskGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskGraph\");","map":{"version":3,"sources":["/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/TaskGraph.tsx"],"names":["React","useState","useEffect","Bar","TaskGraph","TaskGraphClass","Router","Axios","props","planTaskGraphList","setPlanTaskGraphList","doneTaskGraphList","setDoneTaskGraphList","commentGraphList","setCommentGraphList","callGetTaskGraphInfo","res","getTaskGraphInfo","then","ret","planTaskGraphLabel","map","taskGraph","push","date","planTaskGraphDataSet","count","planTaskGraphData","labels","datasets","data","backgroundColor","label","planTaskGraphOption","scales","xAxes","scaleLabel","display","yAxes","labelString","ticks","beginAtZero","callback","value","client","create","withCredentials","get","process","env","NEXT_PUBLIC_API_SERVER","NEXT_PUBLIC_API_TASK_GRAPH","taskGraphInfo","createTaskGraphList","responseData","length","taskGraphList","i"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { TaskGraph as TaskGraphClass } from './interface';\nimport Router from 'next/router';\nimport Axios from \"axios\";\n\ninterface TaskGraphProps {\n\n}\n\nconst TaskGraph: React.FC<TaskGraphProps> = (props) => {\n    // 未対応のタスク\n    const [planTaskGraphList, setPlanTaskGraphList] = useState<TaskGraphClass[]>([]);\n    // 対応中のタスク\n    const [doneTaskGraphList, setDoneTaskGraphList] = useState<TaskGraphClass[]>([]);\n    // 対応済みのタスク\n    const [commentGraphList, setCommentGraphList] = useState<TaskGraphClass[]>([]);\n\n  useEffect(() => {\n    callGetTaskGraphInfo();\n  }, []);\n\n  const callGetTaskGraphInfo = () => {\n    var res: Promise<TaskGraphClass[][]> = getTaskGraphInfo();\n    res.then(ret => setPlanTaskGraphList(ret[0]));\n    res.then(ret => setDoneTaskGraphList(ret[1]));\n    res.then(ret => setCommentGraphList(ret[2]));\n  }\n\n  let planTaskGraphLabel = [];\n  planTaskGraphList.map(taskGraph => planTaskGraphLabel.push(taskGraph.date));\n\n  let planTaskGraphDataSet = [];\n  planTaskGraphList.map(taskGraph => planTaskGraphDataSet.push(taskGraph.count));\n\n  const planTaskGraphData = {\n    labels: planTaskGraphLabel,\n    datasets: [\n      {\n        data: planTaskGraphDataSet,\n        backgroundColor: 'rgba(30, 144, 255, 1)',\n        label: '完了予定のタスク(件数)',\n      },\n    ],\n  };\n\n  const planTaskGraphOption = {\n    scales: {\n      xAxes: [\n        {\n          scaleLabel: {\n            display: true\n          },\n        },\n      ],\n      yAxes: [\n        {\n          scaleLabel: {\n            display: true,\n            labelString: 'タスク(件数)',\n          },\n          ticks: {\n            beginAtZero: true,\n            callback: function(value) {if (value % 1 === 0) {return value;}},\n          },\n        },\n      ],\n    },\n  };\n\n    return (\n        <div>\n            <Bar type=\"\" data={planTaskGraphData}/>\n        </div>\n    )\n}\n\nasync function getTaskGraphInfo(){\n  let client = Axios.create({ withCredentials: true });\n  var planTaskGraphList :TaskGraphClass[] = [];\n  var doneTaskGraphList :TaskGraphClass[] = [];\n  var commentGraphList :TaskGraphClass[] = [];\n  try {\n      const taskGraphInfo = await client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK_GRAPH);\n      \n      planTaskGraphList = createTaskGraphList(taskGraphInfo.data[\"planTask\"]);\n      doneTaskGraphList = createTaskGraphList(taskGraphInfo.data[\"doneTask\"]);\n      commentGraphList = createTaskGraphList(taskGraphInfo.data[\"comment\"]);\n  } catch(error){\n      Router.push('/Error?400');\n  }\n  return [planTaskGraphList, doneTaskGraphList, commentGraphList];\n}\n\n// apiレスポンスからタスクリストを生成する\nfunction createTaskGraphList(responseData: any[]): TaskGraphClass[]{\n  let length: number = responseData.length;\n  var taskGraphList :TaskGraphClass[] = [];\n  for (var i = 0 ; i < length ; i++) {\n      let taskGraph = new TaskGraphClass(responseData[i][\"date\"], responseData[i][\"count\"]);\n      taskGraphList.push(taskGraph);\n  }\n  return taskGraphList;\n}\n\nexport default TaskGraph"]},"metadata":{},"sourceType":"module"}