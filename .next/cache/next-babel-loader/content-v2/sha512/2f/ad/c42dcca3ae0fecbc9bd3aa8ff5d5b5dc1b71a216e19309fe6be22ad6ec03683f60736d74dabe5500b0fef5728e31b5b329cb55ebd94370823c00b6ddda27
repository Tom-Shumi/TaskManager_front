{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState } from 'react';\nimport styles from '../../styles/TaskComment.module.css';\nimport { Form } from 'react-bootstrap';\nimport Router from 'next/router';\nimport { getApiClient } from '../util/AuthenticationUtil';\n\nvar TaskComment = function TaskComment(props) {\n  var _useState = useState(false),\n      updateFlg = _useState[0],\n      setUpdateFlg = _useState[1];\n\n  var _useState2 = useState(props.taskComment.comment),\n      inputComment = _useState2[0],\n      setInputComment = _useState2[1]; // cookieを使用するaxios生成\n\n\n  var client = getApiClient();\n\n  var handleChangeInputComment = function handleChangeInputComment() {\n    return function (e) {\n      return setInputComment(e.target.value);\n    };\n  };\n\n  var cancelTaskCommentEdit = function cancelTaskCommentEdit() {\n    setUpdateFlg(false);\n  };\n\n  var deleteTaskComment = function deleteTaskComment() {\n    if (confirm(\"Do you want to delete it?\")) {\n      client[\"delete\"](\"\".concat(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK_COMMENT, \"/\").concat(props.taskComment.taskId, \"/\").concat(props.taskComment.id)).then(function (response) {\n        props.setInitDispFlg(true);\n      })[\"catch\"](function () {\n        Router.push('/Error?400');\n      });\n    }\n  };\n\n  var updateTaskComment = function updateTaskComment() {\n    if (updateFlg) {\n      var params = {\n        comment: inputComment\n      };\n      var jsonParams = JSON.stringify(params);\n      client.put(\"\".concat(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK_COMMENT, \"/\").concat(props.taskComment.taskId, \"/\").concat(props.taskComment.id), jsonParams, {\n        headers: {\n          'content-type': 'application/json'\n        }\n      }).then(function (response) {\n        props.setInitDispFlg(true);\n        setUpdateFlg(false);\n      })[\"catch\"](function () {\n        Router.push('/Error?400');\n      });\n    } else {\n      setUpdateFlg(true);\n    }\n  };\n\n  var comment = [];\n\n  if (updateFlg) {\n    comment.push( /*#__PURE__*/_jsx(\"div\", {\n      className: styles.task_comment_cancel_icon,\n      children: /*#__PURE__*/_jsx(\"i\", {\n        onClick: cancelTaskCommentEdit,\n        className: \"fa fa-times faa-wrench animated-hover\"\n      })\n    }, \"commentCancel\" + props.taskComment.id));\n    comment.push( /*#__PURE__*/_jsx(Form.Control, {\n      as: \"textarea\",\n      rows: 2,\n      cols: 40,\n      value: inputComment,\n      onChange: handleChangeInputComment()\n    }, \"comment\" + props.taskComment.id));\n  } else {\n    comment.push(props.taskComment.comment);\n  }\n\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: styles.task_comment,\n    children: /*#__PURE__*/_jsxs(\"div\", {\n      children: [comment, /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.task_comment_icons,\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: styles.task_comment_icon,\n          children: /*#__PURE__*/_jsx(\"i\", {\n            onClick: updateTaskComment,\n            className: \"fa fa-edit faa-wrench animated-hover\"\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: styles.task_comment_icon,\n          children: /*#__PURE__*/_jsx(\"i\", {\n            onClick: deleteTaskComment,\n            className: \"fa fa-trash faa-wrench animated-hover\"\n          })\n        })]\n      })]\n    })\n  });\n};\n\nexport default TaskComment;","map":null,"metadata":{},"sourceType":"module"}