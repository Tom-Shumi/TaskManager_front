{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/TaskBoard.tsx\";\nimport React from 'react';\nimport { Task } from './interface';\nimport Router from 'next/router';\nimport Axios from \"axios\";\nimport { useState } from \"react\";\n\nconst TaskBoard = props => {\n  const {\n    0: taskListNotStarted,\n    1: setTaskListNotStarted\n  } = useState(null);\n  const {\n    0: taskListInProgress,\n    1: setTaskListInProgress\n  } = useState(null);\n  const {\n    0: taskListDone,\n    1: setTaskListDone\n  } = useState(null);\n  var tempTaskList = [];\n  let client = Axios.create({\n    withCredentials: true\n  });\n  client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK + \"/1\").then(response => {\n    tempTaskList = createTaskList(response.data);\n  }).catch(() => {\n    Router.push('/Error?400');\n  });\n  setTaskListNotStarted(tempTaskList);\n  console.log(taskListNotStarted);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n};\n\nfunction createTaskList(responseData) {\n  let length = responseData.length;\n  var taskList = [];\n\n  for (var i = 0; i < length; i++) {\n    let task = new Task(responseData[i][\"task\"], responseData[i][\"description\"], responseData[i][\"priority\"]);\n    taskList.push(task);\n  }\n\n  return taskList;\n}\n\nexport default TaskBoard;","map":{"version":3,"sources":["/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/TaskBoard.tsx"],"names":["React","Task","Router","Axios","useState","TaskBoard","props","taskListNotStarted","setTaskListNotStarted","taskListInProgress","setTaskListInProgress","taskListDone","setTaskListDone","tempTaskList","client","create","withCredentials","get","process","env","NEXT_PUBLIC_API_SERVER","NEXT_PUBLIC_API_TASK","then","response","createTaskList","data","catch","push","console","log","responseData","length","taskList","i","task"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,IAAT,QAAqB,aAArB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAMA,MAAMC,SAAmC,GAAIC,KAAD,IAAW;AACnD,QAAM;AAAA,OAACC,kBAAD;AAAA,OAAqBC;AAArB,MAA8CJ,QAAQ,CAAS,IAAT,CAA5D;AACA,QAAM;AAAA,OAACK,kBAAD;AAAA,OAAqBC;AAArB,MAA8CN,QAAQ,CAAS,IAAT,CAA5D;AACA,QAAM;AAAA,OAACO,YAAD;AAAA,OAAeC;AAAf,MAAkCR,QAAQ,CAAS,IAAT,CAAhD;AAEA,MAAIS,YAAoB,GAAG,EAA3B;AAEA,MAAIC,MAAM,GAAGX,KAAK,CAACY,MAAN,CAAa;AAAEC,IAAAA,eAAe,EAAE;AAAnB,GAAb,CAAb;AAEAF,EAAAA,MAAM,CAACG,GAAP,CAAWC,OAAO,CAACC,GAAR,CAAYC,sBAAZ,GAAqCF,OAAO,CAACC,GAAR,CAAYE,oBAAjD,GAAwE,IAAnF,EACKC,IADL,CACUC,QAAQ,IAAI;AACdV,IAAAA,YAAY,GAAGW,cAAc,CAACD,QAAQ,CAACE,IAAV,CAA7B;AACH,GAHL,EAGOC,KAHP,CAGa,MAAM;AACXxB,IAAAA,MAAM,CAACyB,IAAP,CAAY,YAAZ;AACH,GALL;AAMAnB,EAAAA,qBAAqB,CAACK,YAAD,CAArB;AACAe,EAAAA,OAAO,CAACC,GAAR,CAAYtB,kBAAZ;AACA,sBACI;AAAK,IAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CAxBD;;AA0BA,SAASiB,cAAT,CAAwBM,YAAxB,EAAoD;AAChD,MAAIC,MAAc,GAAGD,YAAY,CAACC,MAAlC;AACA,MAAIC,QAAgB,GAAG,EAAvB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAiBA,CAAC,GAAGF,MAArB,EAA8BE,CAAC,EAA/B,EAAmC;AAC/B,QAAIC,IAAI,GAAG,IAAIjC,IAAJ,CAAS6B,YAAY,CAACG,CAAD,CAAZ,CAAgB,MAAhB,CAAT,EAAkCH,YAAY,CAACG,CAAD,CAAZ,CAAgB,aAAhB,CAAlC,EAAkEH,YAAY,CAACG,CAAD,CAAZ,CAAgB,UAAhB,CAAlE,CAAX;AACAD,IAAAA,QAAQ,CAACL,IAAT,CAAcO,IAAd;AACH;;AACD,SAAOF,QAAP;AACH;;AAED,eAAe3B,SAAf","sourcesContent":["import React from 'react';\nimport TaskList from '../components/TaskList'\nimport { Task } from './interface';\nimport Router from 'next/router';\nimport Axios from \"axios\";\nimport { useState } from \"react\";\n\ninterface TaskBoardProps {\n\n}\n\nconst TaskBoard: React.FC<TaskBoardProps> = (props) => {\n    const [taskListNotStarted, setTaskListNotStarted] = useState<Task[]>(null);\n    const [taskListInProgress, setTaskListInProgress] = useState<Task[]>(null);\n    const [taskListDone, setTaskListDone] = useState<Task[]>(null);\n\n    var tempTaskList :Task[] = [];\n\n    let client = Axios.create({ withCredentials: true });\n\n    client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK + \"/1\")\n        .then(response => {\n            tempTaskList = createTaskList(response.data);\n        }).catch(() => {\n            Router.push('/Error?400');\n        }); \n    setTaskListNotStarted(tempTaskList)\n    console.log(taskListNotStarted);\n    return (\n        <div className=\"\">\n            {/* <TaskList taskList={taskListNotStarted} status=\"1\" />\n            <TaskList taskList={taskListInProgress} status=\"2\" />\n            <TaskList taskList={taskListDone} status=\"3\" /> */}\n        </div>\n    )\n}\n\nfunction createTaskList(responseData: any[]): Task[]{\n    let length: number = responseData.length;\n    var taskList :Task[] = [];\n    for (var i = 0 ; i < length ; i++) {\n        let task = new Task(responseData[i][\"task\"], responseData[i][\"description\"], responseData[i][\"priority\"]);\n        taskList.push(task);\n    }\n    return taskList;\n}\n\nexport default TaskBoard;"]},"metadata":{},"sourceType":"module"}