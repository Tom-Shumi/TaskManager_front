{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/TaskBoard.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport TaskList from '../components/TaskList';\nimport { Task } from './interface';\nimport Router from 'next/router';\nimport Axios from \"axios\";\nimport styles from '../styles/TaskBoard.module.css';\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\n\nconst TaskBoard = props => {\n  // 未対応のタスク\n  const {\n    0: taskListNotStarted,\n    1: setTaskListNotStarted\n  } = useState([]); // 対応中のタスク\n\n  const {\n    0: taskListInProgress,\n    1: setTaskListInProgress\n  } = useState([]); // 対応済みのタスク\n\n  const {\n    0: taskListDone,\n    1: setTaskListDone\n  } = useState([]);\n  useEffect(() => {\n    props.setInitDispFlg(false);\n    callGetTaskList();\n  }, [props.initDispFlg]);\n\n  const callGetTaskList = () => {\n    var res = getTaskList();\n    res.then(ret => setTaskListNotStarted(ret[0]));\n    res.then(ret => setTaskListInProgress(ret[1]));\n    res.then(ret => setTaskListDone(ret[2]));\n  };\n\n  const createDummyDraggable = () => {\n    return /*#__PURE__*/_jsxDEV(Draggable, {\n      draggableId: \"DummyDraggableId\",\n      index: 0,\n      children: provided => /*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread({\n        ref: provided.innerRef\n      }, provided.draggableProps), provided.dragHandleProps), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this)\n    }, \"DummyDraggableKey\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this);\n  };\n\n  const onDragEnd = () => {\n    console.log('Drag ended');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.task_board,\n    children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: onDragEnd,\n      children: [/*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: \"droppable1\",\n        children: provided => /*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread({\n          ref: provided.innerRef\n        }, provided.droppableProps), {}, {\n          children: [/*#__PURE__*/_jsxDEV(Draggable, {\n            draggableId: \"DummyDraggableId\",\n            index: 0,\n            children: provided => /*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread(_objectSpread({\n              style: provided.draggableProps.style,\n              ref: provided.innerRef\n            }, provided.draggableProps), provided.dragHandleProps), {}, {\n              children: \"dummy\"\n            }), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 29\n            }, this)\n          }, \"DummyDraggableKey\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 25\n          }, this), provided.placeholder]\n        }), void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n        taskList: taskListInProgress,\n        status: \"2\",\n        setInitDispFlg: props.setInitDispFlg,\n        show: props.show\n      }, \"TaskList2\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n        taskList: taskListDone,\n        status: \"3\",\n        setInitDispFlg: props.setInitDispFlg,\n        show: props.show\n      }, \"TaskList3\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n}; // 各apiを呼び出しタスクリストを取得する\n\n\nasync function getTaskList() {\n  let client = Axios.create({\n    withCredentials: true\n  });\n  var listNotStarted = [];\n  var lisInProgress = [];\n  var listDone = [];\n\n  try {\n    const resNotStarted = await client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK + \"/1\");\n    const resInProgress = await client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK + \"/2\");\n    const resDone = await client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK + \"/3\");\n    listNotStarted = createTaskList(resNotStarted.data);\n    lisInProgress = createTaskList(resInProgress.data);\n    listDone = createTaskList(resDone.data);\n  } catch (error) {\n    Router.push('/Error?400');\n  }\n\n  return [listNotStarted, lisInProgress, listDone];\n} // apiレスポンスからタスクリストを生成する\n\n\nfunction createTaskList(responseData) {\n  let length = responseData.length;\n  var taskList = [];\n\n  for (var i = 0; i < length; i++) {\n    let task = new Task(responseData[i][\"id\"], responseData[i][\"task\"], responseData[i][\"description\"], responseData[i][\"priority\"], responseData[i][\"status\"]);\n    taskList.push(task);\n  }\n\n  return taskList;\n}\n\nexport default TaskBoard;","map":{"version":3,"sources":["/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/TaskBoard.tsx"],"names":["React","useState","useEffect","TaskList","Task","Router","Axios","styles","DragDropContext","Draggable","Droppable","TaskBoard","props","taskListNotStarted","setTaskListNotStarted","taskListInProgress","setTaskListInProgress","taskListDone","setTaskListDone","setInitDispFlg","callGetTaskList","initDispFlg","res","getTaskList","then","ret","createDummyDraggable","provided","innerRef","draggableProps","dragHandleProps","onDragEnd","console","log","task_board","droppableProps","style","placeholder","show","client","create","withCredentials","listNotStarted","lisInProgress","listDone","resNotStarted","get","process","env","NEXT_PUBLIC_API_SERVER","NEXT_PUBLIC_API_TASK","resInProgress","resDone","createTaskList","data","error","push","responseData","length","taskList","i","task"],"mappings":"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","sourcesContent":["import React, { Dispatch, SetStateAction, useState, useEffect} from 'react';\nimport TaskList from '../components/TaskList'\nimport { Task } from './interface';\nimport Router from 'next/router';\nimport Axios from \"axios\";\nimport styles from '../styles/TaskBoard.module.css';\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\n\ninterface TaskBoardProps {\n    initDispFlg: Boolean;\n    setInitDispFlg: Dispatch<SetStateAction<Boolean>>;\n    show: (Task) => void;\n}\n\nconst TaskBoard: React.FC<TaskBoardProps> = (props) => {\n    // 未対応のタスク\n    const [taskListNotStarted, setTaskListNotStarted] = useState<Task[]>([]);\n    // 対応中のタスク\n    const [taskListInProgress, setTaskListInProgress] = useState<Task[]>([]);\n    // 対応済みのタスク\n    const [taskListDone, setTaskListDone] = useState<Task[]>([]);\n\n    useEffect(() => {\n        props.setInitDispFlg(false);\n        callGetTaskList();\n    }, [props.initDispFlg]);\n\n    const callGetTaskList = () => {\n        var res: Promise<Task[][]> = getTaskList();\n        res.then(ret => setTaskListNotStarted(ret[0]));\n        res.then(ret => setTaskListInProgress(ret[1]));\n        res.then(ret => setTaskListDone(ret[2]));\n    }\n\n    const createDummyDraggable = () => {\n        return (\n            <Draggable key=\"DummyDraggableKey\" draggableId=\"DummyDraggableId\" index={0}>\n              {(provided) => (\n                <div\n                    ref={provided.innerRef}\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n                ></div>\n              )}\n            </Draggable>\n          )\n    }\n\n    const onDragEnd = () => {\n        console.log('Drag ended');\n    }\n\n    return (\n        <div className={styles.task_board}>\n\n            <DragDropContext onDragEnd={onDragEnd}>\n            <Droppable droppableId=\"droppable1\">\n                {(provided) => (\n                    <div\n                        ref={provided.innerRef}\n                        {...provided.droppableProps}>\n                        {/* <TaskList \n                            taskList={taskListNotStarted} status=\"1\" setInitDispFlg={props.setInitDispFlg} show={props.show} key=\"TaskList1\"/> */}\n                        <Draggable key=\"DummyDraggableKey\" draggableId=\"DummyDraggableId\" index={0}>\n                        {(provided) => (\n                            <div\n                                style={provided.draggableProps.style}\n                                ref={provided.innerRef}\n                                {...provided.draggableProps}\n                                {...provided.dragHandleProps}\n                            >dummy</div>\n                        )}\n                        </Draggable>\n                        {provided.placeholder}\n                    </div>\n                )}\n            </Droppable>\n            <TaskList taskList={taskListInProgress} status=\"2\" setInitDispFlg={props.setInitDispFlg} show={props.show} key=\"TaskList2\" />\n            <TaskList taskList={taskListDone} status=\"3\" setInitDispFlg={props.setInitDispFlg} show={props.show} key=\"TaskList3\" />\n            </DragDropContext>\n        </div>\n    )\n}\n\n// 各apiを呼び出しタスクリストを取得する\nasync function getTaskList(){\n    let client = Axios.create({ withCredentials: true });\n    var listNotStarted :Task[] = [];\n    var lisInProgress :Task[] = [];\n    var listDone :Task[] = [];\n    try {\n        const resNotStarted = await client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK + \"/1\");\n        const resInProgress = await client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK + \"/2\");\n        const resDone = await client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK + \"/3\");\n\n        listNotStarted = createTaskList(resNotStarted.data);\n        lisInProgress = createTaskList(resInProgress.data);\n        listDone = createTaskList(resDone.data);\n    } catch(error){\n        Router.push('/Error?400');\n    }\n    return [listNotStarted, lisInProgress, listDone];\n}\n\n// apiレスポンスからタスクリストを生成する\nfunction createTaskList(responseData: any[]): Task[]{\n    let length: number = responseData.length;\n    var taskList :Task[] = [];\n    for (var i = 0 ; i < length ; i++) {\n        let task = new Task(responseData[i][\"id\"], responseData[i][\"task\"], responseData[i][\"description\"], responseData[i][\"priority\"], responseData[i][\"status\"]);\n        taskList.push(task);\n    }\n    return taskList;\n}\n\nexport default TaskBoard;"]},"metadata":{},"sourceType":"module"}