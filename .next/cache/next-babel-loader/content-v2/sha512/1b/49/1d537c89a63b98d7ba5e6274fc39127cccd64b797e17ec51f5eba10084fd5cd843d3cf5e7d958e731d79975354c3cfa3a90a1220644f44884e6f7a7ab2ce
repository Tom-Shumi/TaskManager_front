{"ast":null,"code":"import moment from 'moment';\n/**\n * JST基準に変換して返す\n * @param {string} dateTimeStr YYYY-MM-DDTHH:mm:00Z\n * @returns {moment.Moment}\n */\n\nconst parseAsMoment = dateTimeStr => {\n  return moment.utc(dateTimeStr, 'YYYY-MM-DDTHH:mm:00Z', 'ja').utcOffset(9);\n};\n/**\n * 日付形式に変換して返す\n * @param {moment.Moment} momentInstance\n * @returns {string}\n */\n\n\nconst toUtcIso8601str = momentInstance => {\n  return momentInstance.clone().utc().format('YYYY-MM-DDTHH:mm:00Z');\n};\n\nconst parseDate = dateStr => {\n  if (!dateStr) {\n    return \"\";\n  } else {\n    Date.parse(dateStr);\n  }\n};\n\nexport { parseAsMoment, toUtcIso8601str, parseDate };","map":{"version":3,"sources":["/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/DatePickerUtil.ts"],"names":["moment","parseAsMoment","dateTimeStr","utc","utcOffset","toUtcIso8601str","momentInstance","clone","format","parseDate","dateStr","Date","parse"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,aAAa,GAAIC,WAAD,IAAiB;AACnC,SAAOF,MAAM,CAACG,GAAP,CAAWD,WAAX,EAAwB,sBAAxB,EAAgD,IAAhD,EAAsDE,SAAtD,CAAgE,CAAhE,CAAP;AACH,CAFD;AAIE;AACF;AACA;AACA;AACA;;;AACA,MAAMC,eAAe,GAAIC,cAAD,IAAoB;AACxC,SAAOA,cAAc,CAClBC,KADI,GAEJJ,GAFI,GAGJK,MAHI,CAGG,sBAHH,CAAP;AAIH,CALD;;AAOA,MAAMC,SAAS,GAAIC,OAAD,IAAa;AAC7B,MAAI,CAACA,OAAL,EAAc;AACZ,WAAO,EAAP;AACD,GAFD,MAEO;AACLC,IAAAA,IAAI,CAACC,KAAL,CAAWF,OAAX;AACD;AACF,CAND;;AAOA,SAAQT,aAAR,EAAuBI,eAAvB,EAAwCI,SAAxC","sourcesContent":["import moment from 'moment';\n\n/**\n * JST基準に変換して返す\n * @param {string} dateTimeStr YYYY-MM-DDTHH:mm:00Z\n * @returns {moment.Moment}\n */\nconst parseAsMoment = (dateTimeStr) => {\n    return moment.utc(dateTimeStr, 'YYYY-MM-DDTHH:mm:00Z', 'ja').utcOffset(9)\n}\n  \n  /**\n   * 日付形式に変換して返す\n   * @param {moment.Moment} momentInstance\n   * @returns {string}\n   */\nconst toUtcIso8601str = (momentInstance) => {\n    return momentInstance\n      .clone()\n      .utc()\n      .format('YYYY-MM-DDTHH:mm:00Z')\n}\n\nconst parseDate = (dateStr) => {\n  if (!dateStr) {\n    return \"\";\n  } else {\n    Date.parse(dateStr);\n  }\n}\nexport {parseAsMoment, toUtcIso8601str, parseDate};"]},"metadata":{},"sourceType":"module"}