{"ast":null,"code":"import _regeneratorRuntime from \"/app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState, useEffect } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { TaskGraph as TaskGraphClass } from '../common/interface';\nimport Router from 'next/router';\nimport { getApiClient } from '../util/AuthenticationUtil';\n\nvar TaskGraph = function TaskGraph(props) {\n  // 未対応のタスク\n  var _useState = useState([]),\n      planTaskGraphList = _useState[0],\n      setPlanTaskGraphList = _useState[1]; // 対応中のタスク\n\n\n  var _useState2 = useState([]),\n      doneTaskGraphList = _useState2[0],\n      setDoneTaskGraphList = _useState2[1]; // 対応済みのタスク\n\n\n  var _useState3 = useState([]),\n      commentGraphList = _useState3[0],\n      setCommentGraphList = _useState3[1];\n\n  useEffect(function () {\n    callGetTaskGraphInfo();\n  }, []);\n\n  var callGetTaskGraphInfo = function callGetTaskGraphInfo() {\n    var res = getTaskGraphInfo();\n    res.then(function (ret) {\n      return setPlanTaskGraphList(ret[0]);\n    });\n    res.then(function (ret) {\n      return setDoneTaskGraphList(ret[1]);\n    });\n    res.then(function (ret) {\n      return setCommentGraphList(ret[2]);\n    });\n  };\n\n  var planTaskGraphLabel = [];\n  planTaskGraphList.map(function (taskGraph) {\n    return planTaskGraphLabel.push(taskGraph.date);\n  });\n  var planTaskGraphDataSet = [];\n  planTaskGraphList.map(function (taskGraph) {\n    return planTaskGraphDataSet.push(taskGraph.count);\n  });\n  var planTaskGraphData = {\n    labels: planTaskGraphLabel,\n    datasets: [{\n      data: planTaskGraphDataSet,\n      backgroundColor: 'rgba(30, 144, 255, 1)',\n      label: '完了予定タスク(件数)'\n    }]\n  };\n  var doneTaskGraphLabel = [];\n  doneTaskGraphList.map(function (taskGraph) {\n    return doneTaskGraphLabel.push(taskGraph.date);\n  });\n  var doneTaskGraphDataSet = [];\n  doneTaskGraphList.map(function (taskGraph) {\n    return doneTaskGraphDataSet.push(taskGraph.count);\n  });\n  var doneTaskGraphData = {\n    labels: doneTaskGraphLabel,\n    datasets: [{\n      data: doneTaskGraphDataSet,\n      backgroundColor: 'rgba(255, 200, 0, 1)',\n      label: '完了タスク(件数)'\n    }]\n  };\n  console.log(\"done\");\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [\"\\u25A0\\u65E5\\u6BCE\\u306E\\u5B8C\\u4E86\\u4E88\\u5B9A\\u30BF\\u30B9\\u30AF\\u6570\", /*#__PURE__*/_jsx(Bar, {\n      type: \"\",\n      data: planTaskGraphData,\n      options: {}\n    }), /*#__PURE__*/_jsx(\"br\", {}), \"\\u25A0\\u65E5\\u6BCE\\u306E\\u5B8C\\u4E86\\u30BF\\u30B9\\u30AF\\u6570\", /*#__PURE__*/_jsx(Bar, {\n      type: \"\",\n      data: doneTaskGraphData,\n      options: {}\n    })]\n  });\n};\n\nfunction getTaskGraphInfo() {\n  return _getTaskGraphInfo.apply(this, arguments);\n} // apiレスポンスからタスクリストを生成する\n\n\nfunction _getTaskGraphInfo() {\n  _getTaskGraphInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var client, planTaskGraphList, doneTaskGraphList, commentGraphList, taskGraphInfo;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            client = getApiClient();\n            planTaskGraphList = [];\n            doneTaskGraphList = [];\n            commentGraphList = [];\n            _context.prev = 4;\n            _context.next = 7;\n            return client.get(process.env.NEXT_PUBLIC_API_TASK_GRAPH);\n\n          case 7:\n            taskGraphInfo = _context.sent;\n            planTaskGraphList = createTaskGraphList(taskGraphInfo.data[\"planTask\"]);\n            doneTaskGraphList = createTaskGraphList(taskGraphInfo.data[\"doneTask\"]);\n            commentGraphList = createTaskGraphList(taskGraphInfo.data[\"comment\"]);\n            _context.next = 16;\n            break;\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](4);\n            Router.push('/Error?400');\n\n          case 16:\n            return _context.abrupt(\"return\", [planTaskGraphList, doneTaskGraphList, commentGraphList]);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[4, 13]]);\n  }));\n  return _getTaskGraphInfo.apply(this, arguments);\n}\n\nfunction createTaskGraphList(responseData) {\n  var length = responseData.length;\n  var taskGraphList = [];\n\n  for (var i = 0; i < length; i++) {\n    var taskGraph = new TaskGraphClass(responseData[i][\"date\"], responseData[i][\"count\"]);\n    taskGraphList.push(taskGraph);\n  }\n\n  return taskGraphList;\n}\n\nexport default TaskGraph;","map":null,"metadata":{},"sourceType":"module"}