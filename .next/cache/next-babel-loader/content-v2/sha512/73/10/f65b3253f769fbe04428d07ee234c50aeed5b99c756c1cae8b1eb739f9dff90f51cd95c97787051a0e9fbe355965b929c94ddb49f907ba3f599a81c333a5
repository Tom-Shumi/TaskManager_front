{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/TaskList.tsx\";\nimport React from 'react';\nimport TaskItem from '../components/TaskItem';\nimport styles from '../styles/TaskList.module.css';\nimport { ItemTypes, Task } from './interface';\nimport { useDrop } from 'react-dnd';\nimport Axios from \"axios\";\nimport Router from 'next/router';\nimport * as ConversionUtil from './ConversionUtil';\n\nconst TaskList = props => {\n  // cookieを使用するaxios生成\n  let client = Axios.create({\n    withCredentials: true\n  });\n\n  const updateTaskStatus = (id, status) => {\n    var params = {\n      status: status\n    };\n    var jsonParams = JSON.stringify(params);\n    client.put(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK + \"/status/\" + id, jsonParams, {\n      headers: {\n        'content-type': 'application/json'\n      }\n    }).then(response => {\n      props.setInitDispFlg(true);\n    }).catch(() => {\n      Router.push('/Error?400');\n    });\n  };\n\n  const [{\n    isOver\n  }, drop] = useDrop({\n    accept: ItemTypes.TASK_ITEM,\n    drop: dragItem => {\n      updateTaskStatus(dragItem.id, props.status);\n    },\n    collect: monitor => ({\n      isOver: !!monitor.isOver()\n    })\n  });\n  var status_str = ConversionUtil.conversionStatus(props.status);\n  var style_is_over = isOver ? \"is_over\" : \"is_not_over\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.task_list + \" \" + style_is_over,\n    ref: drop,\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: styles.task_status,\n      children: [status_str, \" [\", Object.keys(props.taskList).length, \"]\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), props.taskList.map(task_item => /*#__PURE__*/_jsxDEV(TaskItem, {\n      task: task_item,\n      setInitDispFlg: props.setInitDispFlg,\n      showTaskUpdateModal: props.showTaskUpdateModal,\n      showTaskUpdateModal: props.showTaskUpdateModal\n    }, \"TaskItem\" + task_item.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n\nexport default TaskList;","map":{"version":3,"sources":["/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/TaskList.tsx"],"names":["React","TaskItem","styles","ItemTypes","Task","useDrop","Axios","Router","ConversionUtil","TaskList","props","client","create","withCredentials","updateTaskStatus","id","status","params","jsonParams","JSON","stringify","put","process","env","NEXT_PUBLIC_API_SERVER","NEXT_PUBLIC_API_TASK","headers","then","response","setInitDispFlg","catch","push","isOver","drop","accept","TASK_ITEM","dragItem","collect","monitor","status_str","conversionStatus","style_is_over","task_list","task_status","Object","keys","taskList","length","map","task_item","showTaskUpdateModal"],"mappings":";;AAAA,OAAOA,KAAP,MAAiD,OAAjD;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,MAAP,MAAmB,+BAAnB;AACA,SAASC,SAAT,EAAoBC,IAApB,QAAgC,aAAhC;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAO,KAAKC,cAAZ,MAAgC,kBAAhC;;AAUA,MAAMC,QAAiC,GAAIC,KAAD,IAAW;AAEjD;AACA,MAAIC,MAAM,GAAGL,KAAK,CAACM,MAAN,CAAa;AAAEC,IAAAA,eAAe,EAAE;AAAnB,GAAb,CAAb;;AAEA,QAAMC,gBAAgB,GAAG,CAACC,EAAD,EAAaC,MAAb,KAAgC;AACrD,QAAIC,MAAM,GAAG;AACTD,MAAAA,MAAM,EAAEA;AADC,KAAb;AAGA,QAAIE,UAAU,GAAGC,IAAI,CAACC,SAAL,CAAeH,MAAf,CAAjB;AAEAN,IAAAA,MAAM,CAACU,GAAP,CAAWC,OAAO,CAACC,GAAR,CAAYC,sBAAZ,GAAqCF,OAAO,CAACC,GAAR,CAAYE,oBAAjD,GAAwE,UAAxE,GAAqFV,EAAhG,EACMG,UADN,EAEM;AAACQ,MAAAA,OAAO,EAAE;AAAC,wBAAgB;AAAjB;AAAV,KAFN,EAGEC,IAHF,CAGQC,QAAQ,IAAI;AAChBlB,MAAAA,KAAK,CAACmB,cAAN,CAAqB,IAArB;AACH,KALD,EAKGC,KALH,CAKS,MAAM;AACXvB,MAAAA,MAAM,CAACwB,IAAP,CAAY,YAAZ;AACH,KAPD;AAQH,GAdD;;AAgBA,QAAM,CAAC;AAACC,IAAAA;AAAD,GAAD,EAAWC,IAAX,IAAmB5B,OAAO,CAAC;AAC7B6B,IAAAA,MAAM,EAAE/B,SAAS,CAACgC,SADW;AAE7BF,IAAAA,IAAI,EAAGG,QAAD,IAAmB;AACrBtB,MAAAA,gBAAgB,CAACsB,QAAQ,CAACrB,EAAV,EAAcL,KAAK,CAACM,MAApB,CAAhB;AACH,KAJ4B;AAK7BqB,IAAAA,OAAO,EAAEC,OAAO,KAAK;AACjBN,MAAAA,MAAM,EAAE,CAAC,CAACM,OAAO,CAACN,MAAR;AADO,KAAL;AALa,GAAD,CAAhC;AAUA,MAAIO,UAAU,GAAG/B,cAAc,CAACgC,gBAAf,CAAgC9B,KAAK,CAACM,MAAtC,CAAjB;AACA,MAAIyB,aAAa,GAAGT,MAAM,GAAG,SAAH,GAAe,aAAzC;AACA,sBACI;AAAK,IAAA,SAAS,EAAE9B,MAAM,CAACwC,SAAP,GAAmB,GAAnB,GAA0BD,aAA1C;AAAyD,IAAA,GAAG,EAAER,IAA9D;AAAA,4BACI;AAAG,MAAA,SAAS,EAAE/B,MAAM,CAACyC,WAArB;AAAA,iBAAmCJ,UAAnC,QAAiDK,MAAM,CAACC,IAAP,CAAYnC,KAAK,CAACoC,QAAlB,EAA4BC,MAA7E;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAGQrC,KAAK,CAACoC,QAAN,CAAeE,GAAf,CAAmBC,SAAS,iBACxB,QAAC,QAAD;AACI,MAAA,IAAI,EAAEA,SADV;AAEI,MAAA,cAAc,EAAEvC,KAAK,CAACmB,cAF1B;AAGI,MAAA,mBAAmB,EAAEnB,KAAK,CAACwC,mBAH/B;AAII,MAAA,mBAAmB,EAAExC,KAAK,CAACwC;AAJ/B,OAKS,aAAaD,SAAS,CAAClC,EALhC;AAAA;AAAA;AAAA;AAAA,YADJ,CAHR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH,CAjDD;;AAmDA,eAAeN,QAAf","sourcesContent":["import React , { Dispatch, SetStateAction } from 'react';\nimport TaskItem from '../components/TaskItem';\nimport styles from '../styles/TaskList.module.css';\nimport { ItemTypes, Task } from './interface';\nimport { useDrop } from 'react-dnd';\nimport Axios from \"axios\";\nimport Router from 'next/router';\nimport * as ConversionUtil from './ConversionUtil';\n\ninterface TaskListProps {\n    taskList: Task[];\n    status: number;\n    setInitDispFlg: Dispatch<SetStateAction<Boolean>>;\n    showTaskUpdateModal: (Task) => void;\n    showTaskCommentModal: (Task) => void;\n}\n\nconst TaskList: React.FC<TaskListProps> = (props) => {\n\n    // cookieを使用するaxios生成\n    let client = Axios.create({ withCredentials: true });\n\n    const updateTaskStatus = (id: number, status: number) => {\n        var params = {\n            status: status\n        }\n        var jsonParams = JSON.stringify(params);\n\n        client.put(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK + \"/status/\" + id\n            , jsonParams\n            , {headers: {'content-type': 'application/json'}}\n        ).then( response => {\n            props.setInitDispFlg(true);\n        }).catch(() => {\n            Router.push('/Error?400');\n        })\n    }\n\n    const [{isOver}, drop] = useDrop({\n        accept: ItemTypes.TASK_ITEM,\n        drop: (dragItem: any) => {\n            updateTaskStatus(dragItem.id, props.status);\n        },\n        collect: monitor => ({\n            isOver: !!monitor.isOver()\n        })\n    })\n\n    var status_str = ConversionUtil.conversionStatus(props.status);\n    var style_is_over = isOver ? \"is_over\" : \"is_not_over\"; \n    return (\n        <div className={styles.task_list + \" \" +  style_is_over} ref={drop}>\n            <p className={styles.task_status}>{status_str} [{Object.keys(props.taskList).length}]</p>\n            {\n                props.taskList.map(task_item => (\n                    <TaskItem\n                        task={task_item}\n                        setInitDispFlg={props.setInitDispFlg}\n                        showTaskUpdateModal={props.showTaskUpdateModal}\n                        showTaskUpdateModal={props.showTaskUpdateModal}\n                        key={\"TaskItem\" + task_item.id}\n                    />\n                ))\n            }\n        </div>\n    )\n}\n\nexport default TaskList;"]},"metadata":{},"sourceType":"module"}