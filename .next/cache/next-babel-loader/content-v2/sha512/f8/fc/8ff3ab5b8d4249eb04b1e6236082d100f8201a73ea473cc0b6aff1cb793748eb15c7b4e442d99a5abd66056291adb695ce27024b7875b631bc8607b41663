{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/shumiya/Desktop/dev/react/shumipro_front/src/pages/Task.tsx\";\nimport React, { useState } from 'react';\nimport Link from 'next/link';\nimport Layout from '../components/Layout';\nimport TaskBoard from '../components/TaskBoard';\nimport TaskEditModal from '../components/TaskEditModal';\nimport { authentication } from '../components/Authentication';\nimport dynamic from \"next/dynamic\";\nimport { Button } from 'react-bootstrap';\n\nconst Task = () => {\n  // タスク作成モーダル表示フラグ\n  const {\n    0: taskCreateModalDispFlg,\n    1: setTaskCreateModalDispFlg\n  } = useState(false); // タスク更新モーダル表示フラグ\n\n  const {\n    0: taskUpdateModalDispFlg,\n    1: setTaskUpdateModalDispFlg\n  } = useState(false); // 初期表示フラグ\n\n  const {\n    0: initDispFlg,\n    1: setInitDispFlg\n  } = useState(true); // 編集対象タスク\n\n  const {\n    0: targetTask,\n    1: setTargetTaskk\n  } = useState(null);\n  authentication();\n\n  const showTaskCreateModal = task => {\n    setTargetTaskk(task);\n    setTaskCreateModalDispFlg(true);\n  };\n\n  const closeTaskCreateModal = () => {\n    setTaskCreateModalDispFlg(false);\n  };\n\n  const showTaskUpdateModal = task => {\n    setTargetTaskk(task);\n    setTaskUpdateModalDispFlg(true);\n  };\n\n  const closeTaskUpdateModal = () => {\n    setTaskUpdateModalDispFlg(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    title: \"Task.\",\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      variant: \"primary\",\n      className: \"button_md\",\n      onClick: () => showTaskCreateModal(null),\n      children: \"create task\"\n    }, \"create\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TaskBoard, {\n      initDispFlg: initDispFlg,\n      setInitDispFlg: setInitDispFlg,\n      show: showTaskUpdateModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      href: \"/\",\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        children: \"\\uFF1C\\uFF1C Back to login page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), taskCreateModalDispFlg && /*#__PURE__*/_jsxDEV(TaskEditModal, {\n      close: closeTaskCreateModal,\n      execSbt: \"1\",\n      setInitDispFlg: setInitDispFlg,\n      task: targetTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }, this), taskUpdateModalDispFlg && /*#__PURE__*/_jsxDEV(TaskEditModal, {\n      close: closeTaskUpdateModal,\n      execSbt: \"2\",\n      setInitDispFlg: setInitDispFlg,\n      task: targetTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n\nconst DynamicTask = dynamic({\n  loader: async () => Task\n}, {\n  ssr: false\n});\nexport default DynamicTask;","map":{"version":3,"sources":["/Users/shumiya/Desktop/dev/react/shumipro_front/src/pages/Task.tsx"],"names":["React","useState","Link","Layout","TaskBoard","TaskEditModal","authentication","dynamic","Button","Task","taskCreateModalDispFlg","setTaskCreateModalDispFlg","taskUpdateModalDispFlg","setTaskUpdateModalDispFlg","initDispFlg","setInitDispFlg","targetTask","setTargetTaskk","showTaskCreateModal","task","closeTaskCreateModal","showTaskUpdateModal","closeTaskUpdateModal","DynamicTask","loader","ssr"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,SAAQC,cAAR,QAA6B,8BAA7B;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,SAAQC,MAAR,QAAqB,iBAArB;;AAIA,MAAMC,IAAc,GAAG,MAAM;AACzB;AACA,QAAM;AAAA,OAACC,sBAAD;AAAA,OAAyBC;AAAzB,MAAsDV,QAAQ,CAAU,KAAV,CAApE,CAFyB,CAGzB;;AACA,QAAM;AAAA,OAACW,sBAAD;AAAA,OAAyBC;AAAzB,MAAsDZ,QAAQ,CAAU,KAAV,CAApE,CAJyB,CAKzB;;AACA,QAAM;AAAA,OAACa,WAAD;AAAA,OAAcC;AAAd,MAAgCd,QAAQ,CAAU,IAAV,CAA9C,CANyB,CAOzB;;AACA,QAAM;AAAA,OAACe,UAAD;AAAA,OAAaC;AAAb,MAA+BhB,QAAQ,CAAY,IAAZ,CAA7C;AAEAK,EAAAA,cAAc;;AAEd,QAAMY,mBAAmB,GAAIC,IAAD,IAAqB;AAC7CF,IAAAA,cAAc,CAACE,IAAD,CAAd;AACAR,IAAAA,yBAAyB,CAAC,IAAD,CAAzB;AACH,GAHD;;AAKA,QAAMS,oBAAoB,GAAG,MAAM;AAC/BT,IAAAA,yBAAyB,CAAC,KAAD,CAAzB;AACH,GAFD;;AAIA,QAAMU,mBAAmB,GAAIF,IAAD,IAAqB;AAC7CF,IAAAA,cAAc,CAACE,IAAD,CAAd;AACAN,IAAAA,yBAAyB,CAAC,IAAD,CAAzB;AACH,GAHD;;AAKA,QAAMS,oBAAoB,GAAG,MAAM;AAC/BT,IAAAA,yBAAyB,CAAC,KAAD,CAAzB;AACH,GAFD;;AAIA,sBACI,QAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,OAAd;AAAA,4BACI,QAAC,MAAD;AAAqB,MAAA,OAAO,EAAC,SAA7B;AAAuC,MAAA,SAAS,EAAC,WAAjD;AAA6D,MAAA,OAAO,EAAG,MAAMK,mBAAmB,CAAC,IAAD,CAAhG;AAAA;AAAA,OAAY,QAAZ;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,SAAD;AACI,MAAA,WAAW,EAAIJ,WADnB;AAEI,MAAA,cAAc,EAAIC,cAFtB;AAGI,MAAA,IAAI,EAAIM;AAHZ;AAAA;AAAA;AAAA;AAAA,YAFJ,eAMI;AAAA;AAAA;AAAA;AAAA,YANJ,eAOI,QAAC,IAAD;AAAM,MAAA,IAAI,EAAC,GAAX;AAAA,6BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAPJ,EAUKX,sBAAsB,iBACnB,QAAC,aAAD;AACI,MAAA,KAAK,EAAIU,oBADb;AAEI,MAAA,OAAO,EAAG,GAFd;AAGI,MAAA,cAAc,EAAIL,cAHtB;AAII,MAAA,IAAI,EAAIC;AAJZ;AAAA;AAAA;AAAA;AAAA,YAXR,EAkBKJ,sBAAsB,iBACnB,QAAC,aAAD;AACI,MAAA,KAAK,EAAIU,oBADb;AAEI,MAAA,OAAO,EAAG,GAFd;AAGI,MAAA,cAAc,EAAIP,cAHtB;AAII,MAAA,IAAI,EAAIC;AAJZ;AAAA;AAAA;AAAA;AAAA,YAnBR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA6BH,CA3DD;;AA6DA,MAAMO,WAAW,GAAGhB,OAAO,CACvB;AACEiB,EAAAA,MAAM,EAAE,YAAYf;AADtB,CADuB,EAIvB;AAAEgB,EAAAA,GAAG,EAAE;AAAP,CAJuB,CAA3B;AAOE,eAAeF,WAAf","sourcesContent":["import React, { useState } from 'react';\nimport Link from 'next/link';\nimport Layout from '../components/Layout';\nimport TaskBoard from '../components/TaskBoard';\nimport TaskEditModal from '../components/TaskEditModal';\nimport {authentication} from '../components/Authentication';\nimport dynamic from \"next/dynamic\";\nimport {Button} from 'react-bootstrap';\nimport { Task as TaskClass } from '../components/interface';\n\n\nconst Task: React.FC = () => {\n    // タスク作成モーダル表示フラグ\n    const [taskCreateModalDispFlg, setTaskCreateModalDispFlg] = useState<Boolean>(false);\n    // タスク更新モーダル表示フラグ\n    const [taskUpdateModalDispFlg, setTaskUpdateModalDispFlg] = useState<Boolean>(false);\n    // 初期表示フラグ\n    const [initDispFlg, setInitDispFlg] = useState<Boolean>(true);\n    // 編集対象タスク\n    const [targetTask, setTargetTaskk] = useState<TaskClass>(null);\n\n    authentication();\n\n    const showTaskCreateModal = (task: TaskClass) => {\n        setTargetTaskk(task);\n        setTaskCreateModalDispFlg(true);\n    }\n\n    const closeTaskCreateModal = () => {\n        setTaskCreateModalDispFlg(false);\n    }\n\n    const showTaskUpdateModal = (task: TaskClass) => {\n        setTargetTaskk(task);\n        setTaskUpdateModalDispFlg(true);\n    }\n\n    const closeTaskUpdateModal = () => {\n        setTaskUpdateModalDispFlg(false);\n    }\n\n    return (\n        <Layout title=\"Task.\">\n            <Button key=\"create\" variant=\"primary\" className=\"button_md\" onClick={ () => showTaskCreateModal(null)}>create task</Button>\n            <TaskBoard\n                initDispFlg = {initDispFlg}\n                setInitDispFlg = {setInitDispFlg}\n                show = {showTaskUpdateModal} />\n            <br />\n            <Link href=\"/\">\n                <a>＜＜ Back to login page</a>\n            </Link>\n            {taskCreateModalDispFlg && \n                <TaskEditModal \n                    close = {closeTaskCreateModal}\n                    execSbt = \"1\"\n                    setInitDispFlg = {setInitDispFlg}\n                    task = {targetTask}\n                />\n            }\n            {taskUpdateModalDispFlg && \n                <TaskEditModal \n                    close = {closeTaskUpdateModal}\n                    execSbt = \"2\"\n                    setInitDispFlg = {setInitDispFlg}\n                    task = {targetTask}\n                />\n            }\n        </Layout>\n    )\n}\n\nconst DynamicTask = dynamic(\n    {\n      loader: async () => Task,\n    },\n    { ssr: false }\n  );\n  \n  export default DynamicTask;"]},"metadata":{},"sourceType":"module"}