{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/TaskGraph.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport Router from 'next/router';\nimport Axios from \"axios\";\n\nconst TaskGraph = props => {\n  // 未対応のタスク\n  const {\n    0: planTaskCountList,\n    1: setPlanTaskCountList\n  } = useState([]); // 対応中のタスク\n\n  const {\n    0: doneTaskCountList,\n    1: setDoneTaskCountList\n  } = useState([]); // 対応済みのタスク\n\n  const {\n    0: commentCountList,\n    1: setCommentCountList\n  } = useState([]);\n  useEffect(() => {\n    callGetTaskGraphInfo();\n  }, []);\n\n  const callGetTaskGraphInfo = () => {};\n  /** グラフデータ */\n\n\n  const graphData = {\n    labels: [// 軸ラベル\n    // 各ラベルを配列にすることで軸ラベルが改行されて表示される\n    ['2019年', '1月'], ['2019年', '2月'], ['2019年', '3月'], ['2019年', '4月'], ['2019年', '5月'], ['2019年', '6月'], ['2019年', '7月'], ['2019年', '8月'], ['2019年', '9月'], ['2019年', '10月'], ['2019年', '11月'], ['2019年', '12月']],\n    datasets: [// 表示するデータセット\n    {\n      data: [5.6, 7.2, 10.6, 13.6, 20, 21.8, 24.1, 28.4, 25.1, 19.4, 13.1, 8.5],\n      backgroundColor: 'rgba(30, 144, 255, 1)',\n      label: '月別合計降水量(mm)'\n    }]\n  };\n  /** グラフオプション */\n\n  const graphOption = {\n    scales: {\n      xAxes: [// x軸オプション\n      {\n        scaleLabel: {\n          // x軸ラベルオプション\n          display: true,\n          labelString: '2019年'\n        }\n      }],\n      yAxes: [// y軸オプション\n      {\n        scaleLabel: {\n          // y軸ラベルオプション\n          display: true,\n          labelString: '合計降水量(mm)'\n        },\n        ticks: {\n          // y軸メモリオプション\n          beginAtZero: true,\n          callback: function (value, index, values) {\n            return `${value}(mm)`;\n          }\n        }\n      }]\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Bar, {\n      type: \"\",\n      data: graphData,\n      options: graphOption\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n};\n\nasync function getTaskGraphInfo() {\n  let client = Axios.create({\n    withCredentials: true\n  });\n  var planTaskCountList = [];\n  var doneTaskCountList = [];\n  var commentCountList = [];\n\n  try {\n    const resNotStarted = await client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK_GRAPH);\n    listNotStarted = createTaskList(resNotStarted.data);\n    lisInProgress = createTaskList(resInProgress.data);\n    listDone = createTaskList(resDone.data);\n  } catch (error) {\n    Router.push('/Error?400');\n  }\n\n  return [listNotStarted, lisInProgress, listDone];\n}\n\nexport default TaskGraph;","map":{"version":3,"sources":["/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/TaskGraph.tsx"],"names":["React","useState","useEffect","Bar","Router","Axios","TaskGraph","props","planTaskCountList","setPlanTaskCountList","doneTaskCountList","setDoneTaskCountList","commentCountList","setCommentCountList","callGetTaskGraphInfo","graphData","labels","datasets","data","backgroundColor","label","graphOption","scales","xAxes","scaleLabel","display","labelString","yAxes","ticks","beginAtZero","callback","value","index","values","getTaskGraphInfo","client","create","withCredentials","resNotStarted","get","process","env","NEXT_PUBLIC_API_SERVER","NEXT_PUBLIC_API_TASK_GRAPH","listNotStarted","createTaskList","lisInProgress","resInProgress","listDone","resDone","error","push"],"mappings":"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","sourcesContent":["import React, { Dispatch, SetStateAction, useState, useEffect} from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport TaskList from '../components/TaskList'\nimport { TaskGraph as TaskGraphClass } from './interface';\nimport Router from 'next/router';\nimport Axios from \"axios\";\nimport styles from '../styles/TaskBoard.module.css';\nimport { DndProvider } from 'react-dnd';\nimport {HTML5Backend} from 'react-dnd-html5-backend';\n\ninterface TaskGraphProps {\n\n}\n\nconst TaskGraph: React.FC<TaskGraphProps> = (props) => {\n    // 未対応のタスク\n    const [planTaskCountList, setPlanTaskCountList] = useState<TaskGraphClass[]>([]);\n    // 対応中のタスク\n    const [doneTaskCountList, setDoneTaskCountList] = useState<TaskGraphClass[]>([]);\n    // 対応済みのタスク\n    const [commentCountList, setCommentCountList] = useState<TaskGraphClass[]>([]);\n\n  useEffect(() => {\n    callGetTaskGraphInfo();\n  }, []);\n\n  const callGetTaskGraphInfo = () => {\n\n  }\n      /** グラフデータ */\n  const graphData = {\n    labels: [\n      // 軸ラベル\n      // 各ラベルを配列にすることで軸ラベルが改行されて表示される\n      ['2019年', '1月'],\n      ['2019年', '2月'],\n      ['2019年', '3月'],\n      ['2019年', '4月'],\n      ['2019年', '5月'],\n      ['2019年', '6月'],\n      ['2019年', '7月'],\n      ['2019年', '8月'],\n      ['2019年', '9月'],\n      ['2019年', '10月'],\n      ['2019年', '11月'],\n      ['2019年', '12月'],\n    ],\n    datasets: [\n      // 表示するデータセット\n      {\n        data: [5.6, 7.2, 10.6, 13.6, 20, 21.8, 24.1, 28.4, 25.1, 19.4, 13.1, 8.5],\n        backgroundColor: 'rgba(30, 144, 255, 1)',\n        label: '月別合計降水量(mm)',\n      },\n    ],\n  };\n\n  /** グラフオプション */\n  const graphOption = {\n    scales: {\n      xAxes: [\n        // x軸オプション\n        {\n          scaleLabel: {\n            // x軸ラベルオプション\n            display: true,\n            labelString: '2019年',\n          },\n        },\n      ],\n      yAxes: [\n        // y軸オプション\n        {\n          scaleLabel: {\n            // y軸ラベルオプション\n            display: true,\n            labelString: '合計降水量(mm)',\n          },\n          ticks: {\n            // y軸メモリオプション\n            beginAtZero: true,\n            callback: function (value, index, values) {\n              return `${value}(mm)`;\n            },\n          },\n        },\n      ],\n    },\n  };\n\n    return (\n        <div>\n            <Bar type=\"\" data={graphData} options={graphOption} />\n        </div>\n    )\n}\n\nasync function getTaskGraphInfo(){\n  let client = Axios.create({ withCredentials: true });\n  var planTaskCountList :TaskGraphClass[] = [];\n  var doneTaskCountList :TaskGraphClass[] = [];\n  var commentCountList :TaskGraphClass[] = [];\n  try {\n      const resNotStarted = await client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK_GRAPH);\n\n      listNotStarted = createTaskList(resNotStarted.data);\n      lisInProgress = createTaskList(resInProgress.data);\n      listDone = createTaskList(resDone.data);\n  } catch(error){\n      Router.push('/Error?400');\n  }\n  return [listNotStarted, lisInProgress, listDone];\n}\n\nexport default TaskGraph"]},"metadata":{},"sourceType":"module"}