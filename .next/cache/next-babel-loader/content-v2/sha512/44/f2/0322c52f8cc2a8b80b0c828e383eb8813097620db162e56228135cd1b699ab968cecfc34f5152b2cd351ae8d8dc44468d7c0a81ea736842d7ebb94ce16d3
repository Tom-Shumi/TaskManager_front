{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shumiya/Desktop/dev/react/shumipro_front/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/shumiya/Desktop/dev/react/shumipro_front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/TaskCommentModal.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Modal, Button, Form, Row, Col } from 'react-bootstrap';\nimport Axios from \"axios\";\nimport Router from 'next/router';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport TaskComment from '../components/TaskComment';\nimport styles from '../styles/TaskComment.module.css';\nimport { TaskComment as TaskCommentClass } from './interface';\n\nvar TaskCommentModal = function TaskCommentModal(props) {\n  _s();\n\n  var _useState = useState(\"\"),\n      inputComment = _useState[0],\n      setInputComment = _useState[1];\n\n  var _useState2 = useState([]),\n      comments = _useState2[0],\n      setComments = _useState2[1];\n\n  var _useState3 = useState(true),\n      initDispFlg = _useState3[0],\n      setInitDispFlg = _useState3[1];\n\n  useEffect(function () {\n    setInitDispFlg(false);\n    clearInputComment();\n    callGetTaskCommentList();\n  }, [initDispFlg]); // cookieを使用するaxios生成\n\n  var client = Axios.create({\n    withCredentials: true\n  });\n\n  var callGetTaskCommentList = function callGetTaskCommentList() {\n    var res = getTaskCommentList(props.task.id);\n    res.then(function (ret) {\n      return setComments(ret);\n    });\n  };\n\n  var handleChangeInputComment = function handleChangeInputComment() {\n    return function (e) {\n      return setInputComment(e.target.value);\n    };\n  };\n\n  var saveComment = function saveComment() {\n    var params = {\n      comment: inputComment\n    };\n    var jsonParams = JSON.stringify(params);\n    client.post(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK_COMMENT + props.task.id, jsonParams, {\n      headers: {\n        'content-type': 'application/json'\n      }\n    }).then(function (response) {\n      setInitDispFlg(true);\n    })[\"catch\"](function () {\n      Router.push('/Error?400');\n    });\n  };\n\n  var clearInputComment = function clearInputComment() {\n    return setInputComment(\"\");\n  };\n\n  var loadNextComment = function loadNextComment() {\n    var maxCommentId = comments[comments.length - 1].id;\n\n    try {\n      var res = client.get(\"\".concat(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK_COMMENT).concat(props.task.id));\n    } catch (error) {\n      Router.push('/Error?400');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    show: true,\n    onHide: props.close,\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      closeButton: true,\n      children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n        children: \"Comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      children: [/*#__PURE__*/_jsxDEV(Form, {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            xs: 12,\n            className: \"modal_input\",\n            children: /*#__PURE__*/_jsxDEV(Form.Control, {\n              as: \"textarea\",\n              rows: 2,\n              value: inputComment,\n              onChange: handleChangeInputComment()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 25\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 21\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.task_comment_button_frame,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.task_comment_button,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"primary\",\n                className: \"button_sm\",\n                onClick: saveComment,\n                children: \"save\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 69\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 25\n            }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.task_comment_button,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outline-dark\",\n                className: \"button_sm\",\n                onClick: clearInputComment,\n                children: \"clear\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 69\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 25\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 21\n          }, _this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 21\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, _this), comments.map(function (taskComment) {\n        return /*#__PURE__*/_jsxDEV(TaskComment, {\n          taskComment: taskComment,\n          setInitDispFlg: setInitDispFlg\n        }, \"taskComment\" + taskComment.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, _this);\n      }), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.task_comment_load,\n        onClick: loadNextComment,\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fa fa-arrow-circle-down faa-wrench animated-hover\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 81\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"dark\",\n        onClick: props.close,\n        className: \"button_sm\",\n        children: \"close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, _this)]\n  }, 'taskCommentModal', true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, _this);\n}; // 各apiを呼び出しタスクコメントリストを取得する\n\n\n_s(TaskCommentModal, \"wgcu8T+WOKKolZiS1k2XVH8hGkE=\");\n\n_c = TaskCommentModal;\n\nfunction getTaskCommentList(_x) {\n  return _getTaskCommentList.apply(this, arguments);\n}\n\nfunction _getTaskCommentList() {\n  _getTaskCommentList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(taskId) {\n    var client, taskCommentList, res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            client = Axios.create({\n              withCredentials: true\n            });\n            taskCommentList = [];\n            _context.prev = 2;\n            _context.next = 5;\n            return client.get(\"\".concat(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK_COMMENT).concat(taskId));\n\n          case 5:\n            res = _context.sent;\n            taskCommentList = createTaskCommentList(res.data);\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](2);\n            Router.push('/Error?400');\n\n          case 12:\n            return _context.abrupt(\"return\", taskCommentList);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 9]]);\n  }));\n  return _getTaskCommentList.apply(this, arguments);\n}\n\nfunction createTaskCommentList(commentList) {\n  var taskCommentList = [];\n\n  if (commentList == null) {\n    return taskCommentList;\n  }\n\n  for (var i = 0; i < commentList.length; i++) {\n    taskCommentList.push(new TaskCommentClass(commentList[i][\"id\"], commentList[i][\"taskId\"], commentList[i][\"username\"], commentList[i][\"comment\"], commentList[i][\"createDate\"]));\n  }\n\n  return taskCommentList;\n}\n\nexport default TaskCommentModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskCommentModal\");","map":{"version":3,"sources":["/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/TaskCommentModal.tsx"],"names":["React","useState","useEffect","Modal","Button","Form","Row","Col","Axios","Router","TaskComment","styles","TaskCommentClass","TaskCommentModal","props","inputComment","setInputComment","comments","setComments","initDispFlg","setInitDispFlg","clearInputComment","callGetTaskCommentList","client","create","withCredentials","res","getTaskCommentList","task","id","then","ret","handleChangeInputComment","e","target","value","saveComment","params","comment","jsonParams","JSON","stringify","post","process","env","NEXT_PUBLIC_API_SERVER","NEXT_PUBLIC_API_TASK_COMMENT","headers","response","push","loadNextComment","maxCommentId","length","get","error","close","task_comment_button_frame","task_comment_button","map","taskComment","task_comment_load","taskId","taskCommentList","createTaskCommentList","data","commentList","i"],"mappings":"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","sourcesContent":["import React, { Dispatch, SetStateAction, useState, useEffect } from 'react';\nimport {Modal, Button, Form, Row, Col} from 'react-bootstrap';\nimport Axios from \"axios\";\nimport Router from 'next/router';\nimport { Task } from '../components/interface';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport TaskComment from '../components/TaskComment';\nimport styles from '../styles/TaskComment.module.css';\nimport { TaskComment as TaskCommentClass } from './interface';\n\ninterface TaskCommentModalProps {\n    close: () => void;\n    _setInitDispFlg: Dispatch<SetStateAction<Boolean>>;\n    task: Task;\n}\n\n\nconst TaskCommentModal: React.FC<TaskCommentModalProps> = (props) => {\n    const [inputComment, setInputComment] = useState<string>(\"\");\n    const [comments, setComments] = useState<TaskCommentClass[]>([]);\n    const [initDispFlg, setInitDispFlg] = useState<boolean>(true);\n　　\n    useEffect(() => {\n        setInitDispFlg(false);\n        clearInputComment();\n        callGetTaskCommentList();\n    }, [initDispFlg]);\n\n    // cookieを使用するaxios生成\n    let client = Axios.create({ withCredentials: true });\n  \n    const callGetTaskCommentList = () => {\n        var res: Promise<TaskCommentClass[]> = getTaskCommentList(props.task.id);\n        res.then(ret => setComments(ret));\n    }\n\n    const handleChangeInputComment = () => {\n        return e => setInputComment(e.target.value);\n    }\n\n    const saveComment = () => {\n        var params = {\n            comment: inputComment\n        }\n        var jsonParams = JSON.stringify(params);\n        client.post(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK_COMMENT + props.task.id\n            , jsonParams\n            , {headers: {'content-type': 'application/json'}})\n        .then( response => {\n            setInitDispFlg(true);\n        }).catch(() => {\n            Router.push('/Error?400');\n        })\n    }\n\n    const clearInputComment = () => {\n        return setInputComment(\"\");\n    }\n\n    const loadNextComment = () => {\n        let maxCommentId = comments[comments.length - 1].id\n        try {\n            const res = client.get(`${process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK_COMMENT}${props.task.id}`);\n            \n        } catch(error){\n            Router.push('/Error?400');\n        }\n    }\n\n    return (\n        <Modal show={true} onHide={props.close} key='taskCommentModal'>\n            <Modal.Header closeButton>\n                <Modal.Title>Comment</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n            <Form>\n                <Row>\n                    <Col xs={12} className=\"modal_input\">\n                        <Form.Control as=\"textarea\" rows={2} value={inputComment} onChange={handleChangeInputComment()}/>\n                    </Col>\n                    <div className={styles.task_comment_button_frame}>\n                        <div className={styles.task_comment_button}><Button variant=\"primary\" className=\"button_sm\" onClick={saveComment} >save</Button></div>\n                        <div className={styles.task_comment_button}><Button variant=\"outline-dark\" className=\"button_sm\" onClick={clearInputComment} >clear</Button></div>\n                    </div>\n                    <hr />\n                </Row>\n            </Form>\n            {\n                comments.map((taskComment) => (\n                    <TaskComment\n                        taskComment={taskComment}\n                        setInitDispFlg={setInitDispFlg}\n                        key={\"taskComment\" + taskComment.id}\n                    />\n                ))\n            }\n            <div className={styles.task_comment_load} onClick={loadNextComment}><i className=\"fa fa-arrow-circle-down faa-wrench animated-hover\" /></div>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"dark\" onClick={props.close} className=\"button_sm\" >close</Button>\n            </Modal.Footer>\n        </Modal>\n    )\n}\n\n// 各apiを呼び出しタスクコメントリストを取得する\nasync function getTaskCommentList(taskId){\n    let client = Axios.create({ withCredentials: true });\n    var taskCommentList :TaskCommentClass[] = [];\n    try {\n        const res = await client.get(`${process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK_COMMENT}${taskId}`);\n\n        taskCommentList = createTaskCommentList(res.data);\n    } catch(error){\n        Router.push('/Error?400');\n    }\n    return taskCommentList;\n}\n\nfunction createTaskCommentList(commentList: any[]): TaskCommentClass[] {\n    var taskCommentList :TaskCommentClass[] = [];\n    if (commentList == null) {\n        return taskCommentList;\n    }\n    for (var i = 0 ; i < commentList.length ; i++) {\n        taskCommentList.push(new TaskCommentClass(commentList[i][\"id\"], commentList[i][\"taskId\"], commentList[i][\"username\"], commentList[i][\"comment\"], commentList[i][\"createDate\"]))\n    }\n    return taskCommentList;\n}\n\nexport default TaskCommentModal;"]},"metadata":{},"sourceType":"module"}