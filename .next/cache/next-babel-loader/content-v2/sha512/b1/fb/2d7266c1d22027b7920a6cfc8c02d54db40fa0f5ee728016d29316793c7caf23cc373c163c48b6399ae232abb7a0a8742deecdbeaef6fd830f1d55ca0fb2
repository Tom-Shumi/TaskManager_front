{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shumiya/Desktop/dev/react/shumipro_front/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/shumiya/Desktop/dev/react/shumipro_front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/Users/shumiya/Desktop/dev/react/shumipro_front/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/TaskBoard.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport TaskList from '../components/TaskList';\nimport { Task } from './interface';\nimport Router from 'next/router';\nimport Axios from \"axios\";\nimport styles from '../styles/TaskBoard.module.css';\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\n\nvar TaskBoard = function TaskBoard(props) {\n  _s();\n\n  // 未対応のタスク\n  var _useState = useState([]),\n      taskListNotStarted = _useState[0],\n      setTaskListNotStarted = _useState[1]; // 対応中のタスク\n\n\n  var _useState2 = useState([]),\n      taskListInProgress = _useState2[0],\n      setTaskListInProgress = _useState2[1]; // 対応済みのタスク\n\n\n  var _useState3 = useState([]),\n      taskListDone = _useState3[0],\n      setTaskListDone = _useState3[1];\n\n  useEffect(function () {\n    props.setInitDispFlg(false);\n    callGetTaskList();\n  }, [props.initDispFlg]);\n\n  var callGetTaskList = function callGetTaskList() {\n    var res = getTaskList();\n    res.then(function (ret) {\n      return setTaskListNotStarted(ret[0]);\n    });\n    res.then(function (ret) {\n      return setTaskListInProgress(ret[1]);\n    });\n    res.then(function (ret) {\n      return setTaskListDone(ret[2]);\n    });\n  };\n\n  var createDummyDraggable = function createDummyDraggable() {\n    return /*#__PURE__*/_jsxDEV(Draggable, {\n      draggableId: \"DummyDraggableId\",\n      index: 0,\n      children: function children(provided) {\n        return /*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread({\n          ref: provided.innerRef\n        }, provided.draggableProps), provided.dragHandleProps), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 17\n        }, _this);\n      }\n    }, \"DummyDraggableKey\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, _this);\n  };\n\n  var onDragEnd = function onDragEnd() {\n    console.log('Drag ended');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.task_board,\n    children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: onDragEnd,\n      children: [/*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: \"droppable1\",\n        children: function children(provided) {\n          return /*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread({\n            ref: provided.innerRef\n          }, provided.droppableProps), {}, {\n            children: [/*#__PURE__*/_jsxDEV(TaskList, {\n              taskList: taskListNotStarted,\n              status: \"1\",\n              setInitDispFlg: props.setInitDispFlg,\n              show: props.show\n            }, \"TaskList1\", false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 25\n            }, _this), /*#__PURE__*/_jsxDEV(Draggable, {\n              draggableId: \"DummyDraggableId\",\n              index: 0,\n              children: function children(provided) {\n                return /*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread({\n                  ref: provided.innerRef\n                }, provided.draggableProps), provided.dragHandleProps), void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 66,\n                  columnNumber: 29\n                }, _this);\n              }\n            }, \"DummyDraggableKey\", false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 25\n            }, _this), provided.placeholder]\n          }), void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 21\n          }, _this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, _this), /*#__PURE__*/_jsxDEV(TaskList, {\n        taskList: taskListInProgress,\n        status: \"2\",\n        setInitDispFlg: props.setInitDispFlg,\n        show: props.show\n      }, \"TaskList2\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, _this), /*#__PURE__*/_jsxDEV(TaskList, {\n        taskList: taskListDone,\n        status: \"3\",\n        setInitDispFlg: props.setInitDispFlg,\n        show: props.show\n      }, \"TaskList3\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, _this);\n}; // 各apiを呼び出しタスクリストを取得する\n\n\n_s(TaskBoard, \"pDAInHP6qLJETjliz2NuWhtutT0=\");\n\n_c = TaskBoard;\n\nfunction getTaskList() {\n  return _getTaskList.apply(this, arguments);\n} // apiレスポンスからタスクリストを生成する\n\n\nfunction _getTaskList() {\n  _getTaskList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var client, listNotStarted, lisInProgress, listDone, resNotStarted, resInProgress, resDone;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            client = Axios.create({\n              withCredentials: true\n            });\n            listNotStarted = [];\n            lisInProgress = [];\n            listDone = [];\n            _context.prev = 4;\n            _context.next = 7;\n            return client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK + \"/1\");\n\n          case 7:\n            resNotStarted = _context.sent;\n            _context.next = 10;\n            return client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK + \"/2\");\n\n          case 10:\n            resInProgress = _context.sent;\n            _context.next = 13;\n            return client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK + \"/3\");\n\n          case 13:\n            resDone = _context.sent;\n            listNotStarted = createTaskList(resNotStarted.data);\n            lisInProgress = createTaskList(resInProgress.data);\n            listDone = createTaskList(resDone.data);\n            _context.next = 22;\n            break;\n\n          case 19:\n            _context.prev = 19;\n            _context.t0 = _context[\"catch\"](4);\n            Router.push('/Error?400');\n\n          case 22:\n            return _context.abrupt(\"return\", [listNotStarted, lisInProgress, listDone]);\n\n          case 23:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[4, 19]]);\n  }));\n  return _getTaskList.apply(this, arguments);\n}\n\nfunction createTaskList(responseData) {\n  var length = responseData.length;\n  var taskList = [];\n\n  for (var i = 0; i < length; i++) {\n    var task = new Task(responseData[i][\"id\"], responseData[i][\"task\"], responseData[i][\"description\"], responseData[i][\"priority\"], responseData[i][\"status\"]);\n    taskList.push(task);\n  }\n\n  return taskList;\n}\n\nexport default TaskBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskBoard\");","map":{"version":3,"sources":["/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/TaskBoard.tsx"],"names":["React","useState","useEffect","TaskList","Task","Router","Axios","styles","DragDropContext","Draggable","Droppable","TaskBoard","props","taskListNotStarted","setTaskListNotStarted","taskListInProgress","setTaskListInProgress","taskListDone","setTaskListDone","setInitDispFlg","callGetTaskList","initDispFlg","res","getTaskList","then","ret","createDummyDraggable","provided","innerRef","draggableProps","dragHandleProps","onDragEnd","console","log","task_board","droppableProps","show","placeholder","client","create","withCredentials","listNotStarted","lisInProgress","listDone","get","process","env","NEXT_PUBLIC_API_SERVER","NEXT_PUBLIC_API_TASK","resNotStarted","resInProgress","resDone","createTaskList","data","push","responseData","length","taskList","i","task"],"mappings":"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","sourcesContent":["import React, { Dispatch, SetStateAction, useState, useEffect} from 'react';\nimport TaskList from '../components/TaskList'\nimport { Task } from './interface';\nimport Router from 'next/router';\nimport Axios from \"axios\";\nimport styles from '../styles/TaskBoard.module.css';\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\n\ninterface TaskBoardProps {\n    initDispFlg: Boolean;\n    setInitDispFlg: Dispatch<SetStateAction<Boolean>>;\n    show: (Task) => void;\n}\n\nconst TaskBoard: React.FC<TaskBoardProps> = (props) => {\n    // 未対応のタスク\n    const [taskListNotStarted, setTaskListNotStarted] = useState<Task[]>([]);\n    // 対応中のタスク\n    const [taskListInProgress, setTaskListInProgress] = useState<Task[]>([]);\n    // 対応済みのタスク\n    const [taskListDone, setTaskListDone] = useState<Task[]>([]);\n\n    useEffect(() => {\n        props.setInitDispFlg(false);\n        callGetTaskList();\n    }, [props.initDispFlg]);\n\n    const callGetTaskList = () => {\n        var res: Promise<Task[][]> = getTaskList();\n        res.then(ret => setTaskListNotStarted(ret[0]));\n        res.then(ret => setTaskListInProgress(ret[1]));\n        res.then(ret => setTaskListDone(ret[2]));\n    }\n\n    const createDummyDraggable = () => {\n        return (\n            <Draggable key=\"DummyDraggableKey\" draggableId=\"DummyDraggableId\" index={0}>\n              {(provided) => (\n                <div\n                    ref={provided.innerRef}\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n                ></div>\n              )}\n            </Draggable>\n          )\n    }\n\n    const onDragEnd = () => {\n        console.log('Drag ended');\n    }\n\n    return (\n        <div className={styles.task_board}>\n\n            <DragDropContext onDragEnd={onDragEnd}>\n            <Droppable droppableId=\"droppable1\">\n                {(provided) => (\n                    <div\n                        ref={provided.innerRef}\n                        {...provided.droppableProps}>\n                        <TaskList \n                            taskList={taskListNotStarted} status=\"1\" setInitDispFlg={props.setInitDispFlg} show={props.show} key=\"TaskList1\"/>\n                        <Draggable key=\"DummyDraggableKey\" draggableId=\"DummyDraggableId\" index={0}>\n                        {(provided) => (\n                            <div\n                                ref={provided.innerRef}\n                                {...provided.draggableProps}\n                                {...provided.dragHandleProps}\n                            ></div>\n                        )}\n                        </Draggable>\n                        {provided.placeholder}\n                    </div>\n                )}\n            </Droppable>\n            <TaskList taskList={taskListInProgress} status=\"2\" setInitDispFlg={props.setInitDispFlg} show={props.show} key=\"TaskList2\" />\n            <TaskList taskList={taskListDone} status=\"3\" setInitDispFlg={props.setInitDispFlg} show={props.show} key=\"TaskList3\" />\n            </DragDropContext>\n        </div>\n    )\n}\n\n// 各apiを呼び出しタスクリストを取得する\nasync function getTaskList(){\n    let client = Axios.create({ withCredentials: true });\n    var listNotStarted :Task[] = [];\n    var lisInProgress :Task[] = [];\n    var listDone :Task[] = [];\n    try {\n        const resNotStarted = await client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK + \"/1\");\n        const resInProgress = await client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK + \"/2\");\n        const resDone = await client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK + \"/3\");\n\n        listNotStarted = createTaskList(resNotStarted.data);\n        lisInProgress = createTaskList(resInProgress.data);\n        listDone = createTaskList(resDone.data);\n    } catch(error){\n        Router.push('/Error?400');\n    }\n    return [listNotStarted, lisInProgress, listDone];\n}\n\n// apiレスポンスからタスクリストを生成する\nfunction createTaskList(responseData: any[]): Task[]{\n    let length: number = responseData.length;\n    var taskList :Task[] = [];\n    for (var i = 0 ; i < length ; i++) {\n        let task = new Task(responseData[i][\"id\"], responseData[i][\"task\"], responseData[i][\"description\"], responseData[i][\"priority\"], responseData[i][\"status\"]);\n        taskList.push(task);\n    }\n    return taskList;\n}\n\nexport default TaskBoard;"]},"metadata":{},"sourceType":"module"}