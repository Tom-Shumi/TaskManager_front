{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shumiya/Desktop/dev/react/shumipro_front/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/shumiya/Desktop/dev/react/shumipro_front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/TaskGraph.tsx\",\n    _this = this;\n\nimport React from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { TaskGraph as TaskGraphClass } from './interface';\nimport Router from 'next/router';\nimport Axios from \"axios\";\n\nvar TaskGraph = function TaskGraph(props) {\n  var graphData = {\n    labels: [// 軸ラベル\n    // 各ラベルを配列にすることで軸ラベルが改行されて表示される\n    ['2019年', '1月'], ['2019年', '2月'], ['2019年', '3月'], ['2019年', '4月'], ['2019年', '5月'], ['2019年', '6月'], ['2019年', '7月'], ['2019年', '8月'], ['2019年', '9月'], ['2019年', '10月'], ['2019年', '11月'], ['2019年', '12月']],\n    datasets: [{\n      data: [16, 42, 117.5, 90.5, 120.5, 225, 193, 110, 197, 529.5, 156.5, 76.5],\n      backgroundColor: 'rgba(30, 144, 255, 1)',\n      // <--追加\n      label: '月別合計降水量(mm)'\n    }]\n  };\n  /** グラフオプション */\n\n  var graphOption = {\n    scales: {\n      xAxes: [// x軸設定\n      {\n        scaleLabel: {\n          // 軸ラベル設定\n          display: true,\n          labelString: '2019年'\n        }\n      }],\n      yAxes: [// y軸設定\n      {\n        scaleLabel: {\n          display: true,\n          labelString: '合計降水量(mm)'\n        },\n        ticks: {\n          // 軸目盛設定\n          beginAtZero: true,\n          callback: function callback(value, index, values) {\n            return \"\".concat(value, \"(mm)\");\n          }\n        }\n      }]\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Bar, {\n      data: graphData,\n      options: graphOption\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, _this);\n};\n\n_c = TaskGraph;\n\nfunction getTaskGraphInfo() {\n  return _getTaskGraphInfo.apply(this, arguments);\n} // apiレスポンスからタスクリストを生成する\n\n\nfunction _getTaskGraphInfo() {\n  _getTaskGraphInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var client, planTaskGraphList, doneTaskGraphList, commentGraphList, taskGraphInfo;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            client = Axios.create({\n              withCredentials: true\n            });\n            planTaskGraphList = [];\n            doneTaskGraphList = [];\n            commentGraphList = [];\n            _context.prev = 4;\n            _context.next = 7;\n            return client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK_GRAPH);\n\n          case 7:\n            taskGraphInfo = _context.sent;\n            planTaskGraphList = createTaskGraphList(taskGraphInfo.data[\"planTask\"]);\n            doneTaskGraphList = createTaskGraphList(taskGraphInfo.data[\"doneTask\"]);\n            commentGraphList = createTaskGraphList(taskGraphInfo.data[\"comment\"]);\n            _context.next = 16;\n            break;\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](4);\n            Router.push('/Error?400');\n\n          case 16:\n            return _context.abrupt(\"return\", [planTaskGraphList, doneTaskGraphList, commentGraphList]);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[4, 13]]);\n  }));\n  return _getTaskGraphInfo.apply(this, arguments);\n}\n\nfunction createTaskGraphList(responseData) {\n  var length = responseData.length;\n  var taskGraphList = [];\n\n  for (var i = 0; i < length; i++) {\n    var taskGraph = new TaskGraphClass(responseData[i][\"date\"], responseData[i][\"count\"]);\n    taskGraphList.push(taskGraph);\n  }\n\n  return taskGraphList;\n}\n\nexport default TaskGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskGraph\");","map":{"version":3,"sources":["/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/TaskGraph.tsx"],"names":["React","Bar","TaskGraph","TaskGraphClass","Router","Axios","props","graphData","labels","datasets","data","backgroundColor","label","graphOption","scales","xAxes","scaleLabel","display","labelString","yAxes","ticks","beginAtZero","callback","value","index","values","getTaskGraphInfo","client","create","withCredentials","planTaskGraphList","doneTaskGraphList","commentGraphList","get","process","env","NEXT_PUBLIC_API_SERVER","NEXT_PUBLIC_API_TASK_GRAPH","taskGraphInfo","createTaskGraphList","push","responseData","length","taskGraphList","i","taskGraph"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { TaskGraph as TaskGraphClass } from './interface';\nimport Router from 'next/router';\nimport Axios from \"axios\";\n\ninterface TaskGraphProps {\n\n}\n\nconst TaskGraph: React.FC<TaskGraphProps> = (props) => {\n  const graphData= {\n    labels: [\n      // 軸ラベル\n      // 各ラベルを配列にすることで軸ラベルが改行されて表示される\n      ['2019年', '1月'],\n      ['2019年', '2月'],\n      ['2019年', '3月'],\n      ['2019年', '4月'],\n      ['2019年', '5月'],\n      ['2019年', '6月'],\n      ['2019年', '7月'],\n      ['2019年', '8月'],\n      ['2019年', '9月'],\n      ['2019年', '10月'],\n      ['2019年', '11月'],\n      ['2019年', '12月'],\n    ],\n    datasets: [\n      {\n        data: [16, 42, 117.5, 90.5, 120.5, 225, 193, 110, 197, 529.5, 156.5, 76.5],\n        backgroundColor: 'rgba(30, 144, 255, 1)', // <--追加\n        label: '月別合計降水量(mm)',\n      },\n    ],\n  };\n\n  /** グラフオプション */\n  const graphOption = {\n    scales: {\n      xAxes: [ // x軸設定\n        {\n          scaleLabel: { // 軸ラベル設定\n            display: true,\n            labelString: '2019年',\n          },\n        },\n      ],\n      yAxes: [ // y軸設定\n        {\n          scaleLabel: {\n            display: true,\n            labelString: '合計降水量(mm)',\n          },\n          ticks: { // 軸目盛設定\n            beginAtZero: true,\n            callback: function (value, index, values) {\n              return `${value}(mm)`;\n            },\n          },\n        },\n      ],\n    },\n  };\n\n  return (\n    <div className=\"App\">\n      {/* グラフコンポーネントの呼び出し */}\n      <Bar data={graphData} options={graphOption} />\n    </div>\n  );\n}\n\nasync function getTaskGraphInfo(){\n  let client = Axios.create({ withCredentials: true });\n  var planTaskGraphList :TaskGraphClass[] = [];\n  var doneTaskGraphList :TaskGraphClass[] = [];\n  var commentGraphList :TaskGraphClass[] = [];\n  try {\n      const taskGraphInfo = await client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK_GRAPH);\n      \n      planTaskGraphList = createTaskGraphList(taskGraphInfo.data[\"planTask\"]);\n      doneTaskGraphList = createTaskGraphList(taskGraphInfo.data[\"doneTask\"]);\n      commentGraphList = createTaskGraphList(taskGraphInfo.data[\"comment\"]);\n  } catch(error){\n      Router.push('/Error?400');\n  }\n  return [planTaskGraphList, doneTaskGraphList, commentGraphList];\n}\n\n// apiレスポンスからタスクリストを生成する\nfunction createTaskGraphList(responseData: any[]): TaskGraphClass[]{\n  let length: number = responseData.length;\n  var taskGraphList :TaskGraphClass[] = [];\n  for (var i = 0 ; i < length ; i++) {\n      let taskGraph = new TaskGraphClass(responseData[i][\"date\"], responseData[i][\"count\"]);\n      taskGraphList.push(taskGraph);\n  }\n  return taskGraphList;\n}\n\nexport default TaskGraph"]},"metadata":{},"sourceType":"module"}