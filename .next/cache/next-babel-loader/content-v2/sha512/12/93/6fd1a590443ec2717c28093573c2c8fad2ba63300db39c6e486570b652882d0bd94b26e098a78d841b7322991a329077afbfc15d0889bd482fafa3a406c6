{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/TaskGraph.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { TaskGraph as TaskGraphClass } from './interface';\nimport Router from 'next/router';\nimport Axios from \"axios\";\n\nconst TaskGraph = props => {\n  // 未対応のタスク\n  const {\n    0: planTaskGraphList,\n    1: setPlanTaskGraphList\n  } = useState([]); // 対応中のタスク\n\n  const {\n    0: doneTaskGraphList,\n    1: setDoneTaskGraphList\n  } = useState([]); // 対応済みのタスク\n\n  const {\n    0: commentGraphList,\n    1: setCommentGraphList\n  } = useState([]);\n  useEffect(() => {\n    callGetTaskGraphInfo();\n  }, []);\n\n  const callGetTaskGraphInfo = () => {\n    var res = getTaskGraphInfo();\n    res.then(ret => setPlanTaskGraphList(ret[0]));\n    res.then(ret => setDoneTaskGraphList(ret[1]));\n    res.then(ret => setCommentGraphList(ret[2]));\n  };\n\n  let planTaskGraphLabel = [];\n  planTaskGraphList.map(taskGraph => planTaskGraphLabel.push(taskGraph.date));\n  let planTaskGraphDataSet = [];\n  planTaskGraphList.map(taskGraph => planTaskGraphDataSet.push(taskGraph.count));\n  const planTaskGraphData = {\n    labels: planTaskGraphLabel,\n    datasets: [{\n      data: planTaskGraphDataSet,\n      backgroundColor: 'rgba(30, 144, 255, 1)',\n      label: '完了予定タスク(件数)'\n    }]\n  };\n  let doneTaskGraphLabel = [];\n  doneTaskGraphList.map(taskGraph => doneTaskGraphLabel.push(taskGraph.date));\n  let doneTaskGraphDataSet = [];\n  doneTaskGraphList.map(taskGraph => doneTaskGraphDataSet.push(taskGraph.count));\n  const doneTaskGraphData = {\n    labels: doneTaskGraphLabel,\n    datasets: [{\n      data: doneTaskGraphDataSet,\n      backgroundColor: 'rgba(150, 100, 0, 100)',\n      label: '完了タスク(件数)'\n    }]\n  };\n  console.log(\"done\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"\\u25A0\\u65E5\\u6BCE\\u306E\\u5B8C\\u4E86\\u4E88\\u5B9A\\u30BF\\u30B9\\u30AF\\u6570\", /*#__PURE__*/_jsxDEV(Bar, {\n      type: \"\",\n      data: planTaskGraphData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }, this), \"\\u25A0\\u65E5\\u6BCE\\u306E\\u5B8C\\u4E86\\u30BF\\u30B9\\u30AF\\u6570\", /*#__PURE__*/_jsxDEV(Bar, {\n      type: \"\",\n      data: doneTaskGraphData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n\nasync function getTaskGraphInfo() {\n  let client = Axios.create({\n    withCredentials: true\n  });\n  var planTaskGraphList = [];\n  var doneTaskGraphList = [];\n  var commentGraphList = [];\n\n  try {\n    const taskGraphInfo = await client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK_GRAPH);\n    planTaskGraphList = createTaskGraphList(taskGraphInfo.data[\"planTask\"]);\n    doneTaskGraphList = createTaskGraphList(taskGraphInfo.data[\"doneTask\"]);\n    commentGraphList = createTaskGraphList(taskGraphInfo.data[\"comment\"]);\n  } catch (error) {\n    Router.push('/Error?400');\n  }\n\n  return [planTaskGraphList, doneTaskGraphList, commentGraphList];\n} // apiレスポンスからタスクリストを生成する\n\n\nfunction createTaskGraphList(responseData) {\n  let length = responseData.length;\n  var taskGraphList = [];\n\n  for (var i = 0; i < length; i++) {\n    let taskGraph = new TaskGraphClass(responseData[i][\"date\"], responseData[i][\"count\"]);\n    taskGraphList.push(taskGraph);\n  }\n\n  return taskGraphList;\n}\n\nexport default TaskGraph;","map":{"version":3,"sources":["/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/TaskGraph.tsx"],"names":["React","useState","useEffect","Bar","TaskGraph","TaskGraphClass","Router","Axios","props","planTaskGraphList","setPlanTaskGraphList","doneTaskGraphList","setDoneTaskGraphList","commentGraphList","setCommentGraphList","callGetTaskGraphInfo","res","getTaskGraphInfo","then","ret","planTaskGraphLabel","map","taskGraph","push","date","planTaskGraphDataSet","count","planTaskGraphData","labels","datasets","data","backgroundColor","label","doneTaskGraphLabel","doneTaskGraphDataSet","doneTaskGraphData","console","log","client","create","withCredentials","taskGraphInfo","get","process","env","NEXT_PUBLIC_API_SERVER","NEXT_PUBLIC_API_TASK_GRAPH","createTaskGraphList","error","responseData","length","taskGraphList","i"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { TaskGraph as TaskGraphClass } from './interface';\nimport Router from 'next/router';\nimport Axios from \"axios\";\n\ninterface TaskGraphProps {\n\n}\n\nconst TaskGraph: React.FC<TaskGraphProps> = (props) => {\n    // 未対応のタスク\n    const [planTaskGraphList, setPlanTaskGraphList] = useState<TaskGraphClass[]>([]);\n    // 対応中のタスク\n    const [doneTaskGraphList, setDoneTaskGraphList] = useState<TaskGraphClass[]>([]);\n    // 対応済みのタスク\n    const [commentGraphList, setCommentGraphList] = useState<TaskGraphClass[]>([]);\n\n  useEffect(() => {\n    callGetTaskGraphInfo();\n  }, []);\n\n  const callGetTaskGraphInfo = () => {\n    var res: Promise<TaskGraphClass[][]> = getTaskGraphInfo();\n    res.then(ret => setPlanTaskGraphList(ret[0]));\n    res.then(ret => setDoneTaskGraphList(ret[1]));\n    res.then(ret => setCommentGraphList(ret[2]));\n  }\n\n  let planTaskGraphLabel = [];\n  planTaskGraphList.map(taskGraph => planTaskGraphLabel.push(taskGraph.date));\n\n  let planTaskGraphDataSet = [];\n  planTaskGraphList.map(taskGraph => planTaskGraphDataSet.push(taskGraph.count));\n\n  const planTaskGraphData = {\n    labels: planTaskGraphLabel,\n    datasets: [\n      {\n        data: planTaskGraphDataSet,\n        backgroundColor: 'rgba(30, 144, 255, 1)',\n        label: '完了予定タスク(件数)',\n      },\n    ],\n  };\n\n  let doneTaskGraphLabel = [];\n  doneTaskGraphList.map(taskGraph => doneTaskGraphLabel.push(taskGraph.date));\n\n  let doneTaskGraphDataSet = [];\n  doneTaskGraphList.map(taskGraph => doneTaskGraphDataSet.push(taskGraph.count));\n\n  const doneTaskGraphData = {\n    labels: doneTaskGraphLabel,\n    datasets: [\n      {\n        data: doneTaskGraphDataSet,\n        backgroundColor: 'rgba(150, 100, 0, 100)',\n        label: '完了タスク(件数)',\n      },\n    ],\n  };\n\n  console.log(\"done\")\n\n  return (\n        <div>\n          ■日毎の完了予定タスク数\n          <Bar type=\"\" data={planTaskGraphData} />\n          <br />\n          ■日毎の完了タスク数\n          <Bar type=\"\" data={doneTaskGraphData} />\n        </div>\n  )\n}\n\nasync function getTaskGraphInfo(){\n  let client = Axios.create({ withCredentials: true });\n  var planTaskGraphList :TaskGraphClass[] = [];\n  var doneTaskGraphList :TaskGraphClass[] = [];\n  var commentGraphList :TaskGraphClass[] = [];\n  try {\n      const taskGraphInfo = await client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK_GRAPH);\n      \n      planTaskGraphList = createTaskGraphList(taskGraphInfo.data[\"planTask\"]);\n      doneTaskGraphList = createTaskGraphList(taskGraphInfo.data[\"doneTask\"]);\n      commentGraphList = createTaskGraphList(taskGraphInfo.data[\"comment\"]);\n  } catch(error){\n      Router.push('/Error?400');\n  }\n  return [planTaskGraphList, doneTaskGraphList, commentGraphList];\n}\n\n// apiレスポンスからタスクリストを生成する\nfunction createTaskGraphList(responseData: any[]): TaskGraphClass[]{\n  let length: number = responseData.length;\n  var taskGraphList :TaskGraphClass[] = [];\n  for (var i = 0 ; i < length ; i++) {\n      let taskGraph = new TaskGraphClass(responseData[i][\"date\"], responseData[i][\"count\"]);\n      taskGraphList.push(taskGraph);\n  }\n  return taskGraphList;\n}\n\nexport default TaskGraph"]},"metadata":{},"sourceType":"module"}