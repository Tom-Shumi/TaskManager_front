{"ast":null,"code":"import Router from 'next/router';\nimport { useState } from \"react\";\nimport Axios from \"axios\";\n\nconst getSessionUsername = () => {\n  return sessionStorage.getItem('n');\n};\n\nexport const authentication = () => {\n  const {\n    0: username\n  } = useState(getSessionUsername());\n\n  if (username == null) {\n    Router.push('/Error?401');\n  }\n};\nexport const getUsername = () => {\n  const {\n    0: username\n  } = useState(getSessionUsername());\n  return username;\n};\nexport const getApiClient = () => {\n  return Axios.create({\n    baseURL: process.env.NEXT_PUBLIC_API_SERVER,\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    withCredentials: true\n  });\n};","map":{"version":3,"sources":["/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/Authentication.ts"],"names":["Router","useState","Axios","getSessionUsername","sessionStorage","getItem","authentication","username","push","getUsername","getApiClient","create","baseURL","process","env","NEXT_PUBLIC_API_SERVER","headers","withCredentials"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,aAAnB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,kBAAkB,GAAG,MAAc;AACrC,SAAOC,cAAc,CAACC,OAAf,CAAuB,GAAvB,CAAP;AACH,CAFD;;AAIA,OAAO,MAAMC,cAAc,GAAG,MAAM;AAChC,QAAM;AAAA,OAACC;AAAD,MAAaN,QAAQ,CAASE,kBAAkB,EAA3B,CAA3B;;AACA,MAAII,QAAQ,IAAI,IAAhB,EAAqB;AACjBP,IAAAA,MAAM,CAACQ,IAAP,CAAY,YAAZ;AACH;AACJ,CALM;AAOP,OAAO,MAAMC,WAAW,GAAG,MAAM;AAC7B,QAAM;AAAA,OAACF;AAAD,MAAaN,QAAQ,CAASE,kBAAkB,EAA3B,CAA3B;AACA,SAAOI,QAAP;AACH,CAHM;AAKP,OAAO,MAAMG,YAAY,GAAG,MAAM;AAC9B,SAAOR,KAAK,CAACS,MAAN,CAAa;AAChBC,IAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,sBADL;AAEhBC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAFO;AAKhBC,IAAAA,eAAe,EAAE;AALD,GAAb,CAAP;AAMH,CAPM","sourcesContent":["import Router from 'next/router';\nimport { useState } from \"react\";\nimport Axios from \"axios\";\n\nconst getSessionUsername = (): String => {\n    return sessionStorage.getItem('n');\n}\n\nexport const authentication = () => {\n    const [username] = useState<String>(getSessionUsername());\n    if (username == null){\n        Router.push('/Error?401');\n    }\n}\n\nexport const getUsername = () => {\n    const [username] = useState<String>(getSessionUsername());\n    return username;\n}\n\nexport const getApiClient = () => {\n    return Axios.create({\n        baseURL: process.env.NEXT_PUBLIC_API_SERVER,\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        withCredentials: true });\n}"]},"metadata":{},"sourceType":"module"}