{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shumiya/Desktop/dev/react/shumipro_front/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/shumiya/Desktop/dev/react/shumipro_front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/TaskBoard.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport TaskList from '../components/TaskList';\nimport { Task, TaskComment } from './interface';\nimport Router from 'next/router';\nimport Axios from \"axios\";\nimport styles from '../styles/TaskBoard.module.css';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\nvar TaskBoard = function TaskBoard(props) {\n  _s();\n\n  // 未対応のタスク\n  var _useState = useState([]),\n      taskListNotStarted = _useState[0],\n      setTaskListNotStarted = _useState[1]; // 対応中のタスク\n\n\n  var _useState2 = useState([]),\n      taskListInProgress = _useState2[0],\n      setTaskListInProgress = _useState2[1]; // 対応済みのタスク\n\n\n  var _useState3 = useState([]),\n      taskListDone = _useState3[0],\n      setTaskListDone = _useState3[1];\n\n  useEffect(function () {\n    props.setInitDispFlg(false);\n    callGetTaskList();\n  }, [props.initDispFlg]);\n\n  var callGetTaskList = function callGetTaskList() {\n    var res = getTaskList();\n    res.then(function (ret) {\n      return setTaskListNotStarted(ret[0]);\n    });\n    res.then(function (ret) {\n      return setTaskListInProgress(ret[1]);\n    });\n    res.then(function (ret) {\n      return setTaskListDone(ret[2]);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.task_board,\n    children: /*#__PURE__*/_jsxDEV(DndProvider, {\n      backend: HTML5Backend,\n      children: [/*#__PURE__*/_jsxDEV(TaskList, {\n        taskList: taskListNotStarted,\n        status: 1,\n        setInitDispFlg: props.setInitDispFlg,\n        showTaskUpdateModal: props.showTaskUpdateModal,\n        showTaskCommentModal: props.showTaskCommentModal\n      }, \"TaskList1\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(TaskList, {\n        taskList: taskListInProgress,\n        status: 2,\n        setInitDispFlg: props.setInitDispFlg,\n        showTaskUpdateModal: props.showTaskUpdateModal,\n        showTaskCommentModal: props.showTaskCommentModal\n      }, \"TaskList2\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(TaskList, {\n        taskList: taskListDone,\n        status: 3,\n        setInitDispFlg: props.setInitDispFlg,\n        showTaskUpdateModal: props.showTaskUpdateModal,\n        showTaskCommentModal: props.showTaskCommentModal\n      }, \"TaskList3\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, _this);\n}; // 各apiを呼び出しタスクリストを取得する\n\n\n_s(TaskBoard, \"pDAInHP6qLJETjliz2NuWhtutT0=\");\n\n_c = TaskBoard;\n\nfunction getTaskList() {\n  return _getTaskList.apply(this, arguments);\n} // apiレスポンスからタスクリストを生成する\n\n\nfunction _getTaskList() {\n  _getTaskList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var client, listNotStarted, lisInProgress, listDone, resNotStarted, resInProgress, resDone;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            client = Axios.create({\n              withCredentials: true\n            });\n            listNotStarted = [];\n            lisInProgress = [];\n            listDone = [];\n            _context.prev = 4;\n            _context.next = 7;\n            return client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK + \"/1\");\n\n          case 7:\n            resNotStarted = _context.sent;\n            _context.next = 10;\n            return client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK + \"/2\");\n\n          case 10:\n            resInProgress = _context.sent;\n            _context.next = 13;\n            return client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK + \"/3\");\n\n          case 13:\n            resDone = _context.sent;\n            listNotStarted = createTaskList(resNotStarted.data);\n            lisInProgress = createTaskList(resInProgress.data);\n            listDone = createTaskList(resDone.data);\n            _context.next = 22;\n            break;\n\n          case 19:\n            _context.prev = 19;\n            _context.t0 = _context[\"catch\"](4);\n            Router.push('/Error?400');\n\n          case 22:\n            return _context.abrupt(\"return\", [listNotStarted, lisInProgress, listDone]);\n\n          case 23:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[4, 19]]);\n  }));\n  return _getTaskList.apply(this, arguments);\n}\n\nfunction createTaskList(responseData) {\n  var length = responseData.length;\n  var taskList = [];\n\n  for (var i = 0; i < length; i++) {\n    var taskCommentList = createTaskCommentList(responseData[i][\"comments\"]);\n    var task = new Task(responseData[i][\"id\"], responseData[i][\"task\"], responseData[i][\"description\"], responseData[i][\"priority\"], responseData[i][\"status\"], responseData[i][\"planDate\"], responseData[i][\"doneDate\"], taskCommentList);\n    taskList.push(task);\n  }\n\n  return taskList;\n}\n\nfunction createTaskCommentList(commentList) {\n  var taskCommentList = [];\n  console.log(commentList);\n\n  for (var i = 0; i < commentList.length; i++) {\n    taskCommentList.push(new TaskComment(commentList[i][\"id\"], commentList[i][\"taskId\"], commentList[i][\"username\"], commentList[i][\"comment\"], commentList[i][\"createDate\"]));\n  }\n\n  return taskCommentList;\n}\n\nexport default TaskBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskBoard\");","map":{"version":3,"sources":["/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/TaskBoard.tsx"],"names":["React","useState","useEffect","TaskList","Task","TaskComment","Router","Axios","styles","DndProvider","HTML5Backend","TaskBoard","props","taskListNotStarted","setTaskListNotStarted","taskListInProgress","setTaskListInProgress","taskListDone","setTaskListDone","setInitDispFlg","callGetTaskList","initDispFlg","res","getTaskList","then","ret","task_board","showTaskUpdateModal","showTaskCommentModal","client","create","withCredentials","listNotStarted","lisInProgress","listDone","get","process","env","NEXT_PUBLIC_API_SERVER","NEXT_PUBLIC_API_TASK","resNotStarted","resInProgress","resDone","createTaskList","data","push","responseData","length","taskList","i","taskCommentList","createTaskCommentList","task","commentList","console","log"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAA0CC,QAA1C,EAAoDC,SAApD,QAAoE,OAApE;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,IAAT,EAAeC,WAAf,QAAkC,aAAlC;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,SAASC,WAAT,QAA4B,WAA5B;AACA,SAAQC,YAAR,QAA2B,yBAA3B;;AAUA,IAAMC,SAAmC,GAAG,SAAtCA,SAAsC,CAACC,KAAD,EAAW;AAAA;;AACnD;AADmD,kBAECX,QAAQ,CAAS,EAAT,CAFT;AAAA,MAE5CY,kBAF4C;AAAA,MAExBC,qBAFwB,iBAGnD;;;AAHmD,mBAICb,QAAQ,CAAS,EAAT,CAJT;AAAA,MAI5Cc,kBAJ4C;AAAA,MAIxBC,qBAJwB,kBAKnD;;;AALmD,mBAMXf,QAAQ,CAAS,EAAT,CANG;AAAA,MAM5CgB,YAN4C;AAAA,MAM9BC,eAN8B;;AAQnDhB,EAAAA,SAAS,CAAC,YAAM;AACZU,IAAAA,KAAK,CAACO,cAAN,CAAqB,KAArB;AACAC,IAAAA,eAAe;AAClB,GAHQ,EAGN,CAACR,KAAK,CAACS,WAAP,CAHM,CAAT;;AAKA,MAAMD,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC1B,QAAIE,GAAsB,GAAGC,WAAW,EAAxC;AACAD,IAAAA,GAAG,CAACE,IAAJ,CAAS,UAAAC,GAAG;AAAA,aAAIX,qBAAqB,CAACW,GAAG,CAAC,CAAD,CAAJ,CAAzB;AAAA,KAAZ;AACAH,IAAAA,GAAG,CAACE,IAAJ,CAAS,UAAAC,GAAG;AAAA,aAAIT,qBAAqB,CAACS,GAAG,CAAC,CAAD,CAAJ,CAAzB;AAAA,KAAZ;AACAH,IAAAA,GAAG,CAACE,IAAJ,CAAS,UAAAC,GAAG;AAAA,aAAIP,eAAe,CAACO,GAAG,CAAC,CAAD,CAAJ,CAAnB;AAAA,KAAZ;AACH,GALD;;AAOA,sBACI;AAAK,IAAA,SAAS,EAAEjB,MAAM,CAACkB,UAAvB;AAAA,2BACI,QAAC,WAAD;AAAa,MAAA,OAAO,EAAEhB,YAAtB;AAAA,8BACI,QAAC,QAAD;AAAU,QAAA,QAAQ,EAAEG,kBAApB;AAAwC,QAAA,MAAM,EAAE,CAAhD;AAAmD,QAAA,cAAc,EAAED,KAAK,CAACO,cAAzE;AAAyF,QAAA,mBAAmB,EAAEP,KAAK,CAACe,mBAApH;AAAyI,QAAA,oBAAoB,EAAEf,KAAK,CAACgB;AAArK,SAA+L,WAA/L;AAAA;AAAA;AAAA;AAAA,eADJ,eAEI,QAAC,QAAD;AAAU,QAAA,QAAQ,EAAEb,kBAApB;AAAwC,QAAA,MAAM,EAAE,CAAhD;AAAmD,QAAA,cAAc,EAAEH,KAAK,CAACO,cAAzE;AAAyF,QAAA,mBAAmB,EAAEP,KAAK,CAACe,mBAApH;AAAyI,QAAA,oBAAoB,EAAEf,KAAK,CAACgB;AAArK,SAA+L,WAA/L;AAAA;AAAA;AAAA;AAAA,eAFJ,eAGI,QAAC,QAAD;AAAU,QAAA,QAAQ,EAAEX,YAApB;AAAkC,QAAA,MAAM,EAAE,CAA1C;AAA6C,QAAA,cAAc,EAAEL,KAAK,CAACO,cAAnE;AAAmF,QAAA,mBAAmB,EAAEP,KAAK,CAACe,mBAA9G;AAAmI,QAAA,oBAAoB,EAAEf,KAAK,CAACgB;AAA/J,SAAyL,WAAzL;AAAA;AAAA;AAAA;AAAA,eAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,WADJ;AASH,CA7BD,C,CA+BA;;;GA/BMjB,S;;KAAAA,S;;SAgCSY,W;;EAmBf;;;;0EAnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACQM,YAAAA,MADR,GACiBtB,KAAK,CAACuB,MAAN,CAAa;AAAEC,cAAAA,eAAe,EAAE;AAAnB,aAAb,CADjB;AAEQC,YAAAA,cAFR,GAEiC,EAFjC;AAGQC,YAAAA,aAHR,GAGgC,EAHhC;AAIQC,YAAAA,QAJR,GAI2B,EAJ3B;AAAA;AAAA;AAAA,mBAMoCL,MAAM,CAACM,GAAP,CAAWC,OAAO,CAACC,GAAR,CAAYC,sBAAZ,GAAqCF,OAAO,CAACC,GAAR,CAAYE,oBAAjD,GAAwE,IAAnF,CANpC;;AAAA;AAMcC,YAAAA,aANd;AAAA;AAAA,mBAOoCX,MAAM,CAACM,GAAP,CAAWC,OAAO,CAACC,GAAR,CAAYC,sBAAZ,GAAqCF,OAAO,CAACC,GAAR,CAAYE,oBAAjD,GAAwE,IAAnF,CAPpC;;AAAA;AAOcE,YAAAA,aAPd;AAAA;AAAA,mBAQ8BZ,MAAM,CAACM,GAAP,CAAWC,OAAO,CAACC,GAAR,CAAYC,sBAAZ,GAAqCF,OAAO,CAACC,GAAR,CAAYE,oBAAjD,GAAwE,IAAnF,CAR9B;;AAAA;AAQcG,YAAAA,OARd;AAUQV,YAAAA,cAAc,GAAGW,cAAc,CAACH,aAAa,CAACI,IAAf,CAA/B;AACAX,YAAAA,aAAa,GAAGU,cAAc,CAACF,aAAa,CAACG,IAAf,CAA9B;AACAV,YAAAA,QAAQ,GAAGS,cAAc,CAACD,OAAO,CAACE,IAAT,CAAzB;AAZR;AAAA;;AAAA;AAAA;AAAA;AAcQtC,YAAAA,MAAM,CAACuC,IAAP,CAAY,YAAZ;;AAdR;AAAA,6CAgBW,CAACb,cAAD,EAAiBC,aAAjB,EAAgCC,QAAhC,CAhBX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAoBA,SAASS,cAAT,CAAwBG,YAAxB,EAAoD;AAChD,MAAIC,MAAc,GAAGD,YAAY,CAACC,MAAlC;AACA,MAAIC,QAAgB,GAAG,EAAvB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAiBA,CAAC,GAAGF,MAArB,EAA8BE,CAAC,EAA/B,EAAmC;AAC/B,QAAIC,eAAe,GAAGC,qBAAqB,CAACL,YAAY,CAACG,CAAD,CAAZ,CAAgB,UAAhB,CAAD,CAA3C;AACA,QAAIG,IAAI,GAAG,IAAIhD,IAAJ,CAAS0C,YAAY,CAACG,CAAD,CAAZ,CAAgB,IAAhB,CAAT,EAAgCH,YAAY,CAACG,CAAD,CAAZ,CAAgB,MAAhB,CAAhC,EAAyDH,YAAY,CAACG,CAAD,CAAZ,CAAgB,aAAhB,CAAzD,EAAyFH,YAAY,CAACG,CAAD,CAAZ,CAAgB,UAAhB,CAAzF,EAAsHH,YAAY,CAACG,CAAD,CAAZ,CAAgB,QAAhB,CAAtH,EAAiJH,YAAY,CAACG,CAAD,CAAZ,CAAgB,UAAhB,CAAjJ,EAA8KH,YAAY,CAACG,CAAD,CAAZ,CAAgB,UAAhB,CAA9K,EAA2MC,eAA3M,CAAX;AACAF,IAAAA,QAAQ,CAACH,IAAT,CAAcO,IAAd;AACH;;AACD,SAAOJ,QAAP;AACH;;AACD,SAASG,qBAAT,CAA+BE,WAA/B,EAAkE;AAC9D,MAAIH,eAA8B,GAAG,EAArC;AAEAI,EAAAA,OAAO,CAACC,GAAR,CAAYF,WAAZ;;AACA,OAAK,IAAIJ,CAAC,GAAG,CAAb,EAAiBA,CAAC,GAAGI,WAAW,CAACN,MAAjC,EAA0CE,CAAC,EAA3C,EAA+C;AAC3CC,IAAAA,eAAe,CAACL,IAAhB,CAAqB,IAAIxC,WAAJ,CAAgBgD,WAAW,CAACJ,CAAD,CAAX,CAAe,IAAf,CAAhB,EAAsCI,WAAW,CAACJ,CAAD,CAAX,CAAe,QAAf,CAAtC,EAAgEI,WAAW,CAACJ,CAAD,CAAX,CAAe,UAAf,CAAhE,EAA4FI,WAAW,CAACJ,CAAD,CAAX,CAAe,SAAf,CAA5F,EAAuHI,WAAW,CAACJ,CAAD,CAAX,CAAe,YAAf,CAAvH,CAArB;AACH;;AACD,SAAOC,eAAP;AACH;;AAED,eAAevC,SAAf","sourcesContent":["import React, { Dispatch, SetStateAction, useState, useEffect} from 'react';\nimport TaskList from '../components/TaskList'\nimport { Task, TaskComment } from './interface';\nimport Router from 'next/router';\nimport Axios from \"axios\";\nimport styles from '../styles/TaskBoard.module.css';\nimport { DndProvider } from 'react-dnd';\nimport {HTML5Backend} from 'react-dnd-html5-backend';\nimport { createNotEmittedStatement } from 'typescript';\n\ninterface TaskBoardProps {\n    initDispFlg: Boolean;\n    setInitDispFlg: Dispatch<SetStateAction<Boolean>>;\n    showTaskUpdateModal: (Task) => void;\n    showTaskCommentModal: (Task) => void;\n}\n\nconst TaskBoard: React.FC<TaskBoardProps> = (props) => {\n    // 未対応のタスク\n    const [taskListNotStarted, setTaskListNotStarted] = useState<Task[]>([]);\n    // 対応中のタスク\n    const [taskListInProgress, setTaskListInProgress] = useState<Task[]>([]);\n    // 対応済みのタスク\n    const [taskListDone, setTaskListDone] = useState<Task[]>([]);\n\n    useEffect(() => {\n        props.setInitDispFlg(false);\n        callGetTaskList();\n    }, [props.initDispFlg]);\n\n    const callGetTaskList = () => {\n        var res: Promise<Task[][]> = getTaskList();\n        res.then(ret => setTaskListNotStarted(ret[0]));\n        res.then(ret => setTaskListInProgress(ret[1]));\n        res.then(ret => setTaskListDone(ret[2]));\n    }\n\n    return (\n        <div className={styles.task_board}>\n            <DndProvider backend={HTML5Backend}>\n                <TaskList taskList={taskListNotStarted} status={1} setInitDispFlg={props.setInitDispFlg} showTaskUpdateModal={props.showTaskUpdateModal} showTaskCommentModal={props.showTaskCommentModal} key=\"TaskList1\"/>\n                <TaskList taskList={taskListInProgress} status={2} setInitDispFlg={props.setInitDispFlg} showTaskUpdateModal={props.showTaskUpdateModal} showTaskCommentModal={props.showTaskCommentModal} key=\"TaskList2\" />\n                <TaskList taskList={taskListDone} status={3} setInitDispFlg={props.setInitDispFlg} showTaskUpdateModal={props.showTaskUpdateModal} showTaskCommentModal={props.showTaskCommentModal} key=\"TaskList3\" />\n            </DndProvider>\n        </div>\n    )\n}\n\n// 各apiを呼び出しタスクリストを取得する\nasync function getTaskList(){\n    let client = Axios.create({ withCredentials: true });\n    var listNotStarted :Task[] = [];\n    var lisInProgress :Task[] = [];\n    var listDone :Task[] = [];\n    try {\n        const resNotStarted = await client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK + \"/1\");\n        const resInProgress = await client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK + \"/2\");\n        const resDone = await client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK + \"/3\");\n\n        listNotStarted = createTaskList(resNotStarted.data);\n        lisInProgress = createTaskList(resInProgress.data);\n        listDone = createTaskList(resDone.data);\n    } catch(error){\n        Router.push('/Error?400');\n    }\n    return [listNotStarted, lisInProgress, listDone];\n}\n\n// apiレスポンスからタスクリストを生成する\nfunction createTaskList(responseData: any[]): Task[]{\n    let length: number = responseData.length;\n    var taskList :Task[] = [];\n    for (var i = 0 ; i < length ; i++) {\n        let taskCommentList = createTaskCommentList(responseData[i][\"comments\"])\n        let task = new Task(responseData[i][\"id\"], responseData[i][\"task\"], responseData[i][\"description\"], responseData[i][\"priority\"], responseData[i][\"status\"], responseData[i][\"planDate\"], responseData[i][\"doneDate\"], taskCommentList);\n        taskList.push(task);\n    }\n    return taskList;\n}\nfunction createTaskCommentList(commentList: any[]): TaskComment[] {\n    var taskCommentList :TaskComment[] = [];\n\n    console.log(commentList);\n    for (var i = 0 ; i < commentList.length ; i++) {\n        taskCommentList.push(new TaskComment(commentList[i][\"id\"], commentList[i][\"taskId\"], commentList[i][\"username\"], commentList[i][\"comment\"], commentList[i][\"createDate\"]))\n    }\n    return taskCommentList;\n}\n\nexport default TaskBoard;"]},"metadata":{},"sourceType":"module"}