{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/TaskCommentModal.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Modal, Button, Form, Row, Col } from 'react-bootstrap';\nimport Axios from \"axios\";\nimport Router from 'next/router';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport TaskComment from '../components/TaskComment';\nimport styles from '../styles/TaskComment.module.css';\nimport { TaskComment as TaskCommentClass } from './interface';\n\nvar TaskCommentModal = function TaskCommentModal(props) {\n  _s();\n\n  var _useState = useState(\"\"),\n      inputComment = _useState[0],\n      setInputComment = _useState[1];\n\n  var _useState2 = useState(props.task.comments),\n      comments = _useState2[0],\n      setComments = _useState2[1];\n\n  var _useState3 = useState(true),\n      initDispFlg = _useState3[0],\n      setInitDispFlg = _useState3[1];\n\n  useEffect(function () {\n    setInitDispFlg(false);\n    callGetTaskList();\n  }, [props.initDispFlg]); // cookieを使用するaxios生成\n\n  var client = Axios.create({\n    withCredentials: true\n  });\n\n  var handleChangeInputComment = function handleChangeInputComment() {\n    return function (e) {\n      return setInputComment(e.target.value);\n    };\n  };\n\n  var saveComment = function saveComment() {\n    var params = {\n      comment: inputComment\n    };\n    var jsonParams = JSON.stringify(params);\n    client.post(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK_COMMENT + props.task.id, jsonParams, {\n      headers: {\n        'content-type': 'application/json'\n      }\n    }).then(function (response) {\n      props.task.comments.unshift(new TaskCommentClass(response.data[\"id\"], response.data[\"taskId\"], response.data[\"username\"], response.data[\"comment\"], response.data[\"createDate\"]));\n      setComments(props.task.comments);\n      setInputComment(\"\");\n    })[\"catch\"](function () {\n      Router.push('/Error?400');\n    });\n  };\n\n  var clearInputComment = function clearInputComment() {\n    return setInputComment(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    show: true,\n    onHide: props.close,\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      closeButton: true,\n      children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n        children: \"Comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      children: [/*#__PURE__*/_jsxDEV(Form, {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            xs: 12,\n            className: \"modal_input\",\n            children: /*#__PURE__*/_jsxDEV(Form.Control, {\n              as: \"textarea\",\n              rows: 2,\n              value: inputComment,\n              onChange: handleChangeInputComment()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 25\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 21\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.task_comment_button_frame,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.task_comment_button,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"primary\",\n                className: \"button_sm\",\n                onClick: saveComment,\n                children: \"save\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 69\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 25\n            }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.task_comment_button,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outline-dark\",\n                className: \"button_sm\",\n                onClick: clearInputComment,\n                children: \"clear\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 69\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 25\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 21\n          }, _this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 21\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, _this), comments.map(function (taskComment, index) {\n        return /*#__PURE__*/_jsxDEV(TaskComment, {\n          index: index,\n          taskCommentList: comments,\n          setComments: setComments\n        }, \"taskComment\" + taskComment.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, _this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"dark\",\n        onClick: props.close,\n        className: \"button_sm\",\n        children: \"close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, _this)]\n  }, 'taskCommentModal', true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(TaskCommentModal, \"29o4B2K95wTpBDsYxGEJ/HtKnss=\");\n\n_c = TaskCommentModal;\nexport default TaskCommentModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskCommentModal\");","map":{"version":3,"sources":["/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/TaskCommentModal.tsx"],"names":["React","useState","useEffect","Modal","Button","Form","Row","Col","Axios","Router","TaskComment","styles","TaskCommentClass","TaskCommentModal","props","inputComment","setInputComment","task","comments","setComments","initDispFlg","setInitDispFlg","callGetTaskList","client","create","withCredentials","handleChangeInputComment","e","target","value","saveComment","params","comment","jsonParams","JSON","stringify","post","process","env","NEXT_PUBLIC_API_SERVER","NEXT_PUBLIC_API_TASK_COMMENT","id","headers","then","response","unshift","data","push","clearInputComment","close","task_comment_button_frame","task_comment_button","map","taskComment","index"],"mappings":"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","sourcesContent":["import React, { Dispatch, SetStateAction, useState, useEffect } from 'react';\nimport {Modal, Button, Form, Row, Col} from 'react-bootstrap';\nimport Axios from \"axios\";\nimport Router from 'next/router';\nimport { Task } from '../components/interface';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport TaskComment from '../components/TaskComment';\nimport styles from '../styles/TaskComment.module.css';\nimport { TaskComment as TaskCommentClass } from './interface';\n\ninterface TaskCommentModalProps {\n    close: () => void;\n    _setInitDispFlg: Dispatch<SetStateAction<Boolean>>;\n    task: Task;\n}\n\n\nconst TaskCommentModal: React.FC<TaskCommentModalProps> = (props) => {\n    const [inputComment, setInputComment] = useState<string>(\"\");\n    const [comments, setComments] = useState<TaskCommentClass[]>(props.task.comments);\n    const [initDispFlg, setInitDispFlg] = useState<boolean>(true);\n　　\n    useEffect(() => {\n        setInitDispFlg(false);\n        callGetTaskList();\n    }, [props.initDispFlg]);\n\n    // cookieを使用するaxios生成\n    let client = Axios.create({ withCredentials: true });\n  \n    const handleChangeInputComment = () => {\n        return e => setInputComment(e.target.value);\n    }\n\n    const saveComment = () => {\n        var params = {\n            comment: inputComment\n        }\n        var jsonParams = JSON.stringify(params);\n        client.post(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK_COMMENT + props.task.id\n            , jsonParams\n            , {headers: {'content-type': 'application/json'}})\n        .then( response => {\n            props.task.comments.unshift(\n                new TaskCommentClass(response.data[\"id\"], response.data[\"taskId\"], response.data[\"username\"], response.data[\"comment\"], response.data[\"createDate\"])\n            );\n            setComments(props.task.comments);\n            setInputComment(\"\");\n        }).catch(() => {\n            Router.push('/Error?400');\n        })\n    }\n\n    const clearInputComment = () => {\n        return setInputComment(\"\");\n    }\n\n    return (\n        <Modal show={true} onHide={props.close} key='taskCommentModal'>\n            <Modal.Header closeButton>\n                <Modal.Title>Comment</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n            <Form>\n                <Row>\n                    <Col xs={12} className=\"modal_input\">\n                        <Form.Control as=\"textarea\" rows={2} value={inputComment} onChange={handleChangeInputComment()}/>\n                    </Col>\n                    <div className={styles.task_comment_button_frame}>\n                        <div className={styles.task_comment_button}><Button variant=\"primary\" className=\"button_sm\" onClick={saveComment} >save</Button></div>\n                        <div className={styles.task_comment_button}><Button variant=\"outline-dark\" className=\"button_sm\" onClick={clearInputComment} >clear</Button></div>\n                    </div>\n                    <hr />\n                </Row>\n            </Form>\n            {\n                comments.map((taskComment, index) => (\n                    <TaskComment\n                        index={index}\n                        taskCommentList={comments}\n                        setComments={setComments}\n                        key={\"taskComment\" + taskComment.id}\n                    />\n                ))\n            }\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"dark\" onClick={props.close} className=\"button_sm\" >close</Button>\n            </Modal.Footer>\n        </Modal>\n    )\n}\n\nexport default TaskCommentModal;"]},"metadata":{},"sourceType":"module"}