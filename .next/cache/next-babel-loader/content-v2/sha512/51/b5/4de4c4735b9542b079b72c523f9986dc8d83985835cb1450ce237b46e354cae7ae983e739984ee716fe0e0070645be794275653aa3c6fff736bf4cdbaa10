{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState } from 'react';\nimport styles from '../../styles/DailyTaskItem.module.css';\nimport { Row, Col, Form, Button } from 'react-bootstrap';\nimport { DailyTask } from '../common/interface';\nimport * as NumberUtil from '../util/NumberUtil';\nimport * as ConversionUtil from '../util/ConversionUtil';\nimport { getApiClient } from '../util/AuthenticationUtil';\nimport Router from 'next/router';\n\nconst DailyTaskItem = props => {\n  const {\n    0: inputDoneTime,\n    1: setInputDoneTime\n  } = useState(\"\");\n  const quota = NumberUtil.convertHourMinute(props.dailyTask.quota);\n  const done = NumberUtil.convertHourMinute(props.dailyTask.doneTime);\n  const remaining = NumberUtil.convertRemaining(props.dailyTask.quota, props.dailyTask.doneTime);\n  const taskStatus = ConversionUtil.conversionStatusByTime(props.dailyTask.quota, props.dailyTask.doneTime, props.dailyTask.deleteFlg);\n  var taskStatusStr = props.dailyTask.deleteFlg == 1 ? \"【\" + taskStatus.str + \"】\" : \"\";\n  var taskStatusColor = taskStatus.color; // cookieを使用するaxios生成\n\n  let client = getApiClient();\n\n  const saveDoneTime = () => {\n    if (!NumberUtil.isNumber(inputDoneTime)) {\n      setInputDoneTime(\"\");\n      return;\n    }\n\n    var params = {\n      daily_task_id: props.dailyTask.id,\n      done_time: inputDoneTime,\n      quota: props.dailyTask.quota\n    };\n    var jsonParams = JSON.stringify(params);\n    setInputDoneTime(\"\");\n    client.post(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_DAILY_TASK_HISTORY, jsonParams, {\n      headers: {\n        'content-type': 'application/json'\n      }\n    }).then(() => {\n      props.setInitDispFlg(true);\n    }).catch(() => {\n      Router.push('/Error?400');\n    });\n  };\n\n  const handleChangeInputDoneTime = () => {\n    return e => {\n      setInputDoneTime(e.target.value);\n    };\n  };\n\n  const deleteDailyTask = e => {\n    if (confirm(\"Do you want to delete it?\")) {\n      client.delete(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_DAILY_TASK + \"/\" + props.dailyTask.id).then(() => {\n        props.setInitDispFlg(true);\n      }).catch(() => {\n        Router.push('/Error?400');\n      });\n    }\n\n    e.stopPropagation();\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: styles.daily_task_item + \" \" + taskStatusColor,\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: styles.title,\n      onClick: () => props.showDailyTaskEditModal(props.dailyTask),\n      children: [props.dailyTask.title, taskStatusStr, props.dailyTask.deleteFlg == 1 && /*#__PURE__*/_jsx(\"p\", {\n        className: styles.icon,\n        children: /*#__PURE__*/_jsx(\"i\", {\n          onClick: deleteDailyTask,\n          className: \"fa fa-trash faa-wrench animated-hover\"\n        })\n      })]\n    }), /*#__PURE__*/_jsxs(Row, {\n      children: [/*#__PURE__*/_jsxs(Col, {\n        xs: 2,\n        className: styles.quota_label,\n        children: [\"Quota: \", quota]\n      }), /*#__PURE__*/_jsxs(Col, {\n        xs: 2,\n        className: styles.label,\n        children: [\"Done: \", done]\n      }), /*#__PURE__*/_jsxs(Col, {\n        xs: 3,\n        className: styles.label,\n        children: [\"Remaining: \", remaining]\n      }), /*#__PURE__*/_jsxs(Col, {\n        xs: 5,\n        children: [\"logged:\", /*#__PURE__*/_jsx(Form.Control, {\n          type: \"text\",\n          value: inputDoneTime,\n          className: styles.done_time_textbox,\n          onChange: handleChangeInputDoneTime(),\n          disabled: props.dailyTask.deleteFlg == 1\n        }), \" m\", /*#__PURE__*/_jsx(Button, {\n          variant: \"primary\",\n          className: styles.done_time_button,\n          onClick: saveDoneTime,\n          children: \"Done\"\n        })]\n      })]\n    })]\n  });\n};\n\nexport default DailyTaskItem;","map":null,"metadata":{},"sourceType":"module"}