{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState, useEffect } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { TaskGraph as TaskGraphClass } from '../common/interface';\nimport Router from 'next/router';\nimport { getApiClient } from '../util/AuthenticationUtil';\n\nconst TaskGraph = props => {\n  // 未対応のタスク\n  const {\n    0: planTaskGraphList,\n    1: setPlanTaskGraphList\n  } = useState([]); // 対応中のタスク\n\n  const {\n    0: doneTaskGraphList,\n    1: setDoneTaskGraphList\n  } = useState([]); // 対応済みのタスク\n\n  const {\n    0: commentGraphList,\n    1: setCommentGraphList\n  } = useState([]);\n  useEffect(() => {\n    callGetTaskGraphInfo();\n  }, []);\n\n  const callGetTaskGraphInfo = () => {\n    var res = getTaskGraphInfo();\n    res.then(ret => setPlanTaskGraphList(ret[0]));\n    res.then(ret => setDoneTaskGraphList(ret[1]));\n    res.then(ret => setCommentGraphList(ret[2]));\n  };\n\n  let planTaskGraphLabel = [];\n  planTaskGraphList.map(taskGraph => planTaskGraphLabel.push(taskGraph.date));\n  let planTaskGraphDataSet = [];\n  planTaskGraphList.map(taskGraph => planTaskGraphDataSet.push(taskGraph.count));\n  const planTaskGraphData = {\n    labels: planTaskGraphLabel,\n    datasets: [{\n      data: planTaskGraphDataSet,\n      backgroundColor: 'rgba(30, 144, 255, 1)',\n      label: '完了予定タスク(件数)'\n    }]\n  };\n  let doneTaskGraphLabel = [];\n  doneTaskGraphList.map(taskGraph => doneTaskGraphLabel.push(taskGraph.date));\n  let doneTaskGraphDataSet = [];\n  doneTaskGraphList.map(taskGraph => doneTaskGraphDataSet.push(taskGraph.count));\n  const doneTaskGraphData = {\n    labels: doneTaskGraphLabel,\n    datasets: [{\n      data: doneTaskGraphDataSet,\n      backgroundColor: 'rgba(255, 200, 0, 1)',\n      label: '完了タスク(件数)'\n    }]\n  };\n  console.log(\"done\");\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [\"\\u25A0\\u65E5\\u6BCE\\u306E\\u5B8C\\u4E86\\u4E88\\u5B9A\\u30BF\\u30B9\\u30AF\\u6570\", /*#__PURE__*/_jsx(Bar, {\n      type: \"\",\n      data: planTaskGraphData,\n      options: {}\n    }), /*#__PURE__*/_jsx(\"br\", {}), \"\\u25A0\\u65E5\\u6BCE\\u306E\\u5B8C\\u4E86\\u30BF\\u30B9\\u30AF\\u6570\", /*#__PURE__*/_jsx(Bar, {\n      type: \"\",\n      data: doneTaskGraphData,\n      options: {}\n    })]\n  });\n};\n\nasync function getTaskGraphInfo() {\n  let client = getApiClient();\n  var planTaskGraphList = [];\n  var doneTaskGraphList = [];\n  var commentGraphList = [];\n\n  try {\n    const taskGraphInfo = await client.get(process.env.NEXT_PUBLIC_API_TASK_GRAPH);\n    planTaskGraphList = createTaskGraphList(taskGraphInfo.data[\"planTask\"]);\n    doneTaskGraphList = createTaskGraphList(taskGraphInfo.data[\"doneTask\"]);\n    commentGraphList = createTaskGraphList(taskGraphInfo.data[\"comment\"]);\n  } catch (error) {\n    Router.push('/Error?400');\n  }\n\n  return [planTaskGraphList, doneTaskGraphList, commentGraphList];\n} // apiレスポンスからタスクリストを生成する\n\n\nfunction createTaskGraphList(responseData) {\n  let length = responseData.length;\n  var taskGraphList = [];\n\n  for (var i = 0; i < length; i++) {\n    let taskGraph = new TaskGraphClass(responseData[i][\"date\"], responseData[i][\"count\"]);\n    taskGraphList.push(taskGraph);\n  }\n\n  return taskGraphList;\n}\n\nexport default TaskGraph;","map":null,"metadata":{},"sourceType":"module"}