{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/TaskList.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport TaskItem from '../components/TaskItem';\nimport styles from '../styles/TaskList.module.css';\nimport { Task } from './interface';\nimport { Draggable } from 'react-beautiful-dnd';\n\nconst TaskList = props => {\n  var status_str = conversionStatus(props.status);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.task_list,\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: styles.task_status,\n      children: [status_str, \" [\", Object.keys(props.taskList).length, \"]\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this), props.taskList.map(task_item => /*#__PURE__*/_jsxDEV(Draggable, {\n      draggableId: \"draggableId\" + task_item.id,\n      index: task_item.id,\n      children: provided => /*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread(_objectSpread({\n        style: provided.draggableProps.style,\n        ref: provided.innerRef\n      }, provided.draggableProps), provided.dragHandleProps), {}, {\n        children: /*#__PURE__*/_jsxDEV(TaskItem, {\n          task: task_item,\n          setInitDispFlg: props.setInitDispFlg,\n          show: props.show\n        }, \"TaskItem\" + task_item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 33\n        }, this)\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 29\n      }, this)\n    }, \"draggableKey\" + task_item.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 21\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 9\n  }, this);\n};\n\nfunction conversionStatus(status) {\n  var str;\n\n  switch (status) {\n    case \"1\":\n      str = 'NOT STARTED';\n      break;\n\n    case \"2\":\n      str = 'IN PROGRESS';\n      break;\n\n    case \"3\":\n      str = 'DONE';\n      break;\n  }\n\n  return str;\n}\n\nexport default TaskList;","map":{"version":3,"sources":["/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/TaskList.tsx"],"names":["React","TaskItem","styles","Task","Draggable","TaskList","props","status_str","conversionStatus","status","task_list","task_status","Object","keys","taskList","length","map","task_item","id","provided","draggableProps","style","innerRef","dragHandleProps","setInitDispFlg","show","str"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAiD,OAAjD;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,MAAP,MAAmB,+BAAnB;AACA,SAASC,IAAT,QAAqB,aAArB;AACA,SAA0BC,SAA1B,QAAsD,qBAAtD;;AASA,MAAMC,QAAiC,GAAIC,KAAD,IAAW;AACjD,MAAIC,UAAU,GAAGC,gBAAgB,CAACF,KAAK,CAACG,MAAP,CAAjC;AACA,sBACI;AAAK,IAAA,SAAS,EAAEP,MAAM,CAACQ,SAAvB;AAAA,4BACI;AAAG,MAAA,SAAS,EAAER,MAAM,CAACS,WAArB;AAAA,iBAAmCJ,UAAnC,QAAiDK,MAAM,CAACC,IAAP,CAAYP,KAAK,CAACQ,QAAlB,EAA4BC,MAA7E;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAGQT,KAAK,CAACQ,QAAN,CAAeE,GAAf,CAAmBC,SAAS,iBACxB,QAAC,SAAD;AAA+C,MAAA,WAAW,EAAE,gBAAgBA,SAAS,CAACC,EAAtF;AAA0F,MAAA,KAAK,EAAED,SAAS,CAACC,EAA3G;AAAA,gBACMC,QAAD,iBACG;AACI,QAAA,KAAK,EAAEA,QAAQ,CAACC,cAAT,CAAwBC,KADnC;AAEI,QAAA,GAAG,EAAEF,QAAQ,CAACG;AAFlB,SAGQH,QAAQ,CAACC,cAHjB,GAIQD,QAAQ,CAACI,eAJjB;AAAA,+BAMI,QAAC,QAAD;AACI,UAAA,IAAI,EAAEN,SADV;AAEI,UAAA,cAAc,EAAEX,KAAK,CAACkB,cAF1B;AAGI,UAAA,IAAI,EAAElB,KAAK,CAACmB;AAHhB,WAIS,aAAaR,SAAS,CAACC,EAJhC;AAAA;AAAA;AAAA;AAAA;AANJ;AAAA;AAAA;AAAA;AAAA;AAFR,OAAgB,iBAAiBD,SAAS,CAACC,EAA3C;AAAA;AAAA;AAAA;AAAA,YADJ,CAHR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA0BH,CA5BD;;AA8BA,SAASV,gBAAT,CAA0BC,MAA1B,EAAyC;AACrC,MAAIiB,GAAJ;;AACA,UAAOjB,MAAP;AACI,SAAK,GAAL;AACIiB,MAAAA,GAAG,GAAG,aAAN;AACA;;AACJ,SAAK,GAAL;AACIA,MAAAA,GAAG,GAAG,aAAN;AACA;;AACJ,SAAK,GAAL;AACIA,MAAAA,GAAG,GAAG,MAAN;AACA;AATR;;AAWA,SAAOA,GAAP;AACH;;AAED,eAAerB,QAAf","sourcesContent":["import React , { Dispatch, SetStateAction } from 'react';\nimport TaskItem from '../components/TaskItem';\nimport styles from '../styles/TaskList.module.css';\nimport { Task } from './interface';\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\n\ninterface TaskListProps {\n    taskList: Task[];\n    status: string;\n    setInitDispFlg: Dispatch<SetStateAction<Boolean>>;\n    show: (Task) => void;\n}\n\nconst TaskList: React.FC<TaskListProps> = (props) => {\n    var status_str = conversionStatus(props.status);\n    return (\n        <div className={styles.task_list}>\n            <p className={styles.task_status}>{status_str} [{Object.keys(props.taskList).length}]</p>\n            {\n                props.taskList.map(task_item => (\n                    <Draggable key={\"draggableKey\" + task_item.id} draggableId={\"draggableId\" + task_item.id} index={task_item.id}>\n                        {(provided) => (\n                            <div\n                                style={provided.draggableProps.style}\n                                ref={provided.innerRef}\n                                {...provided.draggableProps}\n                                {...provided.dragHandleProps}\n                            >\n                                <TaskItem\n                                    task={task_item}\n                                    setInitDispFlg={props.setInitDispFlg}\n                                    show={props.show}\n                                    key={\"TaskItem\" + task_item.id}\n                                />\n                            </div>\n                        )}\n                    </Draggable>\n                ))\n            }\n        </div>\n    )\n}\n\nfunction conversionStatus(status: string){\n    var str: string;\n    switch(status) {\n        case \"1\":\n            str = 'NOT STARTED';\n            break;\n        case \"2\":\n            str = 'IN PROGRESS';\n            break;\n        case \"3\":\n            str = 'DONE';\n            break;\n    }\n    return str;\n}\n\nexport default TaskList;"]},"metadata":{},"sourceType":"module"}