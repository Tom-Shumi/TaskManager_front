{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shumiya/Desktop/dev/react/shumipro_front/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/shumiya/Desktop/dev/react/shumipro_front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState } from 'react';\nimport Layout from '../components/common/Layout';\nimport TaskBoard from '../components/TaskBoard/TaskBoard';\nimport TaskEditModal from '../components/TaskBoard/TaskEditModal';\nimport TaskCommentModal from '../components/TaskBoard/TaskCommentModal';\nimport { authentication } from '../components/util/AuthenticationUtil';\nimport dynamic from \"next/dynamic\";\nimport { Button } from 'react-bootstrap';\n\nvar Task = function Task() {\n  // タスク作成モーダル表示フラグ\n  var _useState = useState(false),\n      taskCreateModalDispFlg = _useState[0],\n      setTaskCreateModalDispFlg = _useState[1]; // タスク更新モーダル表示フラグ\n\n\n  var _useState2 = useState(false),\n      taskUpdateModalDispFlg = _useState2[0],\n      setTaskUpdateModalDispFlg = _useState2[1]; // タスクコメントモーダル表示フラグ\n\n\n  var _useState3 = useState(false),\n      taskCommentModalDispFlg = _useState3[0],\n      setTaskCommentModalDispFlg = _useState3[1]; // 初期表示フラグ\n\n\n  var _useState4 = useState(true),\n      initDispFlg = _useState4[0],\n      setInitDispFlg = _useState4[1]; // 編集対象タスク\n\n\n  var _useState5 = useState(null),\n      targetTask = _useState5[0],\n      setTargetTask = _useState5[1];\n\n  authentication();\n\n  var showTaskCreateModal = function showTaskCreateModal(task) {\n    setTargetTask(task);\n    setTaskCreateModalDispFlg(true);\n  };\n\n  var closeTaskCreateModal = function closeTaskCreateModal() {\n    setTaskCreateModalDispFlg(false);\n  };\n\n  var showTaskUpdateModal = function showTaskUpdateModal(task) {\n    setTargetTask(task);\n    setTaskUpdateModalDispFlg(true);\n  };\n\n  var closeTaskUpdateModal = function closeTaskUpdateModal() {\n    setTaskUpdateModalDispFlg(false);\n  };\n\n  var showTaskCommentModal = function showTaskCommentModal(task) {\n    setTargetTask(task);\n    setTaskCommentModalDispFlg(true);\n  };\n\n  var closeTaskCommentModal = function closeTaskCommentModal() {\n    setTaskCommentModalDispFlg(false);\n  };\n\n  return /*#__PURE__*/_jsxs(Layout, {\n    title: \"Task Board.\",\n    children: [/*#__PURE__*/_jsx(Button, {\n      variant: \"primary\",\n      className: \"button_md\",\n      onClick: function onClick() {\n        return showTaskCreateModal(null);\n      },\n      children: \"Create Task\"\n    }, \"create\"), /*#__PURE__*/_jsx(TaskBoard, {\n      initDispFlg: initDispFlg,\n      setInitDispFlg: setInitDispFlg,\n      showTaskUpdateModal: showTaskUpdateModal,\n      showTaskCommentModal: showTaskCommentModal\n    }), taskCreateModalDispFlg && /*#__PURE__*/_jsx(TaskEditModal, {\n      close: closeTaskCreateModal,\n      execSbt: \"1\",\n      setInitDispFlg: setInitDispFlg,\n      task: targetTask\n    }), taskUpdateModalDispFlg && /*#__PURE__*/_jsx(TaskEditModal, {\n      close: closeTaskUpdateModal,\n      execSbt: \"2\",\n      setInitDispFlg: setInitDispFlg,\n      task: targetTask\n    }), taskCommentModalDispFlg && /*#__PURE__*/_jsx(TaskCommentModal, {\n      close: closeTaskCommentModal,\n      task: targetTask\n    })]\n  });\n};\n\nvar DynamicTask = dynamic({\n  loader: function () {\n    var _loader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", Task);\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function loader() {\n      return _loader.apply(this, arguments);\n    }\n\n    return loader;\n  }()\n}, {\n  ssr: false\n});\nexport default DynamicTask;","map":null,"metadata":{},"sourceType":"module"}