{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/DailyTaskHistory/DailyTaskHistoryBoard.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport DailyTaskHistoryList from './DailyTaskHistoryList';\nimport { DailyTaskHistory } from '../common/interface';\nimport { getApiClient } from '../util/AuthenticationUtil';\nimport Router from 'next/router';\nimport * as DatePickerUtil from '../util/DatePickerUtil';\nimport styles from '../../styles/DailyTaskHistoryBoard.module.css';\n\nconst DailyTaskHistoryBoard = props => {\n  const {\n    0: dailyTaskHistoryList,\n    1: setDailyTaskHistoryList\n  } = useState([]);\n  useEffect(() => {\n    callGetDailyTaskHistoryList();\n  }, []);\n\n  const callGetDailyTaskHistoryList = () => {\n    var res = getDailyTaskHistoryList(props.targetDate);\n    res.then(ret => {\n      setDailyTaskHistoryList(ret);\n    });\n  };\n\n  const loadNextHistory = () => {\n    let nextTargetDate = new Date(props.targetDate);\n    nextTargetDate.setDate(nextTargetDate.getDate() - 5);\n\n    try {\n      getApiClient().get(process.env.NEXT_PUBLIC_API_DAILY_TASK_HISTORY, {\n        params: {\n          nextTargetDate: DatePickerUtil.dateStrYYYYMMDD(nextTargetDate)\n        }\n      }).then(res => {\n        let taskCommentList = createDailyTaskHistoryList(res.data);\n        setDailyTaskHistoryList([...dailyTaskHistoryList, ...taskCommentList]);\n        props.setTargetDate(nextTargetDate);\n      });\n    } catch (error) {\n      Router.push('/Error?400');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(DailyTaskHistoryList, {\n      dailyTaskHistoryList: dailyTaskHistoryList,\n      targetDate: props.targetDate\n    }, \"DailyTaskHistoryList\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.daily_task_history_load,\n      onClick: loadNextHistory,\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fa fa-arrow-circle-down faa-wrench animated-hover\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 87\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n\nasync function getDailyTaskHistoryList(date) {\n  let dateStr = DatePickerUtil.dateStrYYYYMMDD(date);\n  var dailyTaskHistoryList = new Array();\n\n  try {\n    const res = await getApiClient().get(process.env.NEXT_PUBLIC_API_DAILY_TASK_HISTORY, {\n      params: {\n        nextTargetDate: dateStr\n      }\n    });\n    dailyTaskHistoryList = createDailyTaskHistoryList(res.data);\n  } catch (error) {\n    Router.push('/Error?400');\n  }\n\n  return dailyTaskHistoryList;\n}\n\nfunction createDailyTaskHistoryList(responseData) {\n  let outerLength = responseData.length;\n  var dailyTaskHistoryList = [];\n\n  for (var i = 0; i < outerLength; i++) {\n    let tempList = responseData[i];\n    let innerLength = tempList.length;\n    dailyTaskHistoryList[i] = new Array();\n\n    for (var j = 0; j < innerLength; j++) {\n      let dailyTaskHistory = new DailyTaskHistory(responseData[i][j][\"dailyTaskId\"], responseData[i][j][\"title\"], responseData[i][j][\"doneDate\"], responseData[i][j][\"doneTime\"], responseData[i][j][\"quota\"], responseData[i][j][\"doneFlg\"]);\n      dailyTaskHistoryList[i].push(dailyTaskHistory);\n    }\n  }\n\n  return dailyTaskHistoryList;\n}\n\nexport default DailyTaskHistoryBoard;","map":{"version":3,"sources":["/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/DailyTaskHistory/DailyTaskHistoryBoard.tsx"],"names":["React","useState","useEffect","DailyTaskHistoryList","DailyTaskHistory","getApiClient","Router","DatePickerUtil","styles","DailyTaskHistoryBoard","props","dailyTaskHistoryList","setDailyTaskHistoryList","callGetDailyTaskHistoryList","res","getDailyTaskHistoryList","targetDate","then","ret","loadNextHistory","nextTargetDate","Date","setDate","getDate","get","process","env","NEXT_PUBLIC_API_DAILY_TASK_HISTORY","params","dateStrYYYYMMDD","taskCommentList","createDailyTaskHistoryList","data","setTargetDate","error","push","daily_task_history_load","date","dateStr","Array","responseData","outerLength","length","i","tempList","innerLength","j","dailyTaskHistory"],"mappings":"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","sourcesContent":["import React, { Dispatch, SetStateAction, useState, useEffect} from 'react';\nimport DailyTaskHistoryList from './DailyTaskHistoryList';\nimport { DailyTaskHistory } from '../common/interface';\nimport {getApiClient} from '../util/AuthenticationUtil';\nimport Router from 'next/router';\nimport * as DatePickerUtil from '../util/DatePickerUtil';\nimport styles from '../../styles/DailyTaskHistoryBoard.module.css';\n\n\ninterface DailyTaskHistoryBoardProps {\n    targetDate: Date;\n    setTargetDate: Dispatch<SetStateAction<Date>>;\n}\n\nconst DailyTaskHistoryBoard: React.FC<DailyTaskHistoryBoardProps> = (props) => {\n    const [dailyTaskHistoryList, setDailyTaskHistoryList] = useState<DailyTaskHistory[][]>([]);\n\n    useEffect(() => {\n        callGetDailyTaskHistoryList();\n    }, []);\n\n    const callGetDailyTaskHistoryList = () => {\n        var res: Promise<DailyTaskHistory[][]> = getDailyTaskHistoryList(props.targetDate);\n        res.then(ret => {\n            setDailyTaskHistoryList(ret);\n        });\n    }\n\n    const loadNextHistory = () => {\n        let nextTargetDate = new Date(props.targetDate)\n        nextTargetDate.setDate(nextTargetDate.getDate() - 5)\n\n        try {\n\n            getApiClient().get(process.env.NEXT_PUBLIC_API_DAILY_TASK_HISTORY, {\n                params: {\n                    nextTargetDate: DatePickerUtil.dateStrYYYYMMDD(nextTargetDate)\n                }\n            }).then(res => {\n                let taskCommentList = createDailyTaskHistoryList(res.data);\n                setDailyTaskHistoryList([...dailyTaskHistoryList, ...taskCommentList])\n                props.setTargetDate(nextTargetDate)\n            })\n        } catch(error){\n            Router.push('/Error?400');\n        }\n    }\n\n    return (\n        <div>\n            <DailyTaskHistoryList \n                key=\"DailyTaskHistoryList\"\n                dailyTaskHistoryList={dailyTaskHistoryList}\n                targetDate={props.targetDate}\n            />\n\n            <div className={styles.daily_task_history_load} onClick={loadNextHistory}><i className=\"fa fa-arrow-circle-down faa-wrench animated-hover\" /></div>\n        </div>\n    )\n}\n\nasync function getDailyTaskHistoryList(date: Date){\n    let dateStr = DatePickerUtil.dateStrYYYYMMDD(date)\n    var dailyTaskHistoryList : DailyTaskHistory[][] = new Array();\n\n    try {\n        const res = await getApiClient().get(process.env.NEXT_PUBLIC_API_DAILY_TASK_HISTORY, {\n            params: {\n                nextTargetDate: dateStr\n            }\n        });\n        dailyTaskHistoryList = createDailyTaskHistoryList(res.data);\n    } catch(error){\n        Router.push('/Error?400');\n    }\n    return dailyTaskHistoryList;\n}\n\nfunction createDailyTaskHistoryList(responseData: any[]): DailyTaskHistory[][]{\n\n    let outerLength: number = responseData.length;\n    var dailyTaskHistoryList :DailyTaskHistory[][] = [];\n\n    for (var i = 0; i < outerLength; i++) {\n\n        let tempList = responseData[i]\n        let innerLength = tempList.length;\n\n        dailyTaskHistoryList[i] = new Array();\n\n        for (var j = 0; j < innerLength; j++) {\n\n            let dailyTaskHistory = new DailyTaskHistory(responseData[i][j][\"dailyTaskId\"], responseData[i][j][\"title\"],\n            responseData[i][j][\"doneDate\"], responseData[i][j][\"doneTime\"], responseData[i][j][\"quota\"], responseData[i][j][\"doneFlg\"]);\n\n            dailyTaskHistoryList[i].push(dailyTaskHistory);\n        }\n    }\n    return dailyTaskHistoryList;\n}\n\nexport default DailyTaskHistoryBoard;"]},"metadata":{},"sourceType":"module"}