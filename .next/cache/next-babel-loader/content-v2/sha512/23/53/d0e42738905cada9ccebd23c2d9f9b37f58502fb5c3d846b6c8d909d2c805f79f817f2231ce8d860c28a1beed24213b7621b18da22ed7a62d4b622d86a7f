{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"/Users/shumiya/Desktop/dev/react/shumipro_front/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/TaskBoard/TaskList.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport TaskItem from './TaskItem';\nimport styles from '../styles/TaskList.module.css';\nimport { ItemTypes, Task } from '../common/interface';\nimport { useDrop } from 'react-dnd';\nimport { getApiClient } from '../util/AuthenticationUtil';\nimport Router from 'next/router';\nimport * as ConversionUtil from '../util/ConversionUtil';\n\nvar TaskList = function TaskList(props) {\n  _s();\n\n  // cookieを使用するaxios生成\n  var client = getApiClient();\n\n  var updateTaskStatus = function updateTaskStatus(id, status) {\n    var params = {\n      status: status\n    };\n    var jsonParams = JSON.stringify(params);\n    client.put(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK + \"/status/\" + id, jsonParams, {\n      headers: {\n        'content-type': 'application/json'\n      }\n    }).then(function (response) {\n      props.setInitDispFlg(true);\n    })[\"catch\"](function () {\n      Router.push('/Error?400');\n    });\n  };\n\n  var _useDrop = useDrop({\n    accept: ItemTypes.TASK_ITEM,\n    drop: function drop(dragItem) {\n      updateTaskStatus(dragItem.id, props.status);\n    },\n    collect: function collect(monitor) {\n      return {\n        isOver: !!monitor.isOver()\n      };\n    }\n  }),\n      _useDrop2 = _slicedToArray(_useDrop, 2),\n      isOver = _useDrop2[0].isOver,\n      drop = _useDrop2[1];\n\n  var status_str = ConversionUtil.conversionStatus(props.status);\n  var style_is_over = isOver ? \"is_over\" : \"is_not_over\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.task_list + \" \" + style_is_over,\n    ref: drop,\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: styles.task_status,\n      children: [status_str, \" [ \", Object.keys(props.taskList).length, \" ]\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, _this), props.taskList.map(function (taskItem) {\n      return /*#__PURE__*/_jsxDEV(TaskItem, {\n        task: taskItem,\n        setInitDispFlg: props.setInitDispFlg,\n        showTaskUpdateModal: props.showTaskUpdateModal,\n        showTaskCommentModal: props.showTaskCommentModal\n      }, \"TaskItem\" + taskItem.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }, _this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(TaskList, \"J1zlkivqRCGcJFAnPMhlnYWlWR0=\", false, function () {\n  return [useDrop];\n});\n\n_c = TaskList;\nexport default TaskList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"sources":["/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/TaskBoard/TaskList.tsx"],"names":["React","TaskItem","styles","ItemTypes","Task","useDrop","getApiClient","Router","ConversionUtil","TaskList","props","client","updateTaskStatus","id","status","params","jsonParams","JSON","stringify","put","process","env","NEXT_PUBLIC_API_SERVER","NEXT_PUBLIC_API_TASK","headers","then","response","setInitDispFlg","push","accept","TASK_ITEM","drop","dragItem","collect","monitor","isOver","status_str","conversionStatus","style_is_over","task_list","task_status","Object","keys","taskList","length","map","taskItem","showTaskUpdateModal","showTaskCommentModal"],"mappings":"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","sourcesContent":["import React , { Dispatch, SetStateAction } from 'react';\nimport TaskItem from './TaskItem';\nimport styles from '../styles/TaskList.module.css';\nimport { ItemTypes, Task } from '../common/interface';\nimport { useDrop } from 'react-dnd';\nimport {getApiClient} from '../util/AuthenticationUtil';\nimport Router from 'next/router';\nimport * as ConversionUtil from '../util/ConversionUtil';\n\ninterface TaskListProps {\n    taskList: Task[];\n    status: number;\n    setInitDispFlg: Dispatch<SetStateAction<Boolean>>;\n    showTaskUpdateModal: (Task) => void;\n    showTaskCommentModal: (Task) => void;\n}\n\nconst TaskList: React.FC<TaskListProps> = (props) => {\n\n    // cookieを使用するaxios生成\n    let client = getApiClient();\n\n    const updateTaskStatus = (id: number, status: number) => {\n        var params = {\n            status: status\n        }\n        var jsonParams = JSON.stringify(params);\n\n        client.put(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK + \"/status/\" + id\n            , jsonParams\n            , {headers: {'content-type': 'application/json'}}\n        ).then( response => {\n            props.setInitDispFlg(true);\n        }).catch(() => {\n            Router.push('/Error?400');\n        })\n    }\n\n    const [{isOver}, drop] = useDrop({\n        accept: ItemTypes.TASK_ITEM,\n        drop: (dragItem: any) => {\n            updateTaskStatus(dragItem.id, props.status);\n        },\n        collect: monitor => ({\n            isOver: !!monitor.isOver()\n        })\n    })\n\n    var status_str = ConversionUtil.conversionStatus(props.status);\n    var style_is_over = isOver ? \"is_over\" : \"is_not_over\"; \n    return (\n        <div className={styles.task_list + \" \" +  style_is_over} ref={drop}>\n            <p className={styles.task_status}>{status_str} [ {Object.keys(props.taskList).length} ]</p>\n            {\n                props.taskList.map(taskItem => (\n                    <TaskItem\n                        task={taskItem}\n                        setInitDispFlg={props.setInitDispFlg}\n                        showTaskUpdateModal={props.showTaskUpdateModal}\n                        showTaskCommentModal={props.showTaskCommentModal}\n                        key={\"TaskItem\" + taskItem.id}\n                    />\n                ))\n            }\n        </div>\n    )\n}\n\nexport default TaskList;"]},"metadata":{},"sourceType":"module"}