{"ast":null,"code":"import _regeneratorRuntime from \"/app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _toConsumableArray from \"/app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport React, { useState, useEffect } from 'react';\nimport { Modal, Button, Form, Row, Col } from 'react-bootstrap';\nimport { getApiClient } from '../util/AuthenticationUtil';\nimport Router from 'next/router';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport TaskComment from './TaskComment';\nimport styles from '../../styles/TaskComment.module.css';\nimport { TaskComment as TaskCommentClass } from '../common/interface';\n\nvar TaskCommentModal = function TaskCommentModal(props) {\n  var _useState = useState(\"\"),\n      inputComment = _useState[0],\n      setInputComment = _useState[1];\n\n  var _useState2 = useState([]),\n      comments = _useState2[0],\n      setComments = _useState2[1];\n\n  var _useState3 = useState(true),\n      initDispFlg = _useState3[0],\n      setInitDispFlg = _useState3[1];\n\n  useEffect(function () {\n    setInitDispFlg(false);\n    clearInputComment();\n    callGetTaskCommentList();\n  }, [initDispFlg]); // cookieを使用するaxios生成\n\n  var client = getApiClient();\n\n  var callGetTaskCommentList = function callGetTaskCommentList() {\n    var res = getTaskCommentList(props.task.id);\n    res.then(function (ret) {\n      return setComments(ret);\n    });\n  };\n\n  var handleChangeInputComment = function handleChangeInputComment() {\n    return function (e) {\n      return setInputComment(e.target.value);\n    };\n  };\n\n  var saveComment = function saveComment() {\n    var params = {\n      comment: inputComment\n    };\n    var jsonParams = JSON.stringify(params);\n    client.post(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK_COMMENT + '/' + props.task.id, jsonParams, {\n      headers: {\n        'content-type': 'application/json'\n      }\n    }).then(function (response) {\n      setInitDispFlg(true);\n    })[\"catch\"](function () {\n      Router.push('/Error?400');\n    });\n  };\n\n  var clearInputComment = function clearInputComment() {\n    return setInputComment(\"\");\n  };\n\n  var loadNextComment = function loadNextComment() {\n    var maxCommentId = comments[comments.length - 1].id;\n\n    try {\n      client.get(\"\".concat(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK_COMMENT, \"/\").concat(props.task.id, \"?nextKey=\").concat(maxCommentId)).then(function (res) {\n        var taskCommentList = createTaskCommentList(res.data);\n        setComments([].concat(_toConsumableArray(comments), _toConsumableArray(taskCommentList)));\n      });\n    } catch (error) {\n      Router.push('/Error?400');\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(Modal, {\n    show: true,\n    onHide: props.close,\n    children: [/*#__PURE__*/_jsx(Modal.Header, {\n      closeButton: true,\n      children: /*#__PURE__*/_jsx(Modal.Title, {\n        children: \"Comment\"\n      })\n    }), /*#__PURE__*/_jsxs(Modal.Body, {\n      children: [/*#__PURE__*/_jsx(Form, {\n        children: /*#__PURE__*/_jsxs(Row, {\n          children: [/*#__PURE__*/_jsx(Col, {\n            xs: 12,\n            className: \"modal_input\",\n            children: /*#__PURE__*/_jsx(Form.Control, {\n              as: \"textarea\",\n              rows: 2,\n              value: inputComment,\n              onChange: handleChangeInputComment()\n            })\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: styles.task_comment_button_frame,\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              className: styles.task_comment_button,\n              children: /*#__PURE__*/_jsx(Button, {\n                variant: \"primary\",\n                className: \"button_sm\",\n                onClick: saveComment,\n                children: \"save\"\n              })\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: styles.task_comment_button,\n              children: /*#__PURE__*/_jsx(Button, {\n                variant: \"outline-dark\",\n                className: \"button_sm\",\n                onClick: clearInputComment,\n                children: \"clear\"\n              })\n            })]\n          }), /*#__PURE__*/_jsx(\"hr\", {})]\n        })\n      }), comments.map(function (taskComment) {\n        return /*#__PURE__*/_jsx(TaskComment, {\n          taskComment: taskComment,\n          setInitDispFlg: setInitDispFlg\n        }, \"taskComment\" + taskComment.id);\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: styles.task_comment_load,\n        onClick: loadNextComment,\n        children: /*#__PURE__*/_jsx(\"i\", {\n          className: \"fa fa-arrow-circle-down faa-wrench animated-hover\"\n        })\n      })]\n    }), /*#__PURE__*/_jsx(Modal.Footer, {\n      children: /*#__PURE__*/_jsx(Button, {\n        variant: \"dark\",\n        onClick: props.close,\n        className: \"button_sm\",\n        children: \"close\"\n      })\n    })]\n  }, 'taskCommentModal');\n}; // 各apiを呼び出しタスクコメントリストを取得する\n\n\nfunction getTaskCommentList(_x) {\n  return _getTaskCommentList.apply(this, arguments);\n}\n\nfunction _getTaskCommentList() {\n  _getTaskCommentList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(taskId) {\n    var client, taskCommentList, res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            client = getApiClient();\n            taskCommentList = [];\n            _context.prev = 2;\n            _context.next = 5;\n            return client.get(\"\".concat(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK_COMMENT, \"/\").concat(taskId));\n\n          case 5:\n            res = _context.sent;\n            taskCommentList = createTaskCommentList(res.data);\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](2);\n            Router.push('/Error?400');\n\n          case 12:\n            return _context.abrupt(\"return\", taskCommentList);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 9]]);\n  }));\n  return _getTaskCommentList.apply(this, arguments);\n}\n\nfunction createTaskCommentList(commentList) {\n  var taskCommentList = [];\n\n  if (commentList == null) {\n    return taskCommentList;\n  }\n\n  for (var i = 0; i < commentList.length; i++) {\n    taskCommentList.push(new TaskCommentClass(commentList[i][\"id\"], commentList[i][\"taskId\"], commentList[i][\"username\"], commentList[i][\"comment\"], commentList[i][\"createDate\"]));\n  }\n\n  return taskCommentList;\n}\n\nexport default TaskCommentModal;","map":null,"metadata":{},"sourceType":"module"}