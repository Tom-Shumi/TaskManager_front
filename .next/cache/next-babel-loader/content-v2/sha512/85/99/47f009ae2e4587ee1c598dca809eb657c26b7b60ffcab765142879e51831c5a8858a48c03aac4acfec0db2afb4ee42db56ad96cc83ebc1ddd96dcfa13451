{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shumiya/Desktop/dev/react/shumipro_front/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/shumiya/Desktop/dev/react/shumipro_front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/TaskBoard.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Task } from './interface';\nimport Router from 'next/router';\nimport Axios from \"axios\";\nimport { useState } from \"react\";\n\nvar TaskBoard = function TaskBoard(props) {\n  _s();\n\n  var _useState = useState(null),\n      taskListNotStarted = _useState[0],\n      setTaskListNotStarted = _useState[1];\n\n  var _useState2 = useState(null),\n      taskListInProgress = _useState2[0],\n      setTaskListInProgress = _useState2[1];\n\n  var _useState3 = useState(null),\n      taskListDone = _useState3[0],\n      setTaskListDone = _useState3[1]; // let client = Axios.create({ withCredentials: true });\n  // const gettaskListNotStarted = client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK + \"/1\")\n  //     .then(response => {\n  //         tempTaskListNotStarted = createTaskList(response.data);\n  //     }).catch(() => {\n  //         Router.push('/Error?400');\n  //     }); \n\n\n  getTaskList();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(TaskBoard, \"lE4QWCAAbjmKZ2J+2xu8/2axYDk=\");\n\n_c = TaskBoard;\n\nfunction getTaskList() {\n  return _getTaskList.apply(this, arguments);\n}\n\nfunction _getTaskList() {\n  _getTaskList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var client, listNotStarted, lisInProgress, listDone, resNotStarted, resInProgress, resDone;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            client = Axios.create({\n              withCredentials: true\n            });\n            listNotStarted = [];\n            lisInProgress = [];\n            listDone = [];\n            _context.prev = 4;\n            _context.next = 7;\n            return client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK + \"/1\");\n\n          case 7:\n            resNotStarted = _context.sent;\n            _context.next = 10;\n            return client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK + \"/2\");\n\n          case 10:\n            resInProgress = _context.sent;\n            _context.next = 13;\n            return client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK + \"/3\");\n\n          case 13:\n            resDone = _context.sent;\n            listNotStarted = createTaskList(resNotStarted.data);\n            lisInProgress = createTaskList(resInProgress.data);\n            listDone = createTaskList(resDone.data);\n            _context.next = 22;\n            break;\n\n          case 19:\n            _context.prev = 19;\n            _context.t0 = _context[\"catch\"](4);\n            Router.push('/Error?400');\n\n          case 22:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[4, 19]]);\n  }));\n  return _getTaskList.apply(this, arguments);\n}\n\nfunction createTaskList(responseData) {\n  var length = responseData.length;\n  var taskList = [];\n\n  for (var i = 0; i < length; i++) {\n    var task = new Task(responseData[i][\"task\"], responseData[i][\"description\"], responseData[i][\"priority\"]);\n    taskList.push(task);\n  }\n\n  return taskList;\n}\n\nexport default TaskBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskBoard\");","map":{"version":3,"sources":["/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/TaskBoard.tsx"],"names":["React","Task","Router","Axios","useState","TaskBoard","props","taskListNotStarted","setTaskListNotStarted","taskListInProgress","setTaskListInProgress","taskListDone","setTaskListDone","getTaskList","client","create","withCredentials","listNotStarted","lisInProgress","listDone","get","process","env","NEXT_PUBLIC_API_SERVER","NEXT_PUBLIC_API_TASK","resNotStarted","resInProgress","resDone","createTaskList","data","push","responseData","length","taskList","i","task"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,IAAT,QAAqB,aAArB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAMA,IAAMC,SAAmC,GAAG,SAAtCA,SAAsC,CAACC,KAAD,EAAW;AAAA;;AAAA,kBACCF,QAAQ,CAAS,IAAT,CADT;AAAA,MAC5CG,kBAD4C;AAAA,MACxBC,qBADwB;;AAAA,mBAECJ,QAAQ,CAAS,IAAT,CAFT;AAAA,MAE5CK,kBAF4C;AAAA,MAExBC,qBAFwB;;AAAA,mBAGXN,QAAQ,CAAS,IAAT,CAHG;AAAA,MAG5CO,YAH4C;AAAA,MAG9BC,eAH8B,kBAMnD;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEAC,EAAAA,WAAW;AACX,sBACI;AAAK,IAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,WADJ;AAOH,CAvBD;;GAAMR,S;;KAAAA,S;;SAyBSQ,W;;;;;0EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,YAAAA,MADR,GACiBX,KAAK,CAACY,MAAN,CAAa;AAAEC,cAAAA,eAAe,EAAE;AAAnB,aAAb,CADjB;AAEQC,YAAAA,cAFR,GAEiC,EAFjC;AAGQC,YAAAA,aAHR,GAGgC,EAHhC;AAIQC,YAAAA,QAJR,GAI2B,EAJ3B;AAAA;AAAA;AAAA,mBAMoCL,MAAM,CAACM,GAAP,CAAWC,OAAO,CAACC,GAAR,CAAYC,sBAAZ,GAAqCF,OAAO,CAACC,GAAR,CAAYE,oBAAjD,GAAwE,IAAnF,CANpC;;AAAA;AAMcC,YAAAA,aANd;AAAA;AAAA,mBAOoCX,MAAM,CAACM,GAAP,CAAWC,OAAO,CAACC,GAAR,CAAYC,sBAAZ,GAAqCF,OAAO,CAACC,GAAR,CAAYE,oBAAjD,GAAwE,IAAnF,CAPpC;;AAAA;AAOcE,YAAAA,aAPd;AAAA;AAAA,mBAQ8BZ,MAAM,CAACM,GAAP,CAAWC,OAAO,CAACC,GAAR,CAAYC,sBAAZ,GAAqCF,OAAO,CAACC,GAAR,CAAYE,oBAAjD,GAAwE,IAAnF,CAR9B;;AAAA;AAQcG,YAAAA,OARd;AAUQV,YAAAA,cAAc,GAAGW,cAAc,CAACH,aAAa,CAACI,IAAf,CAA/B;AACAX,YAAAA,aAAa,GAAGU,cAAc,CAACF,aAAa,CAACG,IAAf,CAA9B;AACAV,YAAAA,QAAQ,GAAGS,cAAc,CAACD,OAAO,CAACE,IAAT,CAAzB;AAZR;AAAA;;AAAA;AAAA;AAAA;AAcQ3B,YAAAA,MAAM,CAAC4B,IAAP,CAAY,YAAZ;;AAdR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAkBA,SAASF,cAAT,CAAwBG,YAAxB,EAAoD;AAChD,MAAIC,MAAc,GAAGD,YAAY,CAACC,MAAlC;AACA,MAAIC,QAAgB,GAAG,EAAvB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAiBA,CAAC,GAAGF,MAArB,EAA8BE,CAAC,EAA/B,EAAmC;AAC/B,QAAIC,IAAI,GAAG,IAAIlC,IAAJ,CAAS8B,YAAY,CAACG,CAAD,CAAZ,CAAgB,MAAhB,CAAT,EAAkCH,YAAY,CAACG,CAAD,CAAZ,CAAgB,aAAhB,CAAlC,EAAkEH,YAAY,CAACG,CAAD,CAAZ,CAAgB,UAAhB,CAAlE,CAAX;AACAD,IAAAA,QAAQ,CAACH,IAAT,CAAcK,IAAd;AACH;;AACD,SAAOF,QAAP;AACH;;AAED,eAAe5B,SAAf","sourcesContent":["import React from 'react';\nimport TaskList from '../components/TaskList'\nimport { Task } from './interface';\nimport Router from 'next/router';\nimport Axios from \"axios\";\nimport { useState } from \"react\";\n\ninterface TaskBoardProps {\n\n}\n\nconst TaskBoard: React.FC<TaskBoardProps> = (props) => {\n    const [taskListNotStarted, setTaskListNotStarted] = useState<Task[]>(null);\n    const [taskListInProgress, setTaskListInProgress] = useState<Task[]>(null);\n    const [taskListDone, setTaskListDone] = useState<Task[]>(null);\n\n\n    // let client = Axios.create({ withCredentials: true });\n\n    // const gettaskListNotStarted = client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK + \"/1\")\n    //     .then(response => {\n    //         tempTaskListNotStarted = createTaskList(response.data);\n    //     }).catch(() => {\n    //         Router.push('/Error?400');\n    //     }); \n\n    getTaskList()\n    return (\n        <div className=\"\">\n            {/* <TaskList taskList={taskListNotStarted} status=\"1\" />\n            <TaskList taskList={taskListInProgress} status=\"2\" />\n            <TaskList taskList={taskListDone} status=\"3\" /> */}\n        </div>\n    )\n}\n\nasync function getTaskList(){\n    let client = Axios.create({ withCredentials: true });\n    var listNotStarted :Task[] = [];\n    var lisInProgress :Task[] = [];\n    var listDone :Task[] = [];\n    try {\n        const resNotStarted = await client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK + \"/1\");\n        const resInProgress = await client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK + \"/2\");\n        const resDone = await client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK + \"/3\");\n\n        listNotStarted = createTaskList(resNotStarted.data);\n        lisInProgress = createTaskList(resInProgress.data);\n        listDone = createTaskList(resDone.data);\n    } catch(error){\n        Router.push('/Error?400');\n    }\n}\n\nfunction createTaskList(responseData: any[]): Task[]{\n    let length: number = responseData.length;\n    var taskList :Task[] = [];\n    for (var i = 0 ; i < length ; i++) {\n        let task = new Task(responseData[i][\"task\"], responseData[i][\"description\"], responseData[i][\"priority\"]);\n        taskList.push(task);\n    }\n    return taskList;\n}\n\nexport default TaskBoard;"]},"metadata":{},"sourceType":"module"}