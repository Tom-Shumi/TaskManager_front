{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState, useEffect } from 'react';\nimport TaskList from './TaskList';\nimport { Task } from '../common/interface';\nimport Router from 'next/router';\nimport styles from '../../styles/TaskBoard.module.css';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport { getApiClient } from '../util/AuthenticationUtil';\n\nconst TaskBoard = props => {\n  // 未対応のタスク\n  const {\n    0: taskListNotStarted,\n    1: setTaskListNotStarted\n  } = useState([]); // 対応中のタスク\n\n  const {\n    0: taskListInProgress,\n    1: setTaskListInProgress\n  } = useState([]); // 対応済みのタスク\n\n  const {\n    0: taskListDone,\n    1: setTaskListDone\n  } = useState([]);\n  useEffect(() => {\n    props.setInitDispFlg(false);\n    callGetTaskList();\n  }, [props.initDispFlg]);\n\n  const callGetTaskList = () => {\n    var res = getTaskList();\n    res.then(ret => setTaskListNotStarted(ret[0]));\n    res.then(ret => setTaskListInProgress(ret[1]));\n    res.then(ret => setTaskListDone(ret[2]));\n  };\n\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: styles.task_board,\n    children: /*#__PURE__*/_jsxs(DndProvider, {\n      backend: HTML5Backend,\n      children: [/*#__PURE__*/_jsx(TaskList, {\n        taskList: taskListNotStarted,\n        status: 1,\n        setInitDispFlg: props.setInitDispFlg,\n        showTaskUpdateModal: props.showTaskUpdateModal,\n        showTaskCommentModal: props.showTaskCommentModal\n      }, \"TaskList1\"), /*#__PURE__*/_jsx(TaskList, {\n        taskList: taskListInProgress,\n        status: 2,\n        setInitDispFlg: props.setInitDispFlg,\n        showTaskUpdateModal: props.showTaskUpdateModal,\n        showTaskCommentModal: props.showTaskCommentModal\n      }, \"TaskList2\"), /*#__PURE__*/_jsx(TaskList, {\n        taskList: taskListDone,\n        status: 3,\n        setInitDispFlg: props.setInitDispFlg,\n        showTaskUpdateModal: props.showTaskUpdateModal,\n        showTaskCommentModal: props.showTaskCommentModal\n      }, \"TaskList3\")]\n    })\n  });\n}; // 各apiを呼び出しタスクリストを取得する\n\n\nasync function getTaskList() {\n  var listNotStarted = [];\n  var lisInProgress = [];\n  var listDone = [];\n\n  try {\n    const resNotStarted = await getApiClient().get(process.env.NEXT_PUBLIC_API_TASK + \"/1\");\n    const resInProgress = await getApiClient().get(process.env.NEXT_PUBLIC_API_TASK + \"/2\");\n    const resDone = await getApiClient().get(process.env.NEXT_PUBLIC_API_TASK + \"/3\");\n    listNotStarted = createTaskList(resNotStarted.data);\n    lisInProgress = createTaskList(resInProgress.data);\n    listDone = createTaskList(resDone.data);\n  } catch (error) {\n    Router.push('/Error?400');\n  }\n\n  return [listNotStarted, lisInProgress, listDone];\n} // apiレスポンスからタスクリストを生成する\n\n\nfunction createTaskList(responseData) {\n  let length = responseData.length;\n  var taskList = [];\n\n  for (var i = 0; i < length; i++) {\n    let task = new Task(responseData[i][\"id\"], responseData[i][\"task\"], responseData[i][\"description\"], responseData[i][\"priority\"], responseData[i][\"status\"], responseData[i][\"planDate\"], responseData[i][\"doneDate\"], []);\n    taskList.push(task);\n  }\n\n  return taskList;\n}\n\nexport default TaskBoard;","map":null,"metadata":{},"sourceType":"module"}