{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/TaskList.tsx\";\nimport React from 'react';\nimport TaskItem from '../components/TaskItem';\nimport styles from '../styles/TaskList.module.css';\nimport { ItemTypes, Task } from './interface';\nimport { useDrop } from 'react-dnd';\n\nconst TaskList = props => {\n  const [{\n    isOver\n  }, drop] = useDrop({\n    accept: ItemTypes.TASK_ITEM,\n    drop: () => console.log(\"drop\"),\n    collect: monitor => ({\n      isOver: !!monitor.isOver()\n    })\n  });\n  var status_str = conversionStatus(props.status);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.task_list,\n    ref: drop,\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: styles.task_status,\n      children: [status_str, \" [\", Object.keys(props.taskList).length, \"]\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), props.taskList.map(task_item => /*#__PURE__*/_jsxDEV(TaskItem, {\n      task: task_item,\n      setInitDispFlg: props.setInitDispFlg,\n      show: props.show\n    }, \"TaskItem\" + task_item.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 21\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n\nfunction conversionStatus(status) {\n  var str;\n\n  switch (status) {\n    case \"1\":\n      str = 'NOT STARTED';\n      break;\n\n    case \"2\":\n      str = 'IN PROGRESS';\n      break;\n\n    case \"3\":\n      str = 'DONE';\n      break;\n  }\n\n  return str;\n}\n\nexport default TaskList;","map":{"version":3,"sources":["/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/TaskList.tsx"],"names":["React","TaskItem","styles","ItemTypes","Task","useDrop","TaskList","props","isOver","drop","accept","TASK_ITEM","console","log","collect","monitor","status_str","conversionStatus","status","task_list","task_status","Object","keys","taskList","length","map","task_item","setInitDispFlg","show","id","str"],"mappings":";;AAAA,OAAOA,KAAP,MAAiD,OAAjD;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,MAAP,MAAmB,+BAAnB;AACA,SAASC,SAAT,EAAoBC,IAApB,QAAgC,aAAhC;AACA,SAASC,OAAT,QAAwB,WAAxB;;AASA,MAAMC,QAAiC,GAAIC,KAAD,IAAW;AAEjD,QAAM,CAAC;AAACC,IAAAA;AAAD,GAAD,EAAWC,IAAX,IAAmBJ,OAAO,CAAC;AAC7BK,IAAAA,MAAM,EAAEP,SAAS,CAACQ,SADW;AAE7BF,IAAAA,IAAI,EAAE,MAAMG,OAAO,CAACC,GAAR,CAAY,MAAZ,CAFiB;AAG7BC,IAAAA,OAAO,EAAEC,OAAO,KAAK;AACjBP,MAAAA,MAAM,EAAE,CAAC,CAACO,OAAO,CAACP,MAAR;AADO,KAAL;AAHa,GAAD,CAAhC;AAQA,MAAIQ,UAAU,GAAGC,gBAAgB,CAACV,KAAK,CAACW,MAAP,CAAjC;AACA,sBACI;AAAK,IAAA,SAAS,EAAEhB,MAAM,CAACiB,SAAvB;AAAkC,IAAA,GAAG,EAAEV,IAAvC;AAAA,4BACI;AAAG,MAAA,SAAS,EAAEP,MAAM,CAACkB,WAArB;AAAA,iBAAmCJ,UAAnC,QAAiDK,MAAM,CAACC,IAAP,CAAYf,KAAK,CAACgB,QAAlB,EAA4BC,MAA7E;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAGQjB,KAAK,CAACgB,QAAN,CAAeE,GAAf,CAAmBC,SAAS,iBACxB,QAAC,QAAD;AACI,MAAA,IAAI,EAAEA,SADV;AAEI,MAAA,cAAc,EAAEnB,KAAK,CAACoB,cAF1B;AAGI,MAAA,IAAI,EAAEpB,KAAK,CAACqB;AAHhB,OAIS,aAAaF,SAAS,CAACG,EAJhC;AAAA;AAAA;AAAA;AAAA,YADJ,CAHR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH,CA1BD;;AA4BA,SAASZ,gBAAT,CAA0BC,MAA1B,EAAyC;AACrC,MAAIY,GAAJ;;AACA,UAAOZ,MAAP;AACI,SAAK,GAAL;AACIY,MAAAA,GAAG,GAAG,aAAN;AACA;;AACJ,SAAK,GAAL;AACIA,MAAAA,GAAG,GAAG,aAAN;AACA;;AACJ,SAAK,GAAL;AACIA,MAAAA,GAAG,GAAG,MAAN;AACA;AATR;;AAWA,SAAOA,GAAP;AACH;;AAED,eAAexB,QAAf","sourcesContent":["import React , { Dispatch, SetStateAction } from 'react';\nimport TaskItem from '../components/TaskItem';\nimport styles from '../styles/TaskList.module.css';\nimport { ItemTypes, Task } from './interface';\nimport { useDrop } from 'react-dnd'\n\ninterface TaskListProps {\n    taskList: Task[];\n    status: string;\n    setInitDispFlg: Dispatch<SetStateAction<Boolean>>;\n    show: (Task) => void;\n}\n\nconst TaskList: React.FC<TaskListProps> = (props) => {\n\n    const [{isOver}, drop] = useDrop({\n        accept: ItemTypes.TASK_ITEM,\n        drop: () => console.log(\"drop\"),\n        collect: monitor => ({\n            isOver: !!monitor.isOver()\n        })\n    })\n\n    var status_str = conversionStatus(props.status);\n    return (\n        <div className={styles.task_list} ref={drop}>\n            <p className={styles.task_status}>{status_str} [{Object.keys(props.taskList).length}]</p>\n            {\n                props.taskList.map(task_item => (\n                    <TaskItem\n                        task={task_item}\n                        setInitDispFlg={props.setInitDispFlg}\n                        show={props.show}\n                        key={\"TaskItem\" + task_item.id}\n                    />\n                ))\n            }\n        </div>\n    )\n}\n\nfunction conversionStatus(status: string){\n    var str: string;\n    switch(status) {\n        case \"1\":\n            str = 'NOT STARTED';\n            break;\n        case \"2\":\n            str = 'IN PROGRESS';\n            break;\n        case \"3\":\n            str = 'DONE';\n            break;\n    }\n    return str;\n}\n\nexport default TaskList;"]},"metadata":{},"sourceType":"module"}