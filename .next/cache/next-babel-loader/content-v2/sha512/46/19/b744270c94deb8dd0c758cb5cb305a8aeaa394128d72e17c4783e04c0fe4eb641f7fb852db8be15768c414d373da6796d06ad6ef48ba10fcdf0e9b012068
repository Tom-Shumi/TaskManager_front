{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/TaskList.tsx\";\nimport React from 'react';\nimport TaskItem from '../components/TaskItem';\nimport styles from '../styles/TaskList.module.css';\nimport { ItemTypes, Task } from './interface';\nimport { useDrop } from 'react-dnd';\nimport Axios from \"axios\";\nimport Router from 'next/router';\n\nconst TaskList = props => {\n  // cookieを使用するaxios生成\n  let client = Axios.create({\n    withCredentials: true\n  });\n\n  const updateTaskStatus = e => {\n    client.put(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK + \"/\" + \"\").then(response => {\n      props.setInitDispFlg(true);\n    }).catch(() => {\n      Router.push('/Error?400');\n    });\n    e.stopPropagation();\n  };\n\n  const [{\n    isOver\n  }, drop] = useDrop({\n    accept: ItemTypes.TASK_ITEM,\n    drop: (dragItem, test) => console.log(test),\n    collect: monitor => ({\n      isOver: !!monitor.isOver()\n    })\n  });\n  var status_str = conversionStatus(props.status);\n  var style_is_over = isOver ? \"is_over\" : \"is_not_over\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.task_list + \" \" + style_is_over,\n    ref: drop,\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: styles.task_status,\n      children: [status_str, \" [\", Object.keys(props.taskList).length, \"]\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), props.taskList.map(task_item => /*#__PURE__*/_jsxDEV(TaskItem, {\n      task: task_item,\n      setInitDispFlg: props.setInitDispFlg,\n      show: props.show\n    }, \"TaskItem\" + task_item.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 21\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n\nfunction conversionStatus(status) {\n  var str;\n\n  switch (status) {\n    case \"1\":\n      str = 'NOT STARTED';\n      break;\n\n    case \"2\":\n      str = 'IN PROGRESS';\n      break;\n\n    case \"3\":\n      str = 'DONE';\n      break;\n  }\n\n  return str;\n}\n\nexport default TaskList;","map":{"version":3,"sources":["/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/TaskList.tsx"],"names":["React","TaskItem","styles","ItemTypes","Task","useDrop","Axios","Router","TaskList","props","client","create","withCredentials","updateTaskStatus","e","put","process","env","NEXT_PUBLIC_API_SERVER","NEXT_PUBLIC_API_TASK","then","response","setInitDispFlg","catch","push","stopPropagation","isOver","drop","accept","TASK_ITEM","dragItem","test","console","log","collect","monitor","status_str","conversionStatus","status","style_is_over","task_list","task_status","Object","keys","taskList","length","map","task_item","show","id","str"],"mappings":";;AAAA,OAAOA,KAAP,MAAiD,OAAjD;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,MAAP,MAAmB,+BAAnB;AACA,SAASC,SAAT,EAAoBC,IAApB,QAAgC,aAAhC;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;;AASA,MAAMC,QAAiC,GAAIC,KAAD,IAAW;AAEjD;AACA,MAAIC,MAAM,GAAGJ,KAAK,CAACK,MAAN,CAAa;AAAEC,IAAAA,eAAe,EAAE;AAAnB,GAAb,CAAb;;AAEA,QAAMC,gBAAgB,GAAIC,CAAD,IAAO;AAC5BJ,IAAAA,MAAM,CAACK,GAAP,CAAWC,OAAO,CAACC,GAAR,CAAYC,sBAAZ,GAAqCF,OAAO,CAACC,GAAR,CAAYE,oBAAjD,GAAwE,GAAxE,GAA8E,EAAzF,EACCC,IADD,CACOC,QAAQ,IAAI;AACfZ,MAAAA,KAAK,CAACa,cAAN,CAAqB,IAArB;AACH,KAHD,EAGGC,KAHH,CAGS,MAAM;AACXhB,MAAAA,MAAM,CAACiB,IAAP,CAAY,YAAZ;AACH,KALD;AAMAV,IAAAA,CAAC,CAACW,eAAF;AACH,GARD;;AAUA,QAAM,CAAC;AAACC,IAAAA;AAAD,GAAD,EAAWC,IAAX,IAAmBtB,OAAO,CAAC;AAC7BuB,IAAAA,MAAM,EAAEzB,SAAS,CAAC0B,SADW;AAE7BF,IAAAA,IAAI,EAAE,CAACG,QAAD,EAAWC,IAAX,KAAoBC,OAAO,CAACC,GAAR,CAAYF,IAAZ,CAFG;AAG7BG,IAAAA,OAAO,EAAEC,OAAO,KAAK;AACjBT,MAAAA,MAAM,EAAE,CAAC,CAACS,OAAO,CAACT,MAAR;AADO,KAAL;AAHa,GAAD,CAAhC;AAQA,MAAIU,UAAU,GAAGC,gBAAgB,CAAC5B,KAAK,CAAC6B,MAAP,CAAjC;AACA,MAAIC,aAAa,GAAGb,MAAM,GAAG,SAAH,GAAe,aAAzC;AACA,sBACI;AAAK,IAAA,SAAS,EAAExB,MAAM,CAACsC,SAAP,GAAmB,GAAnB,GAA0BD,aAA1C;AAAyD,IAAA,GAAG,EAAEZ,IAA9D;AAAA,4BACI;AAAG,MAAA,SAAS,EAAEzB,MAAM,CAACuC,WAArB;AAAA,iBAAmCL,UAAnC,QAAiDM,MAAM,CAACC,IAAP,CAAYlC,KAAK,CAACmC,QAAlB,EAA4BC,MAA7E;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAGQpC,KAAK,CAACmC,QAAN,CAAeE,GAAf,CAAmBC,SAAS,iBACxB,QAAC,QAAD;AACI,MAAA,IAAI,EAAEA,SADV;AAEI,MAAA,cAAc,EAAEtC,KAAK,CAACa,cAF1B;AAGI,MAAA,IAAI,EAAEb,KAAK,CAACuC;AAHhB,OAIS,aAAaD,SAAS,CAACE,EAJhC;AAAA;AAAA;AAAA;AAAA,YADJ,CAHR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH,CAxCD;;AA0CA,SAASZ,gBAAT,CAA0BC,MAA1B,EAAyC;AACrC,MAAIY,GAAJ;;AACA,UAAOZ,MAAP;AACI,SAAK,GAAL;AACIY,MAAAA,GAAG,GAAG,aAAN;AACA;;AACJ,SAAK,GAAL;AACIA,MAAAA,GAAG,GAAG,aAAN;AACA;;AACJ,SAAK,GAAL;AACIA,MAAAA,GAAG,GAAG,MAAN;AACA;AATR;;AAWA,SAAOA,GAAP;AACH;;AAED,eAAe1C,QAAf","sourcesContent":["import React , { Dispatch, SetStateAction } from 'react';\nimport TaskItem from '../components/TaskItem';\nimport styles from '../styles/TaskList.module.css';\nimport { ItemTypes, Task } from './interface';\nimport { useDrop } from 'react-dnd';\nimport Axios from \"axios\";\nimport Router from 'next/router';\n\ninterface TaskListProps {\n    taskList: Task[];\n    status: string;\n    setInitDispFlg: Dispatch<SetStateAction<Boolean>>;\n    show: (Task) => void;\n}\n\nconst TaskList: React.FC<TaskListProps> = (props) => {\n\n    // cookieを使用するaxios生成\n    let client = Axios.create({ withCredentials: true });\n\n    const updateTaskStatus = (e) => {\n        client.put(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK + \"/\" + \"\")\n        .then( response => {\n            props.setInitDispFlg(true);\n        }).catch(() => {\n            Router.push('/Error?400');\n        })\n        e.stopPropagation();\n    }\n\n    const [{isOver}, drop] = useDrop({\n        accept: ItemTypes.TASK_ITEM,\n        drop: (dragItem, test) => console.log(test),\n        collect: monitor => ({\n            isOver: !!monitor.isOver()\n        })\n    })\n\n    var status_str = conversionStatus(props.status);\n    var style_is_over = isOver ? \"is_over\" : \"is_not_over\"; \n    return (\n        <div className={styles.task_list + \" \" +  style_is_over} ref={drop}>\n            <p className={styles.task_status}>{status_str} [{Object.keys(props.taskList).length}]</p>\n            {\n                props.taskList.map(task_item => (\n                    <TaskItem\n                        task={task_item}\n                        setInitDispFlg={props.setInitDispFlg}\n                        show={props.show}\n                        key={\"TaskItem\" + task_item.id}\n                    />\n                ))\n            }\n        </div>\n    )\n}\n\nfunction conversionStatus(status: string){\n    var str: string;\n    switch(status) {\n        case \"1\":\n            str = 'NOT STARTED';\n            break;\n        case \"2\":\n            str = 'IN PROGRESS';\n            break;\n        case \"3\":\n            str = 'DONE';\n            break;\n    }\n    return str;\n}\n\nexport default TaskList;"]},"metadata":{},"sourceType":"module"}