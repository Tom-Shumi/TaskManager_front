{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState, useEffect } from 'react';\nimport { Modal, Button, Form, Row, Col } from 'react-bootstrap';\nimport { getApiClient } from '../util/AuthenticationUtil';\nimport Router from 'next/router';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport TaskComment from './TaskComment';\nimport styles from '../../styles/TaskComment.module.css';\nimport { TaskComment as TaskCommentClass } from '../common/interface';\n\nconst TaskCommentModal = props => {\n  const {\n    0: inputComment,\n    1: setInputComment\n  } = useState(\"\");\n  const {\n    0: comments,\n    1: setComments\n  } = useState([]);\n  const {\n    0: initDispFlg,\n    1: setInitDispFlg\n  } = useState(true);\n  useEffect(() => {\n    setInitDispFlg(false);\n    clearInputComment();\n    callGetTaskCommentList();\n  }, [initDispFlg]); // cookieを使用するaxios生成\n\n  let client = getApiClient();\n\n  const callGetTaskCommentList = () => {\n    var res = getTaskCommentList(props.task.id);\n    res.then(ret => setComments(ret));\n  };\n\n  const handleChangeInputComment = () => {\n    return e => setInputComment(e.target.value);\n  };\n\n  const saveComment = () => {\n    var params = {\n      comment: inputComment\n    };\n    var jsonParams = JSON.stringify(params);\n    client.post(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK_COMMENT + '/' + props.task.id, jsonParams, {\n      headers: {\n        'content-type': 'application/json'\n      }\n    }).then(response => {\n      setInitDispFlg(true);\n    }).catch(() => {\n      Router.push('/Error?400');\n    });\n  };\n\n  const clearInputComment = () => {\n    return setInputComment(\"\");\n  };\n\n  const loadNextComment = () => {\n    let maxCommentId = comments[comments.length - 1].id;\n\n    try {\n      client.get(`${process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK_COMMENT}/${props.task.id}?nextKey=${maxCommentId}`).then(res => {\n        let taskCommentList = createTaskCommentList(res.data);\n        setComments([...comments, ...taskCommentList]);\n      });\n    } catch (error) {\n      Router.push('/Error?400');\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(Modal, {\n    show: true,\n    onHide: props.close,\n    children: [/*#__PURE__*/_jsx(Modal.Header, {\n      closeButton: true,\n      children: /*#__PURE__*/_jsx(Modal.Title, {\n        children: \"Comment\"\n      })\n    }), /*#__PURE__*/_jsxs(Modal.Body, {\n      children: [/*#__PURE__*/_jsx(Form, {\n        children: /*#__PURE__*/_jsxs(Row, {\n          children: [/*#__PURE__*/_jsx(Col, {\n            xs: 12,\n            className: \"modal_input\",\n            children: /*#__PURE__*/_jsx(Form.Control, {\n              as: \"textarea\",\n              rows: 2,\n              value: inputComment,\n              onChange: handleChangeInputComment()\n            })\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: styles.task_comment_button_frame,\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              className: styles.task_comment_button,\n              children: /*#__PURE__*/_jsx(Button, {\n                variant: \"primary\",\n                className: \"button_sm\",\n                onClick: saveComment,\n                children: \"save\"\n              })\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: styles.task_comment_button,\n              children: /*#__PURE__*/_jsx(Button, {\n                variant: \"outline-dark\",\n                className: \"button_sm\",\n                onClick: clearInputComment,\n                children: \"clear\"\n              })\n            })]\n          }), /*#__PURE__*/_jsx(\"hr\", {})]\n        })\n      }), comments.map(taskComment => /*#__PURE__*/_jsx(TaskComment, {\n        taskComment: taskComment,\n        setInitDispFlg: setInitDispFlg\n      }, \"taskComment\" + taskComment.id)), /*#__PURE__*/_jsx(\"div\", {\n        className: styles.task_comment_load,\n        onClick: loadNextComment,\n        children: /*#__PURE__*/_jsx(\"i\", {\n          className: \"fa fa-arrow-circle-down faa-wrench animated-hover\"\n        })\n      })]\n    }), /*#__PURE__*/_jsx(Modal.Footer, {\n      children: /*#__PURE__*/_jsx(Button, {\n        variant: \"dark\",\n        onClick: props.close,\n        className: \"button_sm\",\n        children: \"close\"\n      })\n    })]\n  }, 'taskCommentModal');\n}; // 各apiを呼び出しタスクコメントリストを取得する\n\n\nasync function getTaskCommentList(taskId) {\n  let client = getApiClient();\n  var taskCommentList = [];\n\n  try {\n    const res = await client.get(`${process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK_COMMENT}/${taskId}`);\n    taskCommentList = createTaskCommentList(res.data);\n  } catch (error) {\n    Router.push('/Error?400');\n  }\n\n  return taskCommentList;\n}\n\nfunction createTaskCommentList(commentList) {\n  var taskCommentList = [];\n\n  if (commentList == null) {\n    return taskCommentList;\n  }\n\n  for (var i = 0; i < commentList.length; i++) {\n    taskCommentList.push(new TaskCommentClass(commentList[i][\"id\"], commentList[i][\"taskId\"], commentList[i][\"username\"], commentList[i][\"comment\"], commentList[i][\"createDate\"]));\n  }\n\n  return taskCommentList;\n}\n\nexport default TaskCommentModal;","map":null,"metadata":{},"sourceType":"module"}