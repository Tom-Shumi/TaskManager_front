{"ast":null,"code":"import _regeneratorRuntime from \"/app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState, useEffect } from 'react';\nimport TaskList from './TaskList';\nimport { Task } from '../common/interface';\nimport Router from 'next/router';\nimport styles from '../../styles/TaskBoard.module.css';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport { getApiClient } from '../util/AuthenticationUtil';\n\nvar TaskBoard = function TaskBoard(props) {\n  // 未対応のタスク\n  var _useState = useState([]),\n      taskListNotStarted = _useState[0],\n      setTaskListNotStarted = _useState[1]; // 対応中のタスク\n\n\n  var _useState2 = useState([]),\n      taskListInProgress = _useState2[0],\n      setTaskListInProgress = _useState2[1]; // 対応済みのタスク\n\n\n  var _useState3 = useState([]),\n      taskListDone = _useState3[0],\n      setTaskListDone = _useState3[1];\n\n  useEffect(function () {\n    props.setInitDispFlg(false);\n    callGetTaskList();\n  }, [props.initDispFlg]);\n\n  var callGetTaskList = function callGetTaskList() {\n    var res = getTaskList();\n    res.then(function (ret) {\n      return setTaskListNotStarted(ret[0]);\n    });\n    res.then(function (ret) {\n      return setTaskListInProgress(ret[1]);\n    });\n    res.then(function (ret) {\n      return setTaskListDone(ret[2]);\n    });\n  };\n\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: styles.task_board,\n    children: /*#__PURE__*/_jsxs(DndProvider, {\n      backend: HTML5Backend,\n      children: [/*#__PURE__*/_jsx(TaskList, {\n        taskList: taskListNotStarted,\n        status: 1,\n        setInitDispFlg: props.setInitDispFlg,\n        showTaskUpdateModal: props.showTaskUpdateModal,\n        showTaskCommentModal: props.showTaskCommentModal\n      }, \"TaskList1\"), /*#__PURE__*/_jsx(TaskList, {\n        taskList: taskListInProgress,\n        status: 2,\n        setInitDispFlg: props.setInitDispFlg,\n        showTaskUpdateModal: props.showTaskUpdateModal,\n        showTaskCommentModal: props.showTaskCommentModal\n      }, \"TaskList2\"), /*#__PURE__*/_jsx(TaskList, {\n        taskList: taskListDone,\n        status: 3,\n        setInitDispFlg: props.setInitDispFlg,\n        showTaskUpdateModal: props.showTaskUpdateModal,\n        showTaskCommentModal: props.showTaskCommentModal\n      }, \"TaskList3\")]\n    })\n  });\n}; // 各apiを呼び出しタスクリストを取得する\n\n\nfunction getTaskList() {\n  return _getTaskList.apply(this, arguments);\n} // apiレスポンスからタスクリストを生成する\n\n\nfunction _getTaskList() {\n  _getTaskList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var listNotStarted, lisInProgress, listDone, resNotStarted, resInProgress, resDone;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            listNotStarted = [];\n            lisInProgress = [];\n            listDone = [];\n            _context.prev = 3;\n            _context.next = 6;\n            return getApiClient().get(process.env.NEXT_PUBLIC_API_TASK + \"/1\");\n\n          case 6:\n            resNotStarted = _context.sent;\n            _context.next = 9;\n            return getApiClient().get(process.env.NEXT_PUBLIC_API_TASK + \"/2\");\n\n          case 9:\n            resInProgress = _context.sent;\n            _context.next = 12;\n            return getApiClient().get(process.env.NEXT_PUBLIC_API_TASK + \"/3\");\n\n          case 12:\n            resDone = _context.sent;\n            listNotStarted = createTaskList(resNotStarted.data);\n            lisInProgress = createTaskList(resInProgress.data);\n            listDone = createTaskList(resDone.data);\n            _context.next = 21;\n            break;\n\n          case 18:\n            _context.prev = 18;\n            _context.t0 = _context[\"catch\"](3);\n            Router.push('/Error?400');\n\n          case 21:\n            return _context.abrupt(\"return\", [listNotStarted, lisInProgress, listDone]);\n\n          case 22:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[3, 18]]);\n  }));\n  return _getTaskList.apply(this, arguments);\n}\n\nfunction createTaskList(responseData) {\n  var length = responseData.length;\n  var taskList = [];\n\n  for (var i = 0; i < length; i++) {\n    var task = new Task(responseData[i][\"id\"], responseData[i][\"task\"], responseData[i][\"description\"], responseData[i][\"priority\"], responseData[i][\"status\"], responseData[i][\"planDate\"], responseData[i][\"doneDate\"], []);\n    taskList.push(task);\n  }\n\n  return taskList;\n}\n\nexport default TaskBoard;","map":null,"metadata":{},"sourceType":"module"}