{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"/Users/shumiya/Desktop/dev/react/shumipro_front/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/TaskList.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport TaskItem from '../components/TaskItem';\nimport styles from '../styles/TaskList.module.css';\nimport { ItemTypes, Task } from './interface';\nimport { useDrop } from 'react-dnd';\n\nvar TaskList = function TaskList(props) {\n  _s();\n\n  var _useDrop = useDrop({\n    accept: ItemTypes.TASK_ITEM,\n    drop: function drop() {\n      return console.log(\"drop\");\n    }\n  }),\n      _useDrop2 = _slicedToArray(_useDrop, 2),\n      drop = _useDrop2[1];\n\n  var status_str = conversionStatus(props.status);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.task_list,\n    ref: drop,\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: styles.task_status,\n      children: [status_str, \" [\", Object.keys(props.taskList).length, \"]\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, _this), props.taskList.map(function (task_item) {\n      return /*#__PURE__*/_jsxDEV(TaskItem, {\n        task: task_item,\n        setInitDispFlg: props.setInitDispFlg,\n        show: props.show\n      }, \"TaskItem\" + task_item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 21\n      }, _this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(TaskList, \"hdmCamxlwL9WeSdzgzIVyaE48AI=\", false, function () {\n  return [useDrop];\n});\n\n_c = TaskList;\n\nfunction conversionStatus(status) {\n  var str;\n\n  switch (status) {\n    case \"1\":\n      str = 'NOT STARTED';\n      break;\n\n    case \"2\":\n      str = 'IN PROGRESS';\n      break;\n\n    case \"3\":\n      str = 'DONE';\n      break;\n  }\n\n  return str;\n}\n\nexport default TaskList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"sources":["/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/TaskList.tsx"],"names":["React","TaskItem","styles","ItemTypes","Task","useDrop","TaskList","props","accept","TASK_ITEM","drop","console","log","status_str","conversionStatus","status","task_list","task_status","Object","keys","taskList","length","map","task_item","setInitDispFlg","show","id","str"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAiD,OAAjD;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,MAAP,MAAmB,+BAAnB;AACA,SAASC,SAAT,EAAoBC,IAApB,QAAgC,aAAhC;AACA,SAASC,OAAT,QAAwB,WAAxB;;AASA,IAAMC,QAAiC,GAAG,SAApCA,QAAoC,CAACC,KAAD,EAAW;AAAA;;AAAA,iBAEhCF,OAAO,CAAC;AACrBG,IAAAA,MAAM,EAAEL,SAAS,CAACM,SADG;AAErBC,IAAAA,IAAI,EAAE;AAAA,aAAMC,OAAO,CAACC,GAAR,CAAY,MAAZ,CAAN;AAAA;AAFe,GAAD,CAFyB;AAAA;AAAA,MAExCF,IAFwC;;AAOjD,MAAIG,UAAU,GAAGC,gBAAgB,CAACP,KAAK,CAACQ,MAAP,CAAjC;AACA,sBACI;AAAK,IAAA,SAAS,EAAEb,MAAM,CAACc,SAAvB;AAAkC,IAAA,GAAG,EAAEN,IAAvC;AAAA,4BACI;AAAG,MAAA,SAAS,EAAER,MAAM,CAACe,WAArB;AAAA,iBAAmCJ,UAAnC,QAAiDK,MAAM,CAACC,IAAP,CAAYZ,KAAK,CAACa,QAAlB,EAA4BC,MAA7E;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,EAGQd,KAAK,CAACa,QAAN,CAAeE,GAAf,CAAmB,UAAAC,SAAS;AAAA,0BACxB,QAAC,QAAD;AACI,QAAA,IAAI,EAAEA,SADV;AAEI,QAAA,cAAc,EAAEhB,KAAK,CAACiB,cAF1B;AAGI,QAAA,IAAI,EAAEjB,KAAK,CAACkB;AAHhB,SAIS,aAAaF,SAAS,CAACG,EAJhC;AAAA;AAAA;AAAA;AAAA,eADwB;AAAA,KAA5B,CAHR;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ;AAeH,CAvBD;;GAAMpB,Q;UAEeD,O;;;KAFfC,Q;;AAyBN,SAASQ,gBAAT,CAA0BC,MAA1B,EAAyC;AACrC,MAAIY,GAAJ;;AACA,UAAOZ,MAAP;AACI,SAAK,GAAL;AACIY,MAAAA,GAAG,GAAG,aAAN;AACA;;AACJ,SAAK,GAAL;AACIA,MAAAA,GAAG,GAAG,aAAN;AACA;;AACJ,SAAK,GAAL;AACIA,MAAAA,GAAG,GAAG,MAAN;AACA;AATR;;AAWA,SAAOA,GAAP;AACH;;AAED,eAAerB,QAAf","sourcesContent":["import React , { Dispatch, SetStateAction } from 'react';\nimport TaskItem from '../components/TaskItem';\nimport styles from '../styles/TaskList.module.css';\nimport { ItemTypes, Task } from './interface';\nimport { useDrop } from 'react-dnd'\n\ninterface TaskListProps {\n    taskList: Task[];\n    status: string;\n    setInitDispFlg: Dispatch<SetStateAction<Boolean>>;\n    show: (Task) => void;\n}\n\nconst TaskList: React.FC<TaskListProps> = (props) => {\n\n    const [, drop] = useDrop({\n        accept: ItemTypes.TASK_ITEM,\n        drop: () => console.log(\"drop\"),\n    })\n\n    var status_str = conversionStatus(props.status);\n    return (\n        <div className={styles.task_list} ref={drop}>\n            <p className={styles.task_status}>{status_str} [{Object.keys(props.taskList).length}]</p>\n            {\n                props.taskList.map(task_item => (\n                    <TaskItem\n                        task={task_item}\n                        setInitDispFlg={props.setInitDispFlg}\n                        show={props.show}\n                        key={\"TaskItem\" + task_item.id}\n                    />\n                ))\n            }\n        </div>\n    )\n}\n\nfunction conversionStatus(status: string){\n    var str: string;\n    switch(status) {\n        case \"1\":\n            str = 'NOT STARTED';\n            break;\n        case \"2\":\n            str = 'IN PROGRESS';\n            break;\n        case \"3\":\n            str = 'DONE';\n            break;\n    }\n    return str;\n}\n\nexport default TaskList;"]},"metadata":{},"sourceType":"module"}