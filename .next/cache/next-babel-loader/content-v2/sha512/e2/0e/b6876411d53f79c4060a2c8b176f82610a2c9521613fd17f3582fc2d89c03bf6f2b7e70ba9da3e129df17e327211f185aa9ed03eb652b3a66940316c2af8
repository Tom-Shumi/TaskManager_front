{"ast":null,"code":"import moment from 'moment';\n/**\n * JST基準に変換して返す\n * @param {string} dateTimeStr YYYY-MM-DDTHH:mm:00Z\n * @returns {moment.Moment}\n */\n\nconst parseAsMoment = dateTimeStr => {\n  return moment.utc(dateTimeStr, 'YYYY-MM-DDTHH:mm:00Z', 'ja').utcOffset(9);\n};\n/**\n * 日付形式に変換して返す\n * @param {moment.Moment} momentInstance\n * @returns {string}\n */\n\n\nconst toUtcIso8601str = momentInstance => {\n  return momentInstance.clone().utc().format('YYYY-MM-DDTHH:mm:00Z');\n};\n\nconst parseDate = dateStr => {\n  if (!dateStr) {\n    return \"\";\n  } else {\n    return Date.parse(dateStr);\n  }\n};\n\nconst curentDateStrYYYYMMDD = () => {\n  let today = new Date();\n  return today.getFullYear() + \" / \" + String(today.getMonth() + 1).padStart(2, '0') + \" / \" + String(today.getDate()).padStart(2, '0');\n};\n\nconst dateStrDelimiterYYYYMMDD = date => {\n  return date.getFullYear() + \" / \" + String(date.getMonth() + 1).padStart(2, '0') + \" / \" + String(date.getDate()).padStart(2, '0');\n};\n\nconst dateStrYYYYMMDD = date => {\n  return date.getFullYear() + \" / \" + String(date.getMonth() + 1).padStart(2, '0') + \" / \" + String(date.getDate()).padStart(2, '0');\n};\n\nexport { parseAsMoment, toUtcIso8601str, parseDate, curentDateStrYYYYMMDD, dateStrYYYYMMDD };","map":{"version":3,"sources":["/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/util/DatePickerUtil.ts"],"names":["moment","parseAsMoment","dateTimeStr","utc","utcOffset","toUtcIso8601str","momentInstance","clone","format","parseDate","dateStr","Date","parse","curentDateStrYYYYMMDD","today","getFullYear","String","getMonth","padStart","getDate","dateStrDelimiterYYYYMMDD","date","dateStrYYYYMMDD"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,aAAa,GAAIC,WAAD,IAAiB;AACnC,SAAOF,MAAM,CAACG,GAAP,CAAWD,WAAX,EAAwB,sBAAxB,EAAgD,IAAhD,EAAsDE,SAAtD,CAAgE,CAAhE,CAAP;AACH,CAFD;AAIE;AACF;AACA;AACA;AACA;;;AACA,MAAMC,eAAe,GAAIC,cAAD,IAAoB;AACxC,SAAOA,cAAc,CAClBC,KADI,GAEJJ,GAFI,GAGJK,MAHI,CAGG,sBAHH,CAAP;AAIH,CALD;;AAOA,MAAMC,SAAS,GAAIC,OAAD,IAAa;AAC7B,MAAI,CAACA,OAAL,EAAc;AACZ,WAAO,EAAP;AACD,GAFD,MAEO;AACL,WAAOC,IAAI,CAACC,KAAL,CAAWF,OAAX,CAAP;AACD;AACF,CAND;;AAQA,MAAMG,qBAAqB,GAAG,MAAM;AAClC,MAAIC,KAAK,GAAG,IAAIH,IAAJ,EAAZ;AACA,SAAOG,KAAK,CAACC,WAAN,KAAsB,KAAtB,GAA8BC,MAAM,CAAEF,KAAK,CAACG,QAAN,KAAmB,CAArB,CAAN,CAA+BC,QAA/B,CAAwC,CAAxC,EAA2C,GAA3C,CAA9B,GAAgF,KAAhF,GAAwFF,MAAM,CAACF,KAAK,CAACK,OAAN,EAAD,CAAN,CAAwBD,QAAxB,CAAiC,CAAjC,EAAoC,GAApC,CAA/F;AACD,CAHD;;AAKA,MAAME,wBAAwB,GAAIC,IAAD,IAAgB;AAC/C,SAAOA,IAAI,CAACN,WAAL,KAAqB,KAArB,GAA6BC,MAAM,CAAEK,IAAI,CAACJ,QAAL,KAAkB,CAApB,CAAN,CAA8BC,QAA9B,CAAuC,CAAvC,EAA0C,GAA1C,CAA7B,GAA8E,KAA9E,GAAsFF,MAAM,CAACK,IAAI,CAACF,OAAL,EAAD,CAAN,CAAuBD,QAAvB,CAAgC,CAAhC,EAAmC,GAAnC,CAA7F;AACD,CAFD;;AAIA,MAAMI,eAAe,GAAID,IAAD,IAAgB;AACtC,SAAOA,IAAI,CAACN,WAAL,KAAqB,KAArB,GAA6BC,MAAM,CAAEK,IAAI,CAACJ,QAAL,KAAkB,CAApB,CAAN,CAA8BC,QAA9B,CAAuC,CAAvC,EAA0C,GAA1C,CAA7B,GAA8E,KAA9E,GAAsFF,MAAM,CAACK,IAAI,CAACF,OAAL,EAAD,CAAN,CAAuBD,QAAvB,CAAgC,CAAhC,EAAmC,GAAnC,CAA7F;AACD,CAFD;;AAIA,SAAQjB,aAAR,EAAuBI,eAAvB,EAAwCI,SAAxC,EAAmDI,qBAAnD,EAA0ES,eAA1E","sourcesContent":["import moment from 'moment';\n\n/**\n * JST基準に変換して返す\n * @param {string} dateTimeStr YYYY-MM-DDTHH:mm:00Z\n * @returns {moment.Moment}\n */\nconst parseAsMoment = (dateTimeStr) => {\n    return moment.utc(dateTimeStr, 'YYYY-MM-DDTHH:mm:00Z', 'ja').utcOffset(9)\n}\n  \n  /**\n   * 日付形式に変換して返す\n   * @param {moment.Moment} momentInstance\n   * @returns {string}\n   */\nconst toUtcIso8601str = (momentInstance) => {\n    return momentInstance\n      .clone()\n      .utc()\n      .format('YYYY-MM-DDTHH:mm:00Z')\n}\n\nconst parseDate = (dateStr) => {\n  if (!dateStr) {\n    return \"\"\n  } else {\n    return Date.parse(dateStr);\n  }\n}\n\nconst curentDateStrYYYYMMDD = () => {\n  let today = new Date();\n  return today.getFullYear() + \" / \" + String((today.getMonth() + 1)).padStart(2, '0') + \" / \" + String(today.getDate()).padStart(2, '0');\n}\n\nconst dateStrDelimiterYYYYMMDD = (date: Date) => {\n  return date.getFullYear() + \" / \" + String((date.getMonth() + 1)).padStart(2, '0') + \" / \" + String(date.getDate()).padStart(2, '0');\n}\n\nconst dateStrYYYYMMDD = (date: Date) => {\n  return date.getFullYear() + \" / \" + String((date.getMonth() + 1)).padStart(2, '0') + \" / \" + String(date.getDate()).padStart(2, '0');\n}\n\nexport {parseAsMoment, toUtcIso8601str, parseDate, curentDateStrYYYYMMDD, dateStrYYYYMMDD};"]},"metadata":{},"sourceType":"module"}