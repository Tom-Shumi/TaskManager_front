{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shumiya/Desktop/dev/react/shumipro_front/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/shumiya/Desktop/dev/react/shumipro_front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/TaskGraph.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { TaskGraph as TaskGraphClass } from './interface';\nimport Router from 'next/router';\nimport Axios from \"axios\";\n\nvar TaskGraph = function TaskGraph(props) {\n  _s();\n\n  // 未対応のタスク\n  var _useState = useState([]),\n      planTaskGraphList = _useState[0],\n      setPlanTaskGraphList = _useState[1]; // 対応中のタスク\n\n\n  var _useState2 = useState([]),\n      doneTaskGraphList = _useState2[0],\n      setDoneTaskGraphList = _useState2[1]; // 対応済みのタスク\n\n\n  var _useState3 = useState([]),\n      commentGraphList = _useState3[0],\n      setCommentGraphList = _useState3[1];\n\n  useEffect(function () {\n    callGetTaskGraphInfo();\n  }, []);\n\n  var callGetTaskGraphInfo = function callGetTaskGraphInfo() {};\n  /** グラフデータ */\n\n\n  var graphData = {\n    labels: [// 軸ラベル\n    // 各ラベルを配列にすることで軸ラベルが改行されて表示される\n    ['2019年', '1月'], ['2019年', '2月'], ['2019年', '3月'], ['2019年', '4月'], ['2019年', '5月'], ['2019年', '6月'], ['2019年', '7月'], ['2019年', '8月'], ['2019年', '9月'], ['2019年', '10月'], ['2019年', '11月'], ['2019年', '12月']],\n    datasets: [// 表示するデータセット\n    {\n      data: [5.6, 7.2, 10.6, 13.6, 20, 21.8, 24.1, 28.4, 25.1, 19.4, 13.1, 8.5],\n      backgroundColor: 'rgba(30, 144, 255, 1)',\n      label: '月別合計降水量(mm)'\n    }]\n  };\n  /** グラフオプション */\n\n  var graphOption = {\n    scales: {\n      xAxes: [// x軸オプション\n      {\n        scaleLabel: {\n          // x軸ラベルオプション\n          display: true,\n          labelString: '2019年'\n        }\n      }],\n      yAxes: [// y軸オプション\n      {\n        scaleLabel: {\n          // y軸ラベルオプション\n          display: true,\n          labelString: '合計降水量(mm)'\n        },\n        ticks: {\n          // y軸メモリオプション\n          beginAtZero: true,\n          callback: function callback(value, index, values) {\n            return \"\".concat(value, \"(mm)\");\n          }\n        }\n      }]\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Bar, {\n      type: \"\",\n      data: graphData,\n      options: graphOption\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(TaskGraph, \"XCjWqn/Qo4ep0aeT3bTHa3NDgrI=\");\n\n_c = TaskGraph;\n\nfunction getTaskGraphInfo() {\n  return _getTaskGraphInfo.apply(this, arguments);\n} // apiレスポンスからタスクリストを生成する\n\n\nfunction _getTaskGraphInfo() {\n  _getTaskGraphInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var client, planTaskGraphList, doneTaskGraphList, commentGraphList, taskGraphInfo;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            client = Axios.create({\n              withCredentials: true\n            });\n            planTaskGraphList = [];\n            doneTaskGraphList = [];\n            commentGraphList = [];\n            _context.prev = 4;\n            _context.next = 7;\n            return client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK_GRAPH);\n\n          case 7:\n            taskGraphInfo = _context.sent;\n            planTaskGraphList = createTaskGraphList(taskGraphInfo.data[\"planTask\"]);\n            doneTaskGraphList = createTaskGraphList(taskGraphInfo.data[\"doneTask\"]);\n            commentGraphList = createTaskGraphList(taskGraphInfo.data[\"comment\"]);\n            _context.next = 16;\n            break;\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](4);\n            Router.push('/Error?400');\n\n          case 16:\n            return _context.abrupt(\"return\", [planTaskGraphList, doneTaskGraphList, commentGraphList]);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[4, 13]]);\n  }));\n  return _getTaskGraphInfo.apply(this, arguments);\n}\n\nfunction createTaskGraphList(responseData) {\n  var length = responseData.length;\n  var taskGraphList = [];\n\n  for (var i = 0; i < length; i++) {\n    var taskGraph = new TaskGraphClass(responseData[i][\"date\"], responseData[i][\"count\"]);\n    taskGraphList.push(task);\n  }\n\n  return taskGraphList;\n}\n\nexport default TaskGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskGraph\");","map":{"version":3,"sources":["/Users/shumiya/Desktop/dev/react/shumipro_front/src/components/TaskGraph.tsx"],"names":["React","useState","useEffect","Bar","TaskGraph","TaskGraphClass","Router","Axios","props","planTaskGraphList","setPlanTaskGraphList","doneTaskGraphList","setDoneTaskGraphList","commentGraphList","setCommentGraphList","callGetTaskGraphInfo","graphData","labels","datasets","data","backgroundColor","label","graphOption","scales","xAxes","scaleLabel","display","labelString","yAxes","ticks","beginAtZero","callback","value","index","values","getTaskGraphInfo","client","create","withCredentials","get","process","env","NEXT_PUBLIC_API_SERVER","NEXT_PUBLIC_API_TASK_GRAPH","taskGraphInfo","createTaskGraphList","push","responseData","length","taskGraphList","i","taskGraph","task"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAA0CC,QAA1C,EAAoDC,SAApD,QAAoE,OAApE;AACA,SAASC,GAAT,QAAoB,iBAApB;AAEA,SAASC,SAAS,IAAIC,cAAtB,QAA4C,aAA5C;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AASA,IAAMH,SAAmC,GAAG,SAAtCA,SAAsC,CAACI,KAAD,EAAW;AAAA;;AACnD;AADmD,kBAEDP,QAAQ,CAAmB,EAAnB,CAFP;AAAA,MAE5CQ,iBAF4C;AAAA,MAEzBC,oBAFyB,iBAGnD;;;AAHmD,mBAIDT,QAAQ,CAAmB,EAAnB,CAJP;AAAA,MAI5CU,iBAJ4C;AAAA,MAIzBC,oBAJyB,kBAKnD;;;AALmD,mBAMHX,QAAQ,CAAmB,EAAnB,CANL;AAAA,MAM5CY,gBAN4C;AAAA,MAM1BC,mBAN0B;;AAQrDZ,EAAAA,SAAS,CAAC,YAAM;AACda,IAAAA,oBAAoB;AACrB,GAFQ,EAEN,EAFM,CAAT;;AAIA,MAAMA,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAM,CAElC,CAFD;AAGI;;;AACJ,MAAMC,SAAS,GAAG;AAChBC,IAAAA,MAAM,EAAE,CACN;AACA;AACA,KAAC,OAAD,EAAU,IAAV,CAHM,EAIN,CAAC,OAAD,EAAU,IAAV,CAJM,EAKN,CAAC,OAAD,EAAU,IAAV,CALM,EAMN,CAAC,OAAD,EAAU,IAAV,CANM,EAON,CAAC,OAAD,EAAU,IAAV,CAPM,EAQN,CAAC,OAAD,EAAU,IAAV,CARM,EASN,CAAC,OAAD,EAAU,IAAV,CATM,EAUN,CAAC,OAAD,EAAU,IAAV,CAVM,EAWN,CAAC,OAAD,EAAU,IAAV,CAXM,EAYN,CAAC,OAAD,EAAU,KAAV,CAZM,EAaN,CAAC,OAAD,EAAU,KAAV,CAbM,EAcN,CAAC,OAAD,EAAU,KAAV,CAdM,CADQ;AAiBhBC,IAAAA,QAAQ,EAAE,CACR;AACA;AACEC,MAAAA,IAAI,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,IAAX,EAAiB,IAAjB,EAAuB,EAAvB,EAA2B,IAA3B,EAAiC,IAAjC,EAAuC,IAAvC,EAA6C,IAA7C,EAAmD,IAAnD,EAAyD,IAAzD,EAA+D,GAA/D,CADR;AAEEC,MAAAA,eAAe,EAAE,uBAFnB;AAGEC,MAAAA,KAAK,EAAE;AAHT,KAFQ;AAjBM,GAAlB;AA2BA;;AACA,MAAMC,WAAW,GAAG;AAClBC,IAAAA,MAAM,EAAE;AACNC,MAAAA,KAAK,EAAE,CACL;AACA;AACEC,QAAAA,UAAU,EAAE;AACV;AACAC,UAAAA,OAAO,EAAE,IAFC;AAGVC,UAAAA,WAAW,EAAE;AAHH;AADd,OAFK,CADD;AAWNC,MAAAA,KAAK,EAAE,CACL;AACA;AACEH,QAAAA,UAAU,EAAE;AACV;AACAC,UAAAA,OAAO,EAAE,IAFC;AAGVC,UAAAA,WAAW,EAAE;AAHH,SADd;AAMEE,QAAAA,KAAK,EAAE;AACL;AACAC,UAAAA,WAAW,EAAE,IAFR;AAGLC,UAAAA,QAAQ,EAAE,kBAAUC,KAAV,EAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AACxC,6BAAUF,KAAV;AACD;AALI;AANT,OAFK;AAXD;AADU,GAApB;AAgCE,sBACI;AAAA,2BACI,QAAC,GAAD;AAAK,MAAA,IAAI,EAAC,EAAV;AAAa,MAAA,IAAI,EAAEhB,SAAnB;AAA8B,MAAA,OAAO,EAAEM;AAAvC;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,WADJ;AAKH,CAjFD;;GAAMlB,S;;KAAAA,S;;SAmFS+B,gB;;EAiBf;;;;+EAjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACMC,YAAAA,MADN,GACe7B,KAAK,CAAC8B,MAAN,CAAa;AAAEC,cAAAA,eAAe,EAAE;AAAnB,aAAb,CADf;AAEM7B,YAAAA,iBAFN,GAE4C,EAF5C;AAGME,YAAAA,iBAHN,GAG4C,EAH5C;AAIME,YAAAA,gBAJN,GAI2C,EAJ3C;AAAA;AAAA;AAAA,mBAMkCuB,MAAM,CAACG,GAAP,CAAWC,OAAO,CAACC,GAAR,CAAYC,sBAAZ,GAAqCF,OAAO,CAACC,GAAR,CAAYE,0BAA5D,CANlC;;AAAA;AAMYC,YAAAA,aANZ;AAQMnC,YAAAA,iBAAiB,GAAGoC,mBAAmB,CAACD,aAAa,CAACzB,IAAd,CAAmB,UAAnB,CAAD,CAAvC;AACAR,YAAAA,iBAAiB,GAAGkC,mBAAmB,CAACD,aAAa,CAACzB,IAAd,CAAmB,UAAnB,CAAD,CAAvC;AACAN,YAAAA,gBAAgB,GAAGgC,mBAAmB,CAACD,aAAa,CAACzB,IAAd,CAAmB,SAAnB,CAAD,CAAtC;AAVN;AAAA;;AAAA;AAAA;AAAA;AAYMb,YAAAA,MAAM,CAACwC,IAAP,CAAY,YAAZ;;AAZN;AAAA,6CAcS,CAACrC,iBAAD,EAAoBE,iBAApB,EAAuCE,gBAAvC,CAdT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAkBA,SAASgC,mBAAT,CAA6BE,YAA7B,EAAmE;AACjE,MAAIC,MAAc,GAAGD,YAAY,CAACC,MAAlC;AACA,MAAIC,aAA+B,GAAG,EAAtC;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAiBA,CAAC,GAAGF,MAArB,EAA8BE,CAAC,EAA/B,EAAmC;AAC/B,QAAIC,SAAS,GAAG,IAAI9C,cAAJ,CAAmB0C,YAAY,CAACG,CAAD,CAAZ,CAAgB,MAAhB,CAAnB,EAA4CH,YAAY,CAACG,CAAD,CAAZ,CAAgB,OAAhB,CAA5C,CAAhB;AACAD,IAAAA,aAAa,CAACH,IAAd,CAAmBM,IAAnB;AACH;;AACD,SAAOH,aAAP;AACD;;AAED,eAAe7C,SAAf","sourcesContent":["import React, { Dispatch, SetStateAction, useState, useEffect} from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport TaskList from '../components/TaskList'\nimport { TaskGraph as TaskGraphClass } from './interface';\nimport Router from 'next/router';\nimport Axios from \"axios\";\nimport styles from '../styles/TaskBoard.module.css';\nimport { DndProvider } from 'react-dnd';\nimport {HTML5Backend} from 'react-dnd-html5-backend';\n\ninterface TaskGraphProps {\n\n}\n\nconst TaskGraph: React.FC<TaskGraphProps> = (props) => {\n    // 未対応のタスク\n    const [planTaskGraphList, setPlanTaskGraphList] = useState<TaskGraphClass[]>([]);\n    // 対応中のタスク\n    const [doneTaskGraphList, setDoneTaskGraphList] = useState<TaskGraphClass[]>([]);\n    // 対応済みのタスク\n    const [commentGraphList, setCommentGraphList] = useState<TaskGraphClass[]>([]);\n\n  useEffect(() => {\n    callGetTaskGraphInfo();\n  }, []);\n\n  const callGetTaskGraphInfo = () => {\n\n  }\n      /** グラフデータ */\n  const graphData = {\n    labels: [\n      // 軸ラベル\n      // 各ラベルを配列にすることで軸ラベルが改行されて表示される\n      ['2019年', '1月'],\n      ['2019年', '2月'],\n      ['2019年', '3月'],\n      ['2019年', '4月'],\n      ['2019年', '5月'],\n      ['2019年', '6月'],\n      ['2019年', '7月'],\n      ['2019年', '8月'],\n      ['2019年', '9月'],\n      ['2019年', '10月'],\n      ['2019年', '11月'],\n      ['2019年', '12月'],\n    ],\n    datasets: [\n      // 表示するデータセット\n      {\n        data: [5.6, 7.2, 10.6, 13.6, 20, 21.8, 24.1, 28.4, 25.1, 19.4, 13.1, 8.5],\n        backgroundColor: 'rgba(30, 144, 255, 1)',\n        label: '月別合計降水量(mm)',\n      },\n    ],\n  };\n\n  /** グラフオプション */\n  const graphOption = {\n    scales: {\n      xAxes: [\n        // x軸オプション\n        {\n          scaleLabel: {\n            // x軸ラベルオプション\n            display: true,\n            labelString: '2019年',\n          },\n        },\n      ],\n      yAxes: [\n        // y軸オプション\n        {\n          scaleLabel: {\n            // y軸ラベルオプション\n            display: true,\n            labelString: '合計降水量(mm)',\n          },\n          ticks: {\n            // y軸メモリオプション\n            beginAtZero: true,\n            callback: function (value, index, values) {\n              return `${value}(mm)`;\n            },\n          },\n        },\n      ],\n    },\n  };\n\n    return (\n        <div>\n            <Bar type=\"\" data={graphData} options={graphOption} />\n        </div>\n    )\n}\n\nasync function getTaskGraphInfo(){\n  let client = Axios.create({ withCredentials: true });\n  var planTaskGraphList :TaskGraphClass[] = [];\n  var doneTaskGraphList :TaskGraphClass[] = [];\n  var commentGraphList :TaskGraphClass[] = [];\n  try {\n      const taskGraphInfo = await client.get(process.env.NEXT_PUBLIC_API_SERVER + process.env.NEXT_PUBLIC_API_TASK_GRAPH);\n\n      planTaskGraphList = createTaskGraphList(taskGraphInfo.data[\"planTask\"]);\n      doneTaskGraphList = createTaskGraphList(taskGraphInfo.data[\"doneTask\"]);\n      commentGraphList = createTaskGraphList(taskGraphInfo.data[\"comment\"]);\n  } catch(error){\n      Router.push('/Error?400');\n  }\n  return [planTaskGraphList, doneTaskGraphList, commentGraphList];\n}\n\n// apiレスポンスからタスクリストを生成する\nfunction createTaskGraphList(responseData: any[]): TaskGraphClass[]{\n  let length: number = responseData.length;\n  var taskGraphList :TaskGraphClass[] = [];\n  for (var i = 0 ; i < length ; i++) {\n      let taskGraph = new TaskGraphClass(responseData[i][\"date\"], responseData[i][\"count\"]);\n      taskGraphList.push(task);\n  }\n  return taskGraphList;\n}\n\nexport default TaskGraph"]},"metadata":{},"sourceType":"module"}